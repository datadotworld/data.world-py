{
  "basePath": "/v0",
  "definitions": {
    "AgentHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "AnalysisImage": {
      "type": "object",
      "properties": {
        "externalUrl": {
          "type": "string"
        }
      }
    },
    "AssetStatus": {
      "type": "object",
      "properties": {
        "assetStatusLabel": {
          "type": "string"
        },
        "dispositionLabel": {
          "type": "string"
        }
      }
    },
    "CatalogRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "CatalogAnalysisHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "analysisid": {
          "type": "string"
        },
        "assetStatus": {
          "$ref": "#/definitions/AssetStatus"
        },
        "catalogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogId"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "entryTypeHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryType"
          }
        },
        "entryTypeLabel": {
          "type": "string"
        },
        "previewImage": {
          "$ref": "#/definitions/AnalysisImage"
        },
        "referent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogAnalysisRequest": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "example": [
            "Aid Option"
          ],
          "description": "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "example": "crypto.snowflake",
          "description": "Title of the metadata resource. Required for POST and PUT.",
          "minLength": 1,
          "maxLength": 60
        },
        "typeLabel": {
          "type": "string",
          "example": "Tableau dashboard",
          "description": "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description": {
          "type": "string",
          "example": "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description": "A short, but descriptive statement about the metadata resource.",
          "minLength": 0,
          "maxLength": 120
        },
        "tags": {
          "type": "array",
          "example": [
            "sensitive"
          ],
          "description": "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        }
      }
    },
    "CatalogBusinessTermHydrationDto": {
      "type": "object",
      "properties": {
        "abstract_": {
          "type": "string"
        },
        "agentid": {
          "type": "string"
        },
        "assetStatus": {
          "$ref": "#/definitions/AssetStatus"
        },
        "businessTermid": {
          "type": "string"
        },
        "catalogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogId"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "entryTypeHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryType"
          }
        },
        "entryTypeLabel": {
          "type": "string"
        },
        "referent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogColumnHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "assetStatus": {
          "$ref": "#/definitions/AssetStatus"
        },
        "columnid": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "entryTypeHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryType"
          }
        },
        "entryTypeLabel": {
          "type": "string"
        },
        "referent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogColumnRequest": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "example": [
            "Aid Option"
          ],
          "description": "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "example": "crypto.snowflake",
          "description": "Title of the metadata resource. Required for POST and PUT.",
          "minLength": 1,
          "maxLength": 60
        },
        "typeLabel": {
          "type": "string",
          "example": "Tableau dashboard",
          "description": "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description": {
          "type": "string",
          "example": "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description": "A short, but descriptive statement about the metadata resource.",
          "minLength": 0,
          "maxLength": 120
        },
        "tags": {
          "type": "array",
          "example": [
            "sensitive"
          ],
          "description": "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "dataType": {
          "type": "string",
          "example": "BIGINT",
          "description": "Data Type name for column. Required for POST and PUT."
        },
        "columnIndex": {
          "type": "integer",
          "format": "int32",
          "example": "5",
          "description": "Column index values from 1 and upwards. 0 is default."
        }
      }
    },
    "CatalogConceptHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "altLabel": {
          "type": "string"
        },
        "conceptHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConceptEntry"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "iri": {
          "type": "string"
        },
        "prefLabel": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogGlossaryRequest": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "example": [
            "Aid Option"
          ],
          "description": "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "example": "crypto.snowflake",
          "description": "Title of the metadata resource. Required for POST and PUT.",
          "minLength": 1,
          "maxLength": 60
        },
        "typeLabel": {
          "type": "string",
          "example": "Tableau dashboard",
          "description": "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description": {
          "type": "string",
          "example": "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description": "A short, but descriptive statement about the metadata resource.",
          "minLength": 0,
          "maxLength": 120
        },
        "tags": {
          "type": "array",
          "example": [
            "sensitive"
          ],
          "description": "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        }
      }
    },
    "CatalogHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "catalogid": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceId"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogId": {
      "type": "object",
      "required": [
        "collectionId",
        "owner"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "collectionId": {
          "type": "string"
        }
      }
    },
    "CatalogTableHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "catalogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogId"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "entryTypeHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryType"
          }
        },
        "entryTypeLabel": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "referent": {
          "type": "string"
        },
        "sourceId": {
          "$ref": "#/definitions/SourceId"
        },
        "tableid": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogTableRequest": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "example": [
            "Aid Option"
          ],
          "description": "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "example": "crypto.snowflake",
          "description": "Title of the metadata resource. Required for POST and PUT.",
          "minLength": 1,
          "maxLength": 60
        },
        "typeLabel": {
          "type": "string",
          "example": "Tableau dashboard",
          "description": "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description": {
          "type": "string",
          "example": "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description": "A short, but descriptive statement about the metadata resource.",
          "minLength": 0,
          "maxLength": 120
        },
        "tags": {
          "type": "array",
          "example": [
            "HumanitarianAid"
          ],
          "description": "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        }
      }
    },
    "ConceptEntry": {
      "type": "object",
      "properties": {
        "altLabel": {
          "type": "string"
        },
        "iri": {
          "type": "string"
        },
        "prefLabel": {
          "type": "string"
        }
      }
    },
    "ConnectionDto": {
      "type": "object",
      "required": [
        "host",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Humanitarian_Aid",
          "description": "Connection name",
          "minLength": 0,
          "maxLength": 1024,
          "pattern": "[\\w\\_\\.-]{0,}"
        },
        "type": {
          "type": "string",
          "example": "ATHENA",
          "description": "Database Type"
        },
        "host": {
          "type": "string",
          "example": "dwserver.thinktank.com",
          "description": "Database Host"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "example": "5432",
          "description": "Database Port",
          "minimum": 1,
          "maximum": 65535
        },
        "database": {
          "type": "string",
          "example": "schemadw",
          "description": "Database/Schema Logical Name",
          "minLength": 0,
          "maxLength": 256,
          "pattern": "[\\w\\_]{0,}"
        },
        "credentials": {
          "description": "Database Credentials",
          "$ref": "#/definitions/DatabaseCredentials"
        },
        "sshTunnel": {
          "description": "ssh tunnel configuration",
          "$ref": "#/definitions/SshTunnel"
        },
        "sslRequired": {
          "type": "boolean",
          "example": true,
          "description": "Is ssl required",
          "default": false
        },
        "verifyServerCertificate": {
          "type": "boolean",
          "example": true,
          "description": "Should server certificate be verified",
          "default": false
        },
        "trustedServerCertificates": {
          "type": "string",
          "description": "trusted server certificates",
          "minLength": 0,
          "maxLength": 100000
        },
        "properties": {
          "type": "object",
          "description": "Properties such as auto commit, isolation level etc.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "advancedProperties": {
          "type": "object",
          "description": "Advanced properties",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CreateDatasetResponse": {
      "properties": {
        "message": {
          "type": "string"
        },
        "uri": {
          "description": "URI of newly created dataset.",
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "title": "Dataset Create Response",
      "type": "object"
    },
    "CreateInsightResponse": {
      "properties": {
        "message": {
          "type": "string"
        },
        "uri": {
          "description": "URI of newly created insight.",
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "title": "Insight Create Response",
      "type": "object"
    },
    "CreateProjectResponse": {
      "properties": {
        "message": {
          "type": "string"
        },
        "uri": {
          "description": "URI of newly created project.",
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "title": "Project Create Response",
      "type": "object"
    },
    "CreateQueryRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Query name.",
          "type": "string"
        },
        "content": {
          "description": "The actual query text to be executed.",
          "type": "string"
        },
        "language": {
          "description": "The language in which this query is written. Can be either 'SPARQL' or 'SQL'.",
          "type": "string"
        },
        "published": {
          "description": "Indicates if this query should be visible to anyone with access to its dataset or project.",
          "type": "boolean"
        }
      },
      "required": [
        "content",
        "name",
        "language"
      ]
    },
    "CreateResponse": {
      "properties": {
        "message": {
          "type": "string"
        },
        "uri": {
          "description": "URI of newly created resource.",
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "title": "Create Response",
      "type": "object"
    },
    "DatabaseCredentials": {
      "type": "object",
      "required": [
        "user"
      ],
      "properties": {
        "user": {
          "type": "string",
          "example": "johnsmith",
          "description": "user name",
          "minLength": 0,
          "maxLength": 1024
        },
        "password": {
          "type": "string",
          "example": "!AdHJfGgd@3#",
          "description": "password",
          "minLength": 0,
          "maxLength": 16384
        }
      }
    },
    "DatabaseDbo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "catalog": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DatabaseSourceReference": {
      "type": "object",
      "properties": {
        "owner": {
          "description": "Owner Agent",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9]){1,29}[a-z0-9]",
          "type": "string"
        },
        "id": {
          "description": "data.world database connection identifier ",
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "DatasetCreateRequest": {
      "properties": {
        "description": {
          "description": "Short dataset description.",
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "files": {
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          },
          "type": "array",
          "uniqueItems": false
        },
        "license": {
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "ODC-BY",
            "CC-BY-SA",
            "CDLA-Sharing-1.0",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-NC-ND",
            "CC BY-NC-SA",
            "Other"
          ],
          "type": "string"
        },
        "summary": {
          "description": "Long-form dataset summary (Markdown supported).",
          "maxLength": 25000,
          "minLength": 0,
          "type": "string"
        },
        "tags": {
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "items": {
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*",
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "title": {
          "description": "Dataset name.",
          "maxLength": 60,
          "minLength": 1,
          "type": "string"
        },
        "visibility": {
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators. `DISCOVERABLE` if the dataset can be seen by any member of data.world, but only files marked `sample` or `preview` are visible",
          "enum": [
            "OPEN",
            "DISCOVERABLE",
            "PRIVATE"
          ],
          "type": "string"
        },
        "properties": {
          "description": "Custom metadata properties. See [/toolkit/custom-metadata](/toolkit/custom-metadata) for more information.",
          "type": "object"
        }
      },
      "required": [
        "title",
        "visibility"
      ],
      "title": "Dataset Create Request",
      "type": "object"
    },
    "DatasetHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "datasetid": {
          "type": "string"
        },
        "headline": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "project": {
          "type": "boolean",
          "default": false
        },
        "relationship": {
          "$ref": "#/definitions/ResourceRelationshipDto"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "userUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "abstract": {
          "type": "string"
        }
      }
    },
    "DatasetIdentifier": {
      "type": "object",
      "title": "Dataset or Project Identifier",
      "description": "Fully qualified unique identifier, including owner and dataset or project IDs.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of project or dataset"
        },
        "owner": {
          "type": "string",
          "description": "Name and unique identifier of account that owns the dataset or project."
        }
      },
      "required": [
        "id",
        "owner"
      ]
    },
    "DatasetPatchRequest": {
      "properties": {
        "description": {
          "description": "Short dataset description.",
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "files": {
          "description": "Updated set of files. At dataset update time, file uploads are not supported. However, this property can be used to add files from URL or update metadata related to existing files.",
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          },
          "type": "array",
          "uniqueItems": false
        },
        "license": {
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "ODC-BY",
            "CC-BY-SA",
            "CDLA-Sharing-1.0",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-NC-ND",
            "CC BY-NC-SA",
            "Other"
          ],
          "type": "string"
        },
        "summary": {
          "description": "Long-form dataset summary (Markdown supported).",
          "maxLength": 25000,
          "minLength": 0,
          "type": "string"
        },
        "tags": {
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "items": {
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*",
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "title": {
          "description": "Dataset name.",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "visibility": {
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators. `DISCOVERABLE` if the dataset can be seen by any member of data.world, but only files marked `sample` or `preview` are visible",
          "enum": [
            "OPEN",
            "DISCOVERABLE",
            "PRIVATE"
          ],
          "type": "string"
        },
        "properties": {
          "description": "Custom metadata properties. See [/toolkit/custom-metadata](/toolkit/custom-metadata) for more information.",
          "type": "object"
        }
      },
      "title": "Dataset Update Request",
      "type": "object"
    },
    "DatasetPutRequest": {
      "properties": {
        "description": {
          "description": "Short dataset description.",
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "files": {
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          },
          "type": "array",
          "uniqueItems": false
        },
        "license": {
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "ODC-BY",
            "CC-BY-SA",
            "CDLA-Sharing-1.0",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-NC-ND",
            "CC BY-NC-SA",
            "Other"
          ],
          "type": "string"
        },
        "summary": {
          "description": "Long-form dataset summary (Markdown supported).",
          "maxLength": 25000,
          "minLength": 0,
          "type": "string"
        },
        "tags": {
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "items": {
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*",
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "title": {
          "description": "Dataset name.",
          "maxLength": 60,
          "minLength": 1,
          "type": "string"
        },
        "visibility": {
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators. `DISCOVERABLE` if the dataset can be seen by any member of data.world, but only files marked `sample` or `preview` are visible",
          "enum": [
            "OPEN",
            "DISCOVERABLE",
            "PRIVATE"
          ],
          "type": "string"
        },
        "properties": {
          "description": "Custom metadata properties. See [/toolkit/custom-metadata](/toolkit/custom-metadata) for more information.",
          "type": "object"
        }
      },
      "required": [
        "title",
        "visibility"
      ],
      "title": "Dataset Replace Request",
      "type": "object"
    },
    "DatasetSummaryResponse": {
      "properties": {
        "accessLevel": {
          "description": "The level of access the authenticated user is allowed with respect to dataset: \n\n* `NONE` Not allowed any access.  \n* `READ` Allowed to know that the dataset exists, view and download data and metadata. \n* `WRITE` Allowed to update data and metadata, in addition to what READ allows. \n* `ADMIN` Allowed to delete dataset, in addition to what WRITE allows.",
          "type": "string"
        },
        "created": {
          "description": "Date and time when the dataset was created.",
          "type": "string"
        },
        "description": {
          "description": "Short dataset description.",
          "type": "string"
        },
        "dois": {
          "items": {
            "$ref": "#/definitions/Doi"
          },
          "type": "array"
        },
        "files": {
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "items": {
            "$ref": "#/definitions/FileSummaryResponse"
          },
          "type": "array",
          "uniqueItems": false
        },
        "id": {
          "description": "Unique identifier of dataset.",
          "type": "string"
        },
        "isProject": {
          "description": "Every data project on data.world comes with a default dataset linked to it. This flag indicates if the dataset is a project's default dataset. ",
          "type": "boolean"
        },
        "license": {
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "type": "string"
        },
        "owner": {
          "description": "User name and unique identifier of the creator of the dataset.",
          "type": "string"
        },
        "status": {
          "description": "Processing status of dataset.  This status can be checked periodically after changes are made to the dataset to determine the status of asynchronous processing.\n\n* `NEW`: Just created. Not yet processed.\n* `INPROGRESS`: Currently being processed.\n* `LOADED`: Successfully processed.\n* `SYSTEMERROR`: Error state due to processing failure.",
          "type": "string"
        },
        "summary": {
          "description": "Long-form dataset summary (Markdown supported).",
          "type": "string"
        },
        "tags": {
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "title": {
          "description": "Dataset name.",
          "type": "string"
        },
        "updated": {
          "description": "Date and time when the dataset was last updated.",
          "type": "string"
        },
        "version": {
          "description": "Dataset version",
          "type": "string"
        },
        "versionDois": {
          "items": {
            "$ref": "#/definitions/Doi"
          },
          "type": "array"
        },
        "visibility": {
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators. `DISCOVERABLE` if the dataset can be seen by any member of data.world, but only files marked `sample` or `preview` are visible",
          "type": "string"
        },
        "properties": {
          "description": "Custom metadata properties. See [/toolkit/custom-metadata](/toolkit/custom-metadata) for more information.",
          "type": "object"
        }
      },
      "required": [
        "owner",
        "id",
        "title",
        "visibility",
        "status",
        "created",
        "updated",
        "isProject",
        "accessLevel",
        "version"
      ],
      "title": "Dataset Summary Response",
      "type": "object"
    },
    "Doi": {
      "properties": {
        "created": {
          "description": "Data and time when this DOI was associated with the dataset or dataset version.",
          "type": "string"
        },
        "doi": {
          "description": "[Digital Object Identifier](https://www.doi.org)",
          "type": "string"
        }
      },
      "required": [
        "doi",
        "created"
      ],
      "title": "Digital Object Identifier",
      "type": "object"
    },
    "EditActivitiesResultDto": {
      "type": "object",
      "properties": {
        "activityBatchId": {
          "type": "string",
          "format": "uuid"
        },
        "timeStarted": {
          "$ref": "#/definitions/Instant"
        },
        "timeEnded": {
          "$ref": "#/definitions/Instant"
        },
        "activityResults": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EntryType": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ErrorMessage": {
      "properties": {
        "code": {
          "description": "HTTP Error Code",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "Underlying error cause.",
          "type": "string"
        },
        "message": {
          "description": "Human-readable error message.",
          "type": "string"
        }
      },
      "title": "Error Message Response",
      "type": "object"
    },
    "FileBatchUpdateRequest": {
      "properties": {
        "files": {
          "description": "Updated set of files. When updating a set of files, file uploads are not supported. However, this property can be used to add files via URL or update metadata related to existing files.",
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          },
          "type": "array"
        }
      },
      "title": "File Create or Update Batch",
      "type": "object"
    },
    "CustomDatasetOrProjectMetadataRequest": {
      "properties": {
        "properties": {
          "description": "Custom defined metadata for datasets and projects.",
          "type": "object"
        }
      }
    },
    "FileCreateOrUpdateRequest": {
      "description": "This model is utilized where sets of files can be specified to be added or updated (e.g. `PATCH:/dataset/{owner}` and `POST:/dataset/{owner}/{id}/files`).",
      "properties": {
        "description": {
          "description": "File description.",
          "maxLength": 240,
          "minLength": 1,
          "type": "string"
        },
        "labels": {
          "description": "File labels.",
          "items": {
            "enum": [
              "raw data",
              "documentation",
              "visualization",
              "clean data",
              "script",
              "report"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "description": "File name. Should include type extension always when possible. Must not include slashes.",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "^[^/]+$",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/FileSourceCreateOrUpdateRequest"
        }
      },
      "required": [
        "name"
      ],
      "title": "File Create Or Update Request",
      "type": "object"
    },
    "FileCreateRequest": {
      "description": "This model is utilized where sets of files can be specified only to be added (e.g. `POST:/dataset/{owner}`).",
      "properties": {
        "description": {
          "description": "File description.",
          "maxLength": 240,
          "minLength": 1,
          "type": "string"
        },
        "labels": {
          "description": "File labels.",
          "items": {
            "enum": [
              "raw data",
              "documentation",
              "visualization",
              "clean data",
              "script",
              "report"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "description": "File name. Should include type extension always when possible. Must not include slashes.",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "^[^/]+$",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/FileSourceCreateRequest"
        }
      },
      "required": [
        "name",
        "source"
      ],
      "title": "File Create Request",
      "type": "object"
    },
    "FileSourceCreateOrUpdateRequest": {
      "description": "This model is utilized where source URLs can be specified for files to be added or updated.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "expandArchive": {
          "default": false,
          "description": "Indicates whether compressed files should be expanded upon upload.",
          "type": "boolean"
        },
        "method": {
          "default": "GET",
          "enum": [
            "GET",
            "POST"
          ],
          "type": "string"
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "requestEntity": {
          "maxLength": 10000,
          "type": "string"
        },
        "requestHeaders": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of custom HTTP header name/value pairs to pass with the request.\n\nIf a `requestEntity` string is specified, this must contain a `Content-Type` header.\n\nAn `Authorization` header value will be converted to a `WebAuthorization` object and the credentials will be encrypted.\n\nThe total size of the url and custom headers must not exceed 4096 bytes in the HTTP request, including whitespace, colons and CRLF characters.",
          "type": "object"
        },
        "url": {
          "description": "Source URL of file. Must be an http, https, ftp, ftps or stream URL.",
          "format": "uri",
          "maxLength": 4096,
          "minLength": 1,
          "pattern": "^(https?|ftps?|stream):.*",
          "type": "string"
        }
      },
      "title": "File Source Create Or Update Request",
      "type": "object"
    },
    "FileSourceCreateRequest": {
      "description": "This model is utilized where source URLs can be specified for files only to be added.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "expandArchive": {
          "default": false,
          "description": "Indicates whether compressed files should be expanded upon upload.",
          "type": "boolean"
        },
        "method": {
          "default": "GET",
          "enum": [
            "GET",
            "POST"
          ],
          "type": "string"
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "requestEntity": {
          "maxLength": 10000,
          "type": "string"
        },
        "requestHeaders": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of custom HTTP header name/value pairs to pass with the request.\n\nIf a `requestEntity` string is specified, this must contain a `Content-Type` header.\n\nAn `Authorization` header value will be converted to a `WebAuthorization` object and the credentials will be encrypted.\n\nThe total size of the url and custom headers must not exceed 4096 bytes in the HTTP request, including whitespace, colons and CRLF characters.",
          "type": "object"
        },
        "url": {
          "description": "Source URL of file. Must be an http, https, ftp, or ftps URL.",
          "format": "uri",
          "maxLength": 4096,
          "minLength": 1,
          "pattern": "^(https?|ftps?):.*",
          "type": "string"
        }
      },
      "title": "File Create Request",
      "type": "object"
    },
    "FileSourceSummaryResponse": {
      "properties": {
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "expandArchive": {
          "default": false,
          "type": "boolean"
        },
        "lastSyncFailure": {
          "description": "Date and time when synchronization last failed.",
          "type": "string"
        },
        "lastSyncStart": {
          "description": "Date and time when synchronization last started.",
          "type": "string"
        },
        "lastSyncSuccess": {
          "description": "Date and time when synchronization last finished successfully.",
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "requestEntity": {
          "type": "string"
        },
        "requestHeaders": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of custom HTTP header name/value pairs to pass with the request.\n\nIf a `requestEntity` string is specified, this must contain a `Content-Type` header.",
          "type": "object"
        },
        "syncStatus": {
          "description": "Synchronization status of the file.  This status can be checked periodically after changes are made to the dataset to determine the status of asynchronous syncronization.\n\n* `NEW`: Just created. Not yet synchronized.\n* `INPROGRESS`: Currently being synchronized.\n* `LOADED`: Successfully synchronized.\n* `SYSTEMERROR`: Error state due to synchronization failure.",
          "type": "string"
        },
        "syncSummary": {
          "description": "Human-readable message detailing status of last failed sync.",
          "type": "string"
        },
        "url": {
          "description": "Source URL of file. Must be an http, https, or stream URL.",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "syncStatus"
      ],
      "title": "File Source Response",
      "type": "object"
    },
    "FileSummaryResponse": {
      "properties": {
        "created": {
          "description": "Date and time when file was created.",
          "type": "string"
        },
        "description": {
          "description": "File description.",
          "type": "string"
        },
        "labels": {
          "description": "File labels.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "name": {
          "description": "File name. Should include type extension always when possible. Must not include slashes.",
          "type": "string"
        },
        "sizeInBytes": {
          "format": "int64",
          "type": "integer"
        },
        "source": {
          "$ref": "#/definitions/FileSourceSummaryResponse"
        },
        "updated": {
          "description": "Date and time when file was last updated.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "created",
        "updated"
      ],
      "title": "File Summary Response",
      "type": "object"
    },
    "InsightBody": {
      "description": "Defines the body of an insight. Must contain one, and only one of: `imageUrl`, `embedUrl` or `markdownBody` (deprecated).",
      "properties": {
        "embedUrl": {
          "description": "oEmbed URL.",
          "format": "uri",
          "type": "string"
        },
        "imageUrl": {
          "description": "Image URL",
          "format": "uri",
          "type": "string"
        },
        "markdownBody": {
          "description": "Markdown (deprecated)",
          "type": "string"
        }
      },
      "title": "Insight Body",
      "type": "object"
    },
    "InsightCreateRequest": {
      "title": "Insight Create Request",
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "dataSourceLinks": {
          "description": "One or more permalinks to the data sources used to generate this insight. Allows others to access the data originally used to produce the insight.",
          "format": "uri",
          "type": "array",
          "items": {
            "format": "uri",
            "type": "string"
          }
        },
        "description": {
          "description": "Insight description.",
          "maxLength": 25000,
          "type": "string"
        },
        "sourceLink": {
          "format": "uri",
          "type": "string",
          "description": "Permalink to source code or platform this insight was generated with. Allows others to replicate the steps originally used to produce the insight."
        },
        "thumbnail": {
          "format": "uri",
          "type": "string"
        },
        "title": {
          "description": "Insight title.",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "body",
        "title"
      ]
    },
    "InsightHydrationDto": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "dataset": {
          "$ref": "#/definitions/DatasetHydrationDto"
        },
        "datasetid": {
          "type": "string"
        },
        "dataSources": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "description": {
          "type": "string"
        },
        "insightid": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string",
          "format": "uri"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "InsightPatchRequest": {
      "title": "Insight Update Request",
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "dataSourceLinks": {
          "description": "One or more permalinks to the data sources used to generate this insight. Allows others to access the data originally used to produce the insight.",
          "format": "uri",
          "type": "array",
          "items": {
            "format": "uri",
            "type": "string"
          }
        },
        "description": {
          "description": "Insight description.",
          "maxLength": 25000,
          "type": "string"
        },
        "sourceLink": {
          "format": "uri",
          "type": "string",
          "description": "Permalink to source code or platform this insight was generated with. Allows others to replicate the steps originally used to produce the insight."
        },
        "thumbnail": {
          "format": "uri",
          "type": "string"
        },
        "title": {
          "description": "Insight title.",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "InsightPutRequest": {
      "title": "Insight Replace Request",
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "dataSourceLinks": {
          "description": "One or more permalinks to the data sources used to generate this insight. Allows others to access the data originally used to produce the insight.",
          "format": "uri",
          "type": "array",
          "items": {
            "format": "uri",
            "type": "string"
          }
        },
        "description": {
          "description": "Insight description.",
          "maxLength": 25000,
          "type": "string"
        },
        "sourceLink": {
          "format": "uri",
          "type": "string",
          "description": "Permalink to source code or platform this insight was generated with. Allows others to replicate the steps originally used to produce the insight."
        },
        "thumbnail": {
          "format": "uri",
          "type": "string"
        },
        "title": {
          "description": "Insight title.",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "body",
        "title"
      ]
    },
    "InsightSummaryResponse": {
      "properties": {
        "author": {
          "description": "User name of the author of the insight.",
          "type": "string"
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "created": {
          "description": "Date and time when insight was created.",
          "type": "string"
        },
        "dataSourceLinks": {
          "description": "One or more permalinks to the data sources used to generate this insight. Allows others to access the data originally used to produce the insight.",
          "format": "uri",
          "items": {
            "format": "uri",
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Insight description.",
          "type": "string"
        },
        "id": {
          "description": "Unique Insight id.",
          "type": "string"
        },
        "sourceLink": {
          "description": "Permalink to source code or platform this insight was generated with. Allows others to replicate the steps originally used to produce the insight.",
          "format": "uri",
          "type": "string"
        },
        "thumbnail": {
          "description": "URL of insight thumbnai",
          "type": "string"
        },
        "title": {
          "description": "Insight title.",
          "type": "string"
        },
        "updated": {
          "description": "Date and time when insight was last updated.",
          "type": "string"
        },
        "version": {
          "description": "Insight version",
          "type": "string"
        }
      },
      "required": [
        "id",
        "title",
        "body",
        "author",
        "created",
        "updated",
        "version"
      ],
      "title": "Insight Summary Response",
      "type": "object"
    },
    "Instant": {
      "type": "object",
      "properties": {
        "nano": {
          "type": "integer",
          "format": "int32"
        },
        "epochSecond": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "boolean": {
          "type": "boolean",
          "default": false
        },
        "int": {
          "type": "boolean",
          "default": false
        },
        "bigDecimal": {
          "type": "boolean",
          "default": false
        },
        "bigInteger": {
          "type": "boolean",
          "default": false
        },
        "double": {
          "type": "boolean",
          "default": false
        },
        "long": {
          "type": "boolean",
          "default": false
        },
        "valueNode": {
          "type": "boolean",
          "default": false
        },
        "containerNode": {
          "type": "boolean",
          "default": false
        },
        "missingNode": {
          "type": "boolean",
          "default": false
        },
        "object": {
          "type": "boolean",
          "default": false
        },
        "pojo": {
          "type": "boolean",
          "default": false
        },
        "integralNumber": {
          "type": "boolean",
          "default": false
        },
        "floatingPointNumber": {
          "type": "boolean",
          "default": false
        },
        "short": {
          "type": "boolean",
          "default": false
        },
        "textual": {
          "type": "boolean",
          "default": false
        },
        "binary": {
          "type": "boolean",
          "default": false
        },
        "float": {
          "type": "boolean",
          "default": false
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "number": {
          "type": "boolean",
          "default": false
        },
        "array": {
          "type": "boolean",
          "default": false
        },
        "null": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "LinkedDatasetCreateOrUpdateRequest": {
      "title": "Linked Dataset Create or Update Request",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of dataset.",
          "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
          "type": "string"
        },
        "owner": {
          "description": "User name and unique identifier of the creator of the dataset.",
          "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
          "type": "string"
        }
      },
      "required": [
        "id",
        "owner"
      ]
    },
    "LinkedDatasetSummaryResponse": {
      "properties": {
        "accessLevel": {
          "description": "The level of access the authenticated user is allowed with respect to dataset: \n\n* `NONE` Not allowed any access.  \n* `READ` Allowed to know that the dataset exists, view and download data and metadata. \n* `WRITE` Allowed to update data and metadata, in addition to what READ allows. \n* `ADMIN` Allowed to delete dataset, in addition to what WRITE allows.",
          "type": "string"
        },
        "created": {
          "description": "Date and time when the dataset was created.",
          "type": "string"
        },
        "description": {
          "description": "Short dataset description.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier of dataset.",
          "type": "string"
        },
        "license": {
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "type": "string"
        },
        "owner": {
          "description": "User name and unique identifier of the creator of the dataset.",
          "type": "string"
        },
        "summary": {
          "description": "Long-form dataset summary (Markdown supported).",
          "type": "string"
        },
        "tags": {
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "title": {
          "description": "Dataset name.",
          "type": "string"
        },
        "updated": {
          "description": "Date and time when the dataset was last updated.",
          "type": "string"
        },
        "version": {
          "description": "Dataset version",
          "type": "string"
        },
        "visibility": {
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators. `DISCOVERABLE` if the dataset can be seen by any member of data.world, but only files marked `sample` or `preview` are visible",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "id",
        "title",
        "visibility",
        "created",
        "updated",
        "accessLevel"
      ],
      "title": "Linked Dataset Summary Response",
      "type": "object"
    },
    "MetadataResourceDto": {
      "type": "object",
      "required": [
        "created",
        "id",
        "owner",
        "visibility"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "table": {
          "$ref": "#/definitions/TableId"
        },
        "category": {
          "type": "string"
        },
        "typeLabel": {
          "type": "string"
        },
        "typeIri": {
          "type": "string"
        },
        "rootParentTypeLabel": {
          "type": "string"
        },
        "rootParentTypeIri": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "visibility": {
          "type": "string",
          "enum": [
            "DISCOVERABLE",
            "OPEN",
            "PRIVATE"
          ]
        },
        "url": {
          "type": "string",
          "format": "uri"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogId"
          }
        },
        "relationshipTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assetStatus": {
          "$ref": "#/definitions/AssetStatus"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "OauthTokenReference": {
      "description": "A reference to a 3rd-party OAuth 2.0 token stored by data.world.\n\nWhen creating or updating an OAuth token reference, the token must belong to the user making the update.",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "owner": {
          "description": "User name of the owner of the OAuth token within data.world.",
          "maxLength": 31,
          "minLength": 3,
          "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
          "type": "string"
        },
        "site": {
          "maxLength": 255,
          "minLength": 3,
          "pattern": "(?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?\\.)+[a-z]{2,}(?:@[a-z0-9](?:[-.](?=[a-z0-9])|[a-z0-9]){0,29})?",
          "type": "string"
        }
      },
      "required": [
        "owner",
        "site",
        "id"
      ],
      "title": "OAuth Token Reference",
      "type": "object"
    },
    "PaginatedConnectionResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectionDto"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "PaginatedDatasetResults": {
      "properties": {
        "count": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "nextPageToken": {
          "type": "string"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/DatasetSummaryResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "records"
      ],
      "title": "Paginated Dataset Results",
      "type": "object"
    },
    "PaginatedInsightResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "nextPageToken": {
          "type": "string"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/InsightSummaryResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "records"
      ],
      "title": "Paginated Insight Results",
      "type": "object"
    },
    "PaginatedMetadataResourceResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataResourceDto"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "PaginatedProjectResults": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "nextPageToken": {
          "type": "string"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/ProjectSummaryResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "records"
      ],
      "title": "Paginated Project Results",
      "type": "object"
    },
    "PaginatedQueryResults": {
      "properties": {
        "count": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "nextPageToken": {
          "type": "string"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/QuerySummaryResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "records"
      ],
      "title": "Paginated Query Results",
      "type": "object"
    },
    "PaginatedSearchResultsDto": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "records": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "next": {
          "type": "string"
        },
        "facets": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SearchFacetResult"
            }
          }
        },
        "hydrations": {
          "$ref": "#/definitions/SearchHydrations"
        }
      }
    },
    "PaginatedSubscriptionResults": {
      "type": "object",
      "title": "Paginated Subscription Results",
      "properties": {
        "count": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "nextPageToken": {
          "type": "string"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        }
      },
      "required": [
        "count",
        "records"
      ]
    },
    "ProjectCreateRequest": {
      "properties": {
        "files": {
          "description": "Initial set of files. At project creation time, file uploads are not supported. However, this property can be used to add files from URL.",
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          },
          "type": "array",
          "uniqueItems": false
        },
        "license": {
          "description": "Project license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "ODC-BY",
            "CC-BY-SA",
            "CDLA-Sharing-1.0",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-NC-ND",
            "CC BY-NC-SA",
            "Other"
          ],
          "type": "string"
        },
        "linkedDatasets": {
          "description": "Initial set of linked datasets.",
          "items": {
            "$ref": "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          },
          "type": "array"
        },
        "objective": {
          "description": "Short project objective.",
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "summary": {
          "description": "Long-form project summary (Markdown supported).",
          "maxLength": 25000,
          "minLength": 0,
          "type": "string"
        },
        "tags": {
          "description": "Project tags. Letters numbers and spaces only (max 25 characters).",
          "items": {
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*",
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "title": {
          "description": "Project title.",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "visibility": {
          "description": "Project visibility. `OPEN` if the project can be seen by any member of data.world. `PRIVATE` if the project can be seen by its owner and authorized collaborators.",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "type": "string"
        }
      },
      "required": [
        "title",
        "visibility"
      ],
      "title": "Project Create Request",
      "type": "object"
    },
    "ProjectPatchRequest": {
      "type": "object",
      "title": "Project Update Request",
      "properties": {
        "files": {
          "description": "Updated set of files. At project update time, file uploads are not supported. However, this property can be used to add files from URL or update metadata related to existing files. Files included in this request will be added. Previously added files will be preserved without modification.",
          "type": "array",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        },
        "license": {
          "description": "Project license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "ODC-BY",
            "CC-BY-SA",
            "CDLA-Sharing-1.0",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-NC-ND",
            "CC BY-NC-SA",
            "Other"
          ],
          "type": "string"
        },
        "linkedDatasets": {
          "type": "array",
          "description": "Updated set of linked datasets. Datasets linked in this request will be added. Previously linked datasets will be preserved without modification.",
          "items": {
            "$ref": "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        },
        "objective": {
          "description": "Short project objective.",
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "summary": {
          "description": "Long-form project summary (Markdown supported).",
          "maxLength": 25000,
          "minLength": 0,
          "type": "string"
        },
        "tags": {
          "description": "Project tags. Letters numbers and spaces only (max 25 characters).",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*",
            "type": "string"
          }
        },
        "title": {
          "description": "Project title.",
          "maxLength": 60,
          "minLength": 0,
          "type": "string"
        },
        "visibility": {
          "description": "Project visibility. `OPEN` if the project can be seen by any member of data.world. `PRIVATE` if the project can be seen by its owner and authorized collaborators.",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "type": "string"
        }
      }
    },
    "ProjectPutRequest": {
      "title": "Project Create or Update Request",
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        },
        "license": {
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "ODC-BY",
            "CC-BY-SA",
            "CDLA-Sharing-1.0",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-NC-ND",
            "CC BY-NC-SA",
            "Other"
          ],
          "type": "string"
        },
        "linkedDatasets": {
          "description": "Updated set of linked datasets. Datasets linked in this request will be added. Previously linked datasets will be preserved without modification.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        },
        "objective": {
          "description": "Short project objective.",
          "maxLength": 120,
          "minLength": 0,
          "type": "string"
        },
        "summary": {
          "description": "Long-form project summary (Markdown supported).",
          "maxLength": 25000,
          "minLength": 0,
          "type": "string"
        },
        "tags": {
          "description": "Project tags. Letters numbers and spaces only (max 25 characters).",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*",
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "description": "Project title.",
          "maxLength": 60,
          "minLength": 1
        },
        "visibility": {
          "type": "string",
          "description": "Project visibility. `OPEN` if the project can be seen by any member of data.world. `PRIVATE` if the project can be seen by its owner and authorized collaborators.",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        }
      },
      "required": [
        "title",
        "visibility"
      ]
    },
    "ProjectSummaryResponse": {
      "properties": {
        "accessLevel": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "files": {
          "items": {
            "$ref": "#/definitions/FileSummaryResponse"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "license": {
          "type": "string"
        },
        "linkedDatasets": {
          "items": {
            "$ref": "#/definitions/LinkedDatasetSummaryResponse"
          },
          "type": "array"
        },
        "objective": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "status": {
          "description": "Processing status of project. This status can be checked periodically after changes are made to the project to determine the status of asynchronous processing.\n\n* `NEW`: Just created. Not yet processed.\n* `INPROGRESS`: Currently being processed.\n* `LOADED`: Successfully processed.\n* `SYSTEMERROR`: Error state due to processing failure.",
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        },
        "version": {
          "description": "Project version",
          "type": "string"
        },
        "visibility": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "visibility",
        "status",
        "owner",
        "id",
        "version",
        "created",
        "updated",
        "accessLevel"
      ],
      "title": "Project Summary Response",
      "type": "object"
    },
    "QueryParameter": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Parameter type. Can be either 'literal' or 'iri'",
          "type": "string"
        },
        "datatype": {
          "description": "Parameter datatype XML schema link. Can be empty if type is 'iri'",
          "type": "string"
        }
      }
    },
    "QueryPutRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Query name",
          "type": "string"
        },
        "content": {
          "description": "The actual query text to be executed.",
          "type": "string"
        },
        "published": {
          "description": "Indicates if this query should be visible to anyone with access to its dataset or project.",
          "type": "boolean"
        }
      },
      "required": [
        "content",
        "name"
      ]
    },
    "RdfTerm": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "literal",
            "uri"
          ]
        },
        "value": {
          "type": "string"
        },
        "datatype": {
          "type": "string",
          "readOnly": true
        },
        "xml:lang": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RelationshipCreateOrDeleteRequest": {
      "type": "object",
      "required": [
        "relationshipType",
        "sourceId",
        "sourceType",
        "targetId",
        "targetType"
      ],
      "properties": {
        "relationshipType": {
          "type": "string",
          "enum": [
            "USES_DATASET",
            "REFERENCE_BUSINESS_TERM",
            "RELATED_TO_BUSINESS_TERM",
            "USES_DATA_FROM"
          ]
        },
        "sourceDatasetId": {
          "type": "string",
          "description": "If source is a table or column, populate with dataset ID that contains table."
        },
        "sourceId": {
          "type": "string"
        },
        "sourceTableId": {
          "type": "string",
          "description": "If source is a column, populate with table ID that contains column."
        },
        "sourceType": {
          "type": "string",
          "enum": [
            "CATALOG",
            "ANALYSIS",
            "BUSINESS_TERM",
            "COLUMN",
            "DATA_TYPE",
            "DATASET",
            "PROJECT",
            "TABLE"
          ]
        },
        "targetDatasetId": {
          "type": "string",
          "description": "If target is a table or column, populate with dataset ID that contains table."
        },
        "targetId": {
          "type": "string"
        },
        "targetTableId": {
          "type": "string",
          "description": "If target is a column, populate with table ID that contains column."
        },
        "targetType": {
          "type": "string",
          "enum": [
            "CATALOG",
            "ANALYSIS",
            "BUSINESS_TERM",
            "COLUMN",
            "DATA_TYPE",
            "DATASET",
            "PROJECT",
            "TABLE"
          ]
        }
      }
    },
    "RelationshipGetRequest": {
      "type": "object",
      "required": [
        "resourceType"
      ],
      "properties": {
        "byResourceTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CATALOG",
              "ANALYSIS",
              "BUSINESS_TERM",
              "COLUMN",
              "DATA_TYPE",
              "DATASET",
              "PROJECT",
              "TABLE"
            ]
          }
        },
        "byRelationTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceType": {
          "type": "string",
          "enum": [
            "CATALOG",
            "ANALYSIS",
            "BUSINESS_TERM",
            "COLUMN",
            "DATA_TYPE",
            "DATASET",
            "PROJECT",
            "TABLE"
          ]
        }
      }
    },
    "RelationshipGetTableRequest": {
      "type": "object",
      "properties": {
        "byResourceTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CATALOG",
              "ANALYSIS",
              "BUSINESS_TERM",
              "COLUMN",
              "DATA_TYPE",
              "DATASET",
              "PROJECT",
              "TABLE"
            ]
          }
        },
        "byRelationTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceRelationshipDto": {
      "type": "object",
      "properties": {
        "contributor": {
          "type": "boolean",
          "default": false
        },
        "liked": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "SavedQueryExecutionRequest": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "description": "Specifies values for named query parameters. parameters must be map-like object (key-value pairs), where keys are the names of the parameters and values what those parameters should be set to when the query is executed.",
          "additionalProperties": {
            "type": "object"
          },
          "example": {
            "p1": 1,
            "p2": 3.14,
            "p3": "val",
            "p4": true,
            "p5": {
              "value": "false",
              "type": "literal",
              "datatype": "http://www.w3.org/2001/XMLSchema#boolean"
            }
          }
        },
        "includeTableSchema": {
          "type": "boolean",
          "default": false
        },
        "maxRows": {
          "type": "long",
          "description": "Limits the number of rows returned."
        }
      }
    },
    "SearchFacetResult": {
      "type": "object",
      "properties": {
        "term": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SearchHydrations": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AgentHydrationDto"
          }
        },
        "catalogConcepts": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogConceptHydrationDto"
          }
        },
        "catalogs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogHydrationDto"
          }
        },
        "catalogAnalysis": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogAnalysisHydrationDto"
          }
        },
        "catalogBusinessTerms": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogBusinessTermHydrationDto"
          }
        },
        "catalogTables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogTableHydrationDto"
          }
        },
        "catalogColumns": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogColumnHydrationDto"
          }
        },
        "datasets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DatasetHydrationDto"
          }
        },
        "insights": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InsightHydrationDto"
          }
        }
      }
    },
    "SearchRequest": {
      "type": "object",
      "required": [
        "query"
      ],
      "properties": {
        "query": {
          "type": "string"
        },
        "category": {
          "type": "array",
          "description": "Filter by categories.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "catalogAnalysis",
              "catalogBusinessTerm",
              "catalogDataset",
              "catalogDataType",
              "catalogTable",
              "collection",
              "comment",
              "dataset",
              "datatable",
              "file",
              "insight",
              "integration",
              "project",
              "query"
            ]
          }
        },
        "resourceId": {
          "type": "array",
          "description": "Filter by resource IDs.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "array",
          "description": "Filter by type of metadata resource. Both IRI and label are accepted.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "type": "array",
          "description": "Filter by owners. Owners are identified by their IDs.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "minAccessLevel": {
          "type": "string",
          "description": "Minimum access level to filter by.",
          "enum": [
            "NONE",
            "SAML_GATED",
            "DISCOVER",
            "READ",
            "WRITE",
            "ADMIN"
          ]
        },
        "tag": {
          "type": "array",
          "description": "Filter by tags.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "visibility": {
          "type": "string",
          "description": "Filter by visibility.",
          "enum": [
            "DISCOVERABLE",
            "OPEN",
            "PRIVATE"
          ]
        },
        "createdRange": {
          "description": "Filter by range of date that the resource was created.",
          "$ref": "#/definitions/Range"
        },
        "updatedRange": {
          "description": "Filter by range of date that the resource was updated.",
          "$ref": "#/definitions/Range"
        }
      }
    },
    "SimpleSearchRequest": {
      "type": "object",
      "required": [
        "query"
      ],
      "properties": {
        "query": {
          "type": "string"
        },
        "owner": {
          "type": "array",
          "description": "Filter by owners. Owners are identified by their IDs.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "array",
          "description": "Filter by categories.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "catalogAnalysis",
              "catalogBusinessTerm",
              "catalogDataset",
              "catalogDataType",
              "catalogTable",
              "collection",
              "comment",
              "dataset",
              "datatable",
              "file",
              "insight",
              "integration",
              "project",
              "query"
            ]
          }
        },
        "includeCommunityResults": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "SingleTableMetadataSpec": {
      "description": "Virtual or extracted table details",
      "type": "object",
      "properties": {
        "database": {
          "description": "Database name",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        },
        "schema": {
          "description": "Schema name",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        },
        "table": {
          "description": "Table name",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        },
        "tableType": {
          "description": "Table type",
          "enum": [
            "VIRTUAL"
          ],
          "type": "string"
        }
      }
    },
    "SourceId": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "sourceid": {
          "type": "string"
        }
      }
    },
    "QuerySummaryResponse": {
      "properties": {
        "body": {
          "description": "Query body.",
          "type": "string"
        },
        "created": {
          "description": "Date and time when the query was created.",
          "type": "string"
        },
        "id": {
          "description": "query unique identifier",
          "type": "string"
        },
        "language": {
          "description": "Type of language in which this query is written. Can be either 'SPARQL' or 'SQL'.",
          "type": "string"
        },
        "name": {
          "description": "Query name.",
          "type": "string"
        },
        "owner": {
          "description": "User name and unique identifier of the creator of the dataset.",
          "type": "string"
        },
        "updated": {
          "description": "Date and time when the query was updated.",
          "type": "string"
        },
        "version": {
          "description": "Query version id.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters declared in the query body",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/QueryParameter"
          }
        }
      },
      "type": "object",
      "title": "Query Summary Response"
    },
    "Range": {
      "type": "object",
      "properties": {
        "endDate": {
          "type": "string",
          "description": "Inclusive. Format is YYYY-MM-DD in UTC. If inputted by itself (without startDate), it will match all dates before this date and this date."
        },
        "startDate": {
          "type": "string",
          "description": "Inclusive. Format is YYYY-MM-DD in UTC. If inputted by itself (without endDate),it will match all dates after this date and this date."
        }
      }
    },
    "SqlQueryRequest": {
      "type": "object",
      "title": "SQL Query Request",
      "properties": {
        "query": {
          "type": "string",
          "description": "SQL query text"
        },
        "includeTableSchema": {
          "type": "boolean",
          "default": false,
          "description": "Specifies whether or not schema should be included with the response."
        }
      },
      "required": [
        "query"
      ]
    },
    "SshTunnel": {
      "type": "object",
      "required": [
        "host",
        "user",
        "userKeyPair"
      ],
      "properties": {
        "host": {
          "type": "string",
          "example": "passthru.tunnel.ca",
          "description": "ssh tunnel host"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "example": "3454",
          "description": "Tunnel Port",
          "minimum": 1,
          "maximum": 65535
        },
        "user": {
          "type": "string",
          "example": "johnsmith",
          "description": "user name",
          "minLength": 0,
          "maxLength": 1024
        },
        "userKeyPair": {
          "type": "boolean",
          "example": true,
          "description": "whether authentication is required",
          "default": false
        }
      }
    },
    "StreamSchema": {
      "type": "object",
      "title": "Stream Schema",
      "properties": {
        "primaryKeyFields": {
          "type": "array",
          "description": "One or more fields that make up the primary key of a record",
          "items": {
            "type": "string"
          }
        },
        "sequenceField": {
          "type": "string",
          "description": "A numeric or datetime field by which to sort records for the purpose of deduplication\n"
        }
      }
    },
    "StreamSchemaPatchRequest": {
      "type": "object",
      "title": "Stream Schema Update Request",
      "properties": {
        "primaryKeyFields": {
          "type": "array",
          "description": "One or more fields that make up the primary key of a record",
          "items": {
            "type": "string"
          }
        },
        "sequenceField": {
          "type": "string",
          "description": "A numeric or datetime field by which to sort records for the purpose of deduplication.\n\nNumeric fields must fit in a 64-bit signed integer\ndatetime fields must use an ISO-8601 compatible format  (https://www.ietf.org/rfc/rfc3339.txt).\n"
        },
        "updateMethod": {
          "enum": [
            "TRUNCATE"
          ],
          "type": "string",
          "description": "Specifies how pre-existing records should be affected by a schema change.\n"
        }
      },
      "required": [
        "updateMethod"
      ]
    },
    "StreamsResource": {
      "type": "object"
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "dataset": {
          "$ref": "#/definitions/DatasetIdentifier"
        },
        "events": {
          "type": "array",
          "description": "Specifies which events should trigger API calls. Currently, only `ALL` is supported. Clients are free to ignore irrelevant events. For all supported events, see: https://apidocs.data.world/toolkit/webhooks",
          "items": {
            "enum": [
              "ALL"
            ],
            "type": "string"
          }
        },
        "project": {
          "$ref": "#/definitions/DatasetIdentifier"
        },
        "user": {
          "$ref": "#/definitions/UserIdentifier"
        }
      },
      "required": [
        "events"
      ]
    },
    "SubscriptionApiLinks": {
      "type": "object",
      "title": "Subscription API URI",
      "properties": {
        "self": {
          "format": "uri",
          "type": "string",
          "description": "Subscription URI, to be used in API requests relative to an existing subscription."
        }
      },
      "required": [
        "self"
      ]
    },
    "SubscriptionCreateRequest": {
      "type": "object",
      "title": "Subscription Create Request",
      "properties": {
        "events": {
          "maxItems": 50,
          "minItems": 1,
          "type": "array",
          "description": "Specifies which events should trigger API calls. Currently, only `ALL` is supported. Clients are free to ignore irrelevant events. For all supported events, see: https://apidocs.data.world/toolkit/webhooks",
          "items": {
            "enum": [
              "ALL"
            ],
            "type": "string"
          }
        }
      },
      "required": [
        "events"
      ]
    },
    "SubscriptionLinks": {
      "properties": {
        "api": {
          "$ref": "#/definitions/SubscriptionApiLinks"
        }
      },
      "required": [
        "api"
      ],
      "type": "object",
      "title": "Subscription URIs"
    },
    "SuccessMessage": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "title": "Success Message Response",
      "type": "object"
    },
    "TableBatchUpdateRequest": {
      "properties": {
        "tables": {
          "description": "Updated set of tables. Tables can be virtual or extract",
          "items": {
            "$ref": "#/definitions/TableCreateOrUpdateRequest"
          },
          "type": "array"
        }
      },
      "title": "Table Create or Update Batch",
      "type": "object"
    },
    "TableId": {
      "type": "object",
      "required": [
        "owner",
        "sourceId",
        "tableId"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "tableId": {
          "type": "string"
        }
      }
    },
    "TableCreateOrUpdateRequest": {
      "description": "This model is utilized where sets of tables can be specified to be added.",
      "properties": {
        "description": {
          "description": "Table description.",
          "maxLength": 240,
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Table name",
          "maxLength": 128,
          "minLength": 1,
          "pattern": "^[^/]+$",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/TableSourceCreateOrUpdateRequest"
        }
      },
      "required": [
        "name"
      ],
      "title": "Table Create Or Update Request",
      "type": "object"
    },
    "TableSourceCreateOrUpdateRequest": {
      "description": "This model is utilized where source URLs can be specified for files to be added or updated.",
      "properties": {
        "databaseSource": {
          "$ref": "#/definitions/DatabaseSourceReference"
        },
        "tableSpec": {
          "$ref": "#/definitions/SingleTableMetadataSpec"
        }
      },
      "title": "Table Source Create Or Update Request",
      "type": "object"
    },
    "Tag": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "minLength": 2,
          "maxLength": 25,
          "pattern": "[a-zA-Z0-9\\s]*"
        }
      }
    },
    "UserDataResponse": {
      "properties": {
        "avatarUrl": {
          "description": "URL of profile image.",
          "type": "string"
        },
        "created": {
          "description": "Date and time when account was created.",
          "type": "string"
        },
        "displayName": {
          "description": "User's name.",
          "type": "string"
        },
        "id": {
          "description": "User name and unique identifier.",
          "type": "string"
        },
        "updated": {
          "description": "Date and time when account was last updated.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "created",
        "updated"
      ],
      "title": "User Data Response",
      "type": "object"
    },
    "UserIdentifier": {
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object",
      "title": "User Identifier"
    },
    "WebAuthorization": {
      "description": "An authorization type and credentials suitable for use in an HTTP `Authorization` header.\n\nWhen used with a File Source this causes the HTTP request to include the following header:\n```\nAuthorization: <type> <credentials>\n```\nThe `credentials` field is write-only.  It is omitted by read operations.",
      "properties": {
        "credentials": {
          "description": "The confidential portion of the `Authorization` header that follows the `type` field.\n\nThis field is write-only. It is omitted by read operations.\n\nIf authorization is required, the `credentials` value must be provided whenever a File Source is created or modified. An update to a dataset that does not change the File Source may omit the `credentials` field--the update will preserve the previous value.",
          "maxLength": 1024,
          "minLength": 1,
          "pattern": "[\\x21-\\x7E \\t]*",
          "type": "string"
        },
        "type": {
          "description": "The authorization scheme.\n\nUsually this is \"Bearer\" but it could be other values like \"Token\" or \"Basic\" etc.",
          "maxLength": 50,
          "pattern": "[\\x21-\\x7E \\t]*",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "title": "Web Authorization",
      "type": "object"
    },
    "WebCredentials": {
      "description": "A username and password suitable for use with HTTP Basic authentication.\n\nWhen used with a File Source this causes the HTTP request to include the following header:\n```\nAuthorization: Basic <base64-encoding-of(user:password)>\n```\n\nThe `password` field is write-only.  It is omitted by read operations.",
      "properties": {
        "password": {
          "description": "The secret password.\n\nThis field is write-only. It is omitted by read operations.\n\nIf authorization is required, the `password` value must be provided whenever a File Source is created or modified. An update to a dataset that does not change the File Source may omit the `password` field--the update will preserve the previous value.",
          "maxLength": 1024,
          "type": "string"
        },
        "user": {
          "description": "The name of the account to login to.",
          "maxLength": 1024,
          "type": "string"
        }
      },
      "required": [
        "user"
      ],
      "title": "Web Credentials",
      "type": "object"
    }
  },
  "host": "api.data.world",
  "info": {
    "contact": {
      "email": "help@data.world",
      "name": "data.world",
      "url": "https://data.world"
    },
    "description": "# data.world in a nutshell\n\ndata.world is a productive, secure platform for modern data teamwork.\n\nWe bring together your data practitioners, subject matter experts, and other stakeholders by removing costly barriers to data discovery, comprehension, integration, and sharing. \n\nEverything your team needs to quickly understand and use data stays with it. \n\nSocial features and integrations encourage collaborators to ask and answer questions, share discoveries, and coordinate closely while still using their preferred tools.\n\nOur focus on interoperability helps you enhance your own data with data from any source, including our vast and growing library of free public datasets. \n\nSophisticated permissions, auditing features, and more make it easy to manage who views your data and what they do with it.\n\n# Conventions\n\n## Authentication\n\nAll data.world API calls require an API token. \n\nOAuth2 is the preferred and most secure method for authenticating users of your data.world applications. Visit our [oauth documentation](https://apidocs.data.world/toolkit/oauth) for additional information. Alternatively, you can obtain a token for _personal use or testing_ by navigating to your profile settings, under the Advanced tab ([https://data.world/settings/advanced](https://data.world/settings/advanced)).\n\nAuthentication must be provided in API requests via the `Authorization` header. For example, for a user whose API token is `my_api_token`, the request header should be `Authorization: Bearer my_api_token` (note the `Bearer` prefix).\n\n## Content type  \nBy default, `application/json` is the content type used in request and response bodies. Exceptions are noted in respective endpoint documentation.\n\n## HTTPS only  \nOur APIs can only be accessed via HTTPS.\n\n# Interested in building data.world apps?\n\nCheck out our [developer portal](https://apidocs.data.world) for tips on how to get started, tutorials, and to interact with the API endpoints right within your browser.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "termsOfService": "https://data.world/terms",
    "title": "data.world API",
    "version": "0.21.0",
    "x-stoplight": {
      "id": "data-world/specs/data-world"
    }
  },
  "parameters": {
    "accountId": {
      "description": "User name and unique identifier of a data.world user.\nFor example, in the URL: [https://data.world/jonloyens](https://data.world/jonloyens), jonloyens is the unique identifier of the user.",
      "in": "path",
      "name": "account",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "datasetId": {
      "description": "Dataset unique identifier.\nFor example, in the URL:[https://data.world/jonloyens/an-intro-to-dataworld-dataset](https://data.world/jonloyens/an-intro-to-dataworld-dataset), an-intro-to-dataworld-dataset is the unique identifier of the dataset.",
      "in": "path",
      "name": "id",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "datasetQueryId": {
      "description": "Dataset saved query unique identifier.",
      "in": "path",
      "name": "queryId",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9]){1,93}[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "file": {
      "description": "File name. IMPORTANT: Failing to URL-encode this path parameter may result in errors.",
      "in": "path",
      "name": "file",
      "required": true,
      "type": "string"
    },
    "formQuery": {
      "description": "Form parameter used to submit the body of a [SPARQL](https://docs.data.world/tutorials/sparql/) or [SQL](https://docs.data.world/documentation/sql/) query.",
      "in": "formData",
      "name": "query",
      "required": true,
      "type": "string"
    },
    "includeTableSchema": {
      "default": false,
      "description": "Flags indicating to include table schema in the response.",
      "in": "query",
      "name": "includeTableSchema",
      "required": false,
      "type": "boolean"
    },
    "insightId": {
      "description": "Insight unique identifier.",
      "in": "path",
      "name": "id",
      "required": true,
      "type": "string"
    },
    "insightProjectId": {
      "description": "Project unique identifier.\nFor example, in the URL: [https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs](https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs), `how-to-add-depth-to-your-data-with-the-us-census-acs` is the unique identifier of the owner.",
      "in": "path",
      "name": "projectId",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "insightProjectOwner": {
      "description": "User name and unique identifier of the creator of a project.\nFor example, in the URL: [https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs](https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs), `government` is the unique identifier of the owner.",
      "in": "path",
      "name": "projectOwner",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "limit": {
      "description": "Maximum number of items to include in a page of results.",
      "in": "query",
      "name": "limit",
      "type": "string"
    },
    "next": {
      "description": "Token from previous result page to be used when requesting a subsequent page.",
      "in": "query",
      "name": "next",
      "type": "string"
    },
    "owner": {
      "description": "User name and unique identifier of the user or organization a resource belongs to.\nFor example, in the URL: [https://data.world/jonloyens/an-intro-to-dataworld-dataset](https://data.world/jonloyens/an-intro-to-dataworld-dataset), jonloyens is the unique identifier of the owner.",
      "in": "path",
      "name": "owner",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "projectId": {
      "description": "Project unique identifier.\nFor example, in the URL:[https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs](https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs), how-to-add-depth-to-your-data-with-the-us-census-acs is the unique identifier of the project.",
      "in": "path",
      "name": "id",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "projectOwner": {
      "description": "User name and unique identifier of the creator of a project.\nFor example, in the URL: [https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs](https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs), government is the unique identifier of the owner.",
      "in": "path",
      "name": "owner",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "projectQueryId": {
      "description": "Project saved query unique identifier.",
      "in": "path",
      "name": "queryId",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9]){1,93}[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "query": {
      "description": "The body of a [SPARQL](https://docs.data.world/tutorials/sparql/) or [SQL](https://docs.data.world/documentation/sql/) query.",
      "in": "query",
      "name": "query",
      "required": true,
      "type": "string"
    },
    "queryId": {
      "description": "Query unique identifier for saved queries.",
      "in": "path",
      "name": "id",
      "pattern": "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}",
      "required": true,
      "type": "string"
    },
    "streamId": {
      "description": "Stream unique identifier as defined by the user the first time the stream was used. Only lower case letters, numbers and dashes are allowed. Maximum length of 95 characters.",
      "in": "path",
      "name": "streamId",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9]){1,93}[a-z0-9]",
      "required": true,
      "type": "string"
    },
    "versionId": {
      "description": "Version unique identifier.",
      "in": "path",
      "name": "versionId",
      "required": true,
      "type": "string"
    },
    "doi": {
      "name": "doi",
      "in": "path",
      "type": "string",
      "required": true,
      "pattern": "10.\\\\d{4,9}/[-._;()/:a-zA-Z0-9]+",
      "description": "DOI ([Digital Object Identifier](https://www.doi.org/))"
    },
    "id": {
      "name": "id",
      "in": "path",
      "type": "string",
      "description": "Unique identifier for the resource as displayed in the resource URL on data.world",
      "required": true
    }
  },
  "paths": {
    "/connections/{owner}": {
      "get": {
        "tags": [
          "connections"
        ],
        "summary": "Get connections by owner.",
        "description": "Get a list of configured virtual connections by owner. For increased security, connection endpoints require an Enterprise Admin Token. This token can be found under [Advanced Settings](https://data.world/settings/advanced). ",
        "operationId": "getConnectionsByOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved connections",
            "schema": {
              "$ref": "#/definitions/PaginatedConnectionResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_enterprise_admin"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "connections"
        ],
        "summary": "Create a new connection.",
        "description": "Create a new virtual connection. For increased security, connection endpoints require an Enterprise Admin Token. This token can be found under [Advanced Settings](https://data.world/settings/advanced). ",
        "operationId": "createConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectionDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Connection created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_enterprise_admin"
            ]
          }
        ]
      }
    },
    "/connections/{owner}/{id}": {
      "get": {
        "tags": [
          "connections"
        ],
        "summary": "Get an individual connection",
        "description": "Get details for an individual virtual connection. For increased security, connection endpoints require an Enterprise Admin Token. This token can be found under [Advanced Settings](https://data.world/settings/advanced). ",
        "operationId": "getConnection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_enterprise_admin"
            ]
          }
        ],
        "x-private": true
      },
      "delete": {
        "tags": [
          "connections"
        ],
        "summary": "Delete a Connection.",
        "description": "Delete a Connection. For increased security, connection endpoints require an Enterprise Admin Token. This token can be found under [Advanced Settings](https://data.world/settings/advanced). ",
        "operationId": "deleteConnection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_enterprise_admin"
            ]
          }
        ]
      }
    },
    "/datasets/search": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Search for datasets",
        "description": "Simple Dataset Search. Available for single tenant only.",
        "operationId": "search",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved dataset",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ],
        "x-private": true
      }
    },
    "/datasets/{owner}": {
      "get": {
        "description": "List datasets that the currently authenticated user has access to, for the specified owner; when the dataset is open, private (but discoverable by the authenticated user) or the authenticated user is a contributor with discover visibility",
        "operationId": "getDatasetsByOwner",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List datasets for a specified owner",
        "tags": [
          "datasets"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new dataset.",
        "operationId": "createDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetCreateRequest"
            },
            "x-examples": {
              "Normal example": {
                "title": "data.world basketball team",
                "description": "Fake data.world basketball team players and stats",
                "summary": "This dataset involves some fake information about the totally fake data.world intramural basketball team.",
                "tags": [
                  "sports",
                  "datadotworld",
                  "basketball"
                ],
                "license": "PDDL",
                "visibility": "OPEN",
                "files": [
                  {
                    "name": "DataDotWorldBBallTeam.csv",
                    "source": {
                      "url": "https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv"
                    },
                    "description": "Stats about about our purely fictitious basketball team",
                    "labels": [
                      "raw data",
                      "clean data"
                    ]
                  }
                ]
              },
              "Example with custom metadata": {
                "title": "data.world basketball team",
                "description": "Fake data.world basketball team players and stats",
                "summary": "This dataset involves some fake information about the totally fake data.world intramural basketball team.",
                "tags": [
                  "sports",
                  "datadotworld",
                  "basketball"
                ],
                "properties": {
                  "dataCollectionMechanism": "Python script from sports data aggregator API",
                  "dataCollectionLanguages": [
                    "python",
                    "julia",
                    "javascript"
                  ]
                },
                "license": "PDDL",
                "visibility": "OPEN",
                "files": [
                  {
                    "name": "DataDotWorldBBallTeam.csv",
                    "source": {
                      "url": "https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv"
                    },
                    "description": "Stats about about our purely fictitious basketball team",
                    "labels": [
                      "raw data",
                      "clean data"
                    ]
                  }
                ]
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CreateDatasetResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "**CONFLICT**\nThe request could not be completed due to a conflict with the current state of the resource.\nFor example, this may occur for a short period of time after deleting a dataset with the same datasetId as the dataset being created.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create a dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{owner}/{id}": {
      "delete": {
        "description": "Delete a dataset and associated data. This operation cannot be undone, but you may recreate the dataset using the same id.",
        "operationId": "deleteDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully deleted.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_admin"
            ]
          }
        ],
        "summary": "Delete a dataset",
        "tags": [
          "datasets"
        ]
      },
      "get": {
        "description": "Retrieve a dataset. The definition of the dataset will be returned, not its data. Use `GET:/download/{owner}/{id}` or `GET:/file_download/{owner}/{id}/{file}` to retrieve the original files content, or `POST:/sql/{owner}/{id}` or `POST:/sparql/{owner}/{id}` to query the data.",
        "operationId": "getDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "Normal example": {
                "accessLevel": "READ",
                "created": "2017-02-01T22:33:58.809Z",
                "description": "TrumpWorld Data",
                "files": [
                  {
                    "created": "2017-02-01T23:45:12.379Z",
                    "name": "org-org-connections.csv",
                    "sizeInBytes": 97658,
                    "source": {
                      "id": "bfbac3bb-9cec-410a-9ac4-c904a56d65fe",
                      "lastSyncFailure": "2017-02-01T23:47:47.667Z",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.258Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/org-org-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  },
                  {
                    "created": "2017-02-01T23:51:02.777Z",
                    "name": "person-org-connections.csv",
                    "sizeInBytes": 231637,
                    "source": {
                      "id": "91cf66e3-4bd7-422f-a8ec-7de1b68f8ee1",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.310Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-org-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  },
                  {
                    "created": "2017-02-01T23:51:32.492Z",
                    "name": "person-person-connections.csv",
                    "sizeInBytes": 32556,
                    "source": {
                      "id": "b1e0659b-c282-408a-893a-14b5e5a1ae4c",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.361Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-person-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  }
                ],
                "id": "trumpworld",
                "isProject": false,
                "owner": "sya",
                "status": "LOADED",
                "summary": "From the Buzzfeed article [Help Us Map TrumpWorld](https://www.buzzfeed.com/johntemplon/help-us-map-trumpworld)\n>No American president has taken office with a giant network of businesses, investments, and corporate connections like that amassed by Donald J. Trump. His family and advisers have touched a staggering number of ventures, from a hotel in Azerbaijan to a poker company in Las Vegas.\n\n\nCheck out the data.world docs on how to Upload & sync files from [**Google Sheets**](https://docs.data.world/documentation/api/googleSync.html) and [**Github**](https://docs.data.world/documentation/api/githubSync.html)   \n\n\nSource: [github.com/BuzzFeedNews](https://github.com/BuzzFeedNews/trumpworld/tree/master/data)   \n\n_If you have suggestions for expanding or improving the dataset, please email trump@buzzfeed.com. If you’d like to send your tip securely and anonymously, see these [instructions](https://tips.buzzfeed.com/)._",
                "tags": [
                  "trump",
                  "trump world",
                  "president",
                  "connections",
                  "swamp",
                  "business network"
                ],
                "title": "TrumpWorld",
                "updated": "2017-02-06T22:55:19.128Z",
                "version": "versionId",
                "visibility": "OPEN"
              },
              "Example with catalog metadata": {
                "accessLevel": "READ",
                "created": "2017-02-01T22:33:58.809Z",
                "description": "TrumpWorld Data",
                "properties": {
                  "dataCollectionMechanism": "Python script from social media API",
                  "dataCollectionLanguages": [
                    "python",
                    "r",
                    "java"
                  ]
                },
                "files": [
                  {
                    "created": "2017-02-01T23:45:12.379Z",
                    "name": "org-org-connections.csv",
                    "sizeInBytes": 97658,
                    "source": {
                      "id": "bfbac3bb-9cec-410a-9ac4-c904a56d65fe",
                      "lastSyncFailure": "2017-02-01T23:47:47.667Z",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.258Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/org-org-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  },
                  {
                    "created": "2017-02-01T23:51:02.777Z",
                    "name": "person-org-connections.csv",
                    "sizeInBytes": 231637,
                    "source": {
                      "id": "91cf66e3-4bd7-422f-a8ec-7de1b68f8ee1",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.310Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-org-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  },
                  {
                    "created": "2017-02-01T23:51:32.492Z",
                    "name": "person-person-connections.csv",
                    "sizeInBytes": 32556,
                    "source": {
                      "id": "b1e0659b-c282-408a-893a-14b5e5a1ae4c",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.361Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-person-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  }
                ],
                "id": "trumpworld",
                "isProject": false,
                "owner": "sya",
                "status": "LOADED",
                "summary": "From the Buzzfeed article [Help Us Map TrumpWorld](https://www.buzzfeed.com/johntemplon/help-us-map-trumpworld)\n>No American president has taken office with a giant network of businesses, investments, and corporate connections like that amassed by Donald J. Trump. His family and advisers have touched a staggering number of ventures, from a hotel in Azerbaijan to a poker company in Las Vegas.\n\n\nCheck out the data.world docs on how to Upload & sync files from [**Google Sheets**](https://docs.data.world/documentation/api/googleSync.html) and [**Github**](https://docs.data.world/documentation/api/githubSync.html)   \n\n\nSource: [github.com/BuzzFeedNews](https://github.com/BuzzFeedNews/trumpworld/tree/master/data)   \n\n_If you have suggestions for expanding or improving the dataset, please email trump@buzzfeed.com. If you’d like to send your tip securely and anonymously, see these [instructions](https://tips.buzzfeed.com/)._",
                "tags": [
                  "trump",
                  "trump world",
                  "president",
                  "connections",
                  "swamp",
                  "business network"
                ],
                "title": "TrumpWorld",
                "updated": "2017-02-06T22:55:19.128Z",
                "version": "versionId",
                "visibility": "OPEN"
              }
            },
            "schema": {
              "$ref": "#/definitions/DatasetSummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve a dataset",
        "tags": [
          "datasets"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing dataset. Only elements or files included in the request will be updated. All omitted elements or files will remain untouched.",
        "operationId": "patchDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetPatchRequest"
            },
            "x-examples": {
              "Normal example": {
                "description": "2017 data.world basketball program",
                "summary": "Fake data.world basketball team players and stats. Includes 2016 and 2017 team",
                "tags": [
                  "basketball"
                ],
                "files": [
                  {
                    "name": "DataDotWorld2017BBallTeam.csv",
                    "source": {
                      "url": "https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv"
                    },
                    "description": "Purely fictitious performance data on our purely fictitious data.world basketball team.",
                    "labels": [
                      "raw data",
                      "clean data"
                    ]
                  }
                ]
              },
              "Example with custom metadata": {
                "description": "2017 data.world basketball program",
                "summary": "Fake data.world basketball team players and stats. Includes 2016 and 2017 team",
                "properties": {
                  "dataCollectionMechanism": "Python script from sports data aggregator API",
                  "dataCollectionLanguages": [
                    "python",
                    "julia"
                  ]
                },
                "tags": [
                  "basketball"
                ],
                "files": [
                  {
                    "name": "DataDotWorld2017BBallTeam.csv",
                    "source": {
                      "url": "https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv"
                    },
                    "description": "Purely fictitious performance data on our purely fictitious data.world basketball team.",
                    "labels": [
                      "raw data",
                      "clean data"
                    ]
                  }
                ]
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset successfully updated.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Update a dataset",
        "tags": [
          "datasets"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Create or replace a dataset with a given id. If a dataset exists with the same id, this call will reset such dataset and all the data contained in it.",
        "operationId": "replaceDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetPutRequest"
            },
            "x-examples": {
              "Normal example": {
                "description": "2017 data.world basketball program",
                "summary": "Fake data.world basketball team players and stats. Includes 2016 and 2017 team",
                "tags": [
                  "basketball"
                ],
                "visibility": "OPEN",
                "files": [
                  {
                    "name": "DataDotWorld2017BBallTeam.csv",
                    "source": {
                      "url": "https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv"
                    },
                    "description": "Purely fictitious performance data on our purely fictitious data.world basketball team.",
                    "labels": [
                      "raw data",
                      "clean data"
                    ]
                  }
                ]
              },
              "Example with custom metadata": {
                "description": "2017 data.world basketball program",
                "summary": "Fake data.world basketball team players and stats. Includes 2016 and 2017 team",
                "properties": {
                  "dataCollectionMechanism": "Python script from sports data aggregator API",
                  "dataCollectionLanguages": [
                    "python",
                    "julia"
                  ]
                },
                "tags": [
                  "basketball"
                ],
                "visibility": "OPEN",
                "files": [
                  {
                    "name": "DataDotWorld2017BBallTeam.csv",
                    "source": {
                      "url": "https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv"
                    },
                    "description": "Purely fictitious performance data on our purely fictitious data.world basketball team.",
                    "labels": [
                      "raw data",
                      "clean data"
                    ]
                  }
                ]
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully replaced.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create / Replace a dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/datasets/{owner}/{id}/dois/{doi}": {
      "delete": {
        "description": "Delete a DOI ([Digital Object Identifier](https://www.doi.org/)) associated with a dataset.",
        "operationId": "deleteDoi",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/doi"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "DOI successfully removed from dataset."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Delete dataset DOI",
        "tags": [
          "DOIs"
        ]
      },
      "put": {
        "description": "Associate a DOI ([Digital Object Identifier](https://www.doi.org/)) with a dataset.",
        "operationId": "addDoi",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/doi"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "DOI successfully added to dataset."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create dataset DOI",
        "tags": [
          "DOIs"
        ]
      }
    },
    "/datasets/{owner}/{id}/files": {
      "delete": {
        "description": "Delete one or more files from a dataset.   \n\n**Batching**  \nNote that the `name` parameter can be include multiple times in the query string, once for each file that is to be deleted together in a single request.",
        "operationId": "deleteFilesAndSyncSources",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "collectionFormat": "multi",
            "description": "Names of files to be deleted. Multiple can be provided in a single request by repeating the query string parameter name as many times as necessary.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "name",
            "required": true,
            "type": "array",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset files have been successfully deleted.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Delete files",
        "tags": [
          "files"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add files from URLs to a dataset. This method allows files published on the web to be added to a data.world dataset via their URL. This method can also be used to retrieve data via web APIs, with advanced options for http method, request payload and authentication.\n\nThe source URL will be stored so you can easily update your file anytime it changes via the *fetch latest* link on the [data.world](https://data.world/) dataset page or by triggering the `GET:/sync` endpoint.  ",
        "operationId": "addFilesBySource",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileBatchUpdateRequest"
            },
            "x-examples": {
              "application/json": "{\n  \"files\": [\n    {\n      \"name\": \"DataDotWorldBBallTeam.csv\",\n      \"source\": {\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\n      },\n      \"description\": \"Purely fictitious performance data on our purely fictitious data.world basketball team.\",\n      \"labels\": [\n        \"raw data\",\n        \"clean data\"\n      ]\n    },\n    {\n      \"name\": \"DataDotWorldBBallStats.csv\",\n      \"source\": {\n        \"url\": \"https://raw.githubusercontent.com/rebeccaclay/test-repo/master/DataDotWorldBBallStats.csv\"\n      },\n      \"description\": \"Stats about about our purely fictitious basketball team\",\n      \"labels\": [\n        \"raw data\",\n        \"clean data\"\n      ]\n    }\n  ]\n}"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully updated with new sources. Sync in progress.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Add files from URLs",
        "tags": [
          "files"
        ]
      }
    },
    "/datasets/{owner}/{id}/files/{file}": {
      "delete": {
        "description": "Delete a single file from a dataset.",
        "operationId": "deleteFileAndSyncSource",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset file has been successfully deleted.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Delete a file",
        "tags": [
          "files"
        ]
      }
    },
    "/datasets/{owner}/{id}/queries": {
      "get": {
        "description": "List saved queries associated with a dataset. Query definitions will be returned, not the query results. To retrieve query results use `GET:/queries/{id}/results`.",
        "operationId": "getDatasetQueries",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "count": 1,
                "records": [
                  {
                    "body": "DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000",
                    "created": "2018-03-30T02:30:54.751Z",
                    "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                    "language": "SQL",
                    "name": "queryname",
                    "owner": "username",
                    "updated": "2018-03-30T02:30:54.742Z",
                    "version": "9d634c59-ed52-4c62-b8ca-242dedcb39fa",
                    "parameters": {
                      "metric": {
                        "type": "literal",
                        "datatype": "<http://www.w3.org/2001/XMLSchema#boolean>"
                      }
                    }
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/PaginatedQueryResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List saved queries",
        "tags": [
          "queries"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a saved query in a specified dataset.",
        "operationId": "createDatasetSavedQuery",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateQueryRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"name\": \"sample saved query\",\r\n  \"content\": \"DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000\",\r\n  \"type\": \"SQL\",\r\n \"published\": \"false\" }"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "body": "DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000",
                "created": "2018-03-30T02:30:54.751Z",
                "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                "language": "SQL",
                "name": "queryname",
                "owner": "username",
                "updated": "2018-03-30T02:30:54.742Z",
                "version": "9d634c59-ed52-4c62-b8ca-242dedcb39fa"
              }
            },
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create a saved query in a specified dataset.",
        "tags": [
          "queries"
        ]
      }
    },
    "/datasets/{owner}/{id}/queries/{queryId}": {
      "delete": {
        "description": "Delete a saved query in a specified dataset.",
        "operationId": "deleteDatasetSavedQuery",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/datasetQueryId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"query deleted.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Delete a saved query in a specified dataset.",
        "tags": [
          "queries"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a saved query in a specified dataset.",
        "operationId": "updateDatasetSavedQuery",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/datasetQueryId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryPutRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"name\": \"sample saved query\",\r\n  \"content\": \"DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000\",\r\n \"published\": \"false\" }"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "body": "DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000",
                "created": "2018-03-30T02:30:54.751Z",
                "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                "language": "SQL",
                "name": "queryname",
                "owner": "username",
                "updated": "2018-03-30T02:30:54.742Z",
                "version": "9d634c59-ed52-4c62-b8ca-242dedcb39fa"
              }
            },
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Update a saved query in a specified dataset.",
        "tags": [
          "queries"
        ]
      }
    },
    "/datasets/{owner}/{id}/sync": {
      "get": {
        "description": "Same as `POST:/dataset/{owner}/{id}/sync`.",
        "operationId": "syncViaGet",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"Sync started.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "429": {
            "description": "**TOO MANY REQUESTS**\nIndicates the user has sent too many requests in a given amount of time (\"rate limiting\").\nA `Retry-After` header will be included to this response indicating how long to wait (in seconds) before making a new request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Sync files (via GET)",
        "tags": [
          "files"
        ]
      },
      "post": {
        "description": "Sync files within a dataset. This method will process the latest data available for files added from URLs or via streams.",
        "operationId": "sync",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"Sync started.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "429": {
            "description": "**TOO MANY REQUESTS**\nIndicates the user has sent too many requests in a given amount of time (\"rate limiting\").\nA `Retry-After` header will be included to this response indicating how long to wait (in seconds) before making a new request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Sync files",
        "tags": [
          "files"
        ]
      }
    },
    "/datasets/{owner}/{id}/tables": {
      "post": {
        "tags": [
          "tables"
        ],
        "summary": "Add live tables from a virtual connection",
        "description": "Add tables from an established virtual connection. For increased security, endpoints that interact with external connection sources require an Enterprise Admin Token. This token can be found under [Advanced Settings](https://data.world/settings/advanced). To learn more about the virtual connections data.world supports, please visit our [help portal](https://help.data.world/hc/en-us/sections/360009504254-Create-and-manage-virtual-connections).",
        "operationId": "createNewTables",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableBatchUpdateRequest"
            },
            "x-examples": {
              "Live/Virtual Table": {
                "tables": [
                  {
                    "name": "cust_extract",
                    "description": "Dummy customer extract table",
                    "source": {
                      "databaseSource": {
                        "owner": "user8888",
                        "id": "1f54da2f-2e07-40c2-9241-7dde9c418f1f"
                      },
                      "tableSpec": {
                        "database": "SNOWFLAKE_SAMPLE_DATA",
                        "schema": "TPCH_SF1",
                        "table": "LINEITEM",
                        "tableType": "VIRTUAL"
                      }
                    }
                  }
                ]
              },
              "Extract based Table": {
                "tables": [
                  {
                    "name": "cust_extract",
                    "description": "Dummy customer extract table",
                    "source": {
                      "databaseSource": {
                        "owner": "user8888",
                        "id": "1f54da2f-2e07-40c2-9241-7dde9c418f1f"
                      },
                      "tableSpec": {
                        "database": "SNOWFLAKE_SAMPLE_DATA",
                        "schema": "TPCH_SF1",
                        "table": "LINEITEM",
                        "tableType": "EXTRACT"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table created successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_enterprise_admin"
            ]
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/v/{versionId}": {
      "get": {
        "description": "Retrieve a version of a dataset. The definition of the dataset will be returned, not its data.",
        "operationId": "getDatasetByVersion",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/versionId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "accessLevel": "READ",
                "created": "2017-02-01T22:33:58.809Z",
                "description": "TrumpWorld Data",
                "files": [
                  {
                    "created": "2017-02-01T23:45:12.379Z",
                    "name": "org-org-connections.csv",
                    "sizeInBytes": 97658,
                    "source": {
                      "id": "bfbac3bb-9cec-410a-9ac4-c904a56d65fe",
                      "lastSyncFailure": "2017-02-01T23:47:47.667Z",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.258Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/org-org-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  },
                  {
                    "created": "2017-02-01T23:51:02.777Z",
                    "name": "person-org-connections.csv",
                    "sizeInBytes": 231637,
                    "source": {
                      "id": "91cf66e3-4bd7-422f-a8ec-7de1b68f8ee1",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.310Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-org-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  },
                  {
                    "created": "2017-02-01T23:51:32.492Z",
                    "name": "person-person-connections.csv",
                    "sizeInBytes": 32556,
                    "source": {
                      "id": "b1e0659b-c282-408a-893a-14b5e5a1ae4c",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.361Z",
                      "syncStatus": "OK",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-person-connections.csv"
                    },
                    "updated": "2017-02-03T16:05:03.241Z"
                  }
                ],
                "id": "trumpworld",
                "isProject": false,
                "owner": "sya",
                "status": "LOADED",
                "summary": "From the Buzzfeed article [Help Us Map TrumpWorld](https://www.buzzfeed.com/johntemplon/help-us-map-trumpworld)\n>No American president has taken office with a giant network of businesses, investments, and corporate connections like that amassed by Donald J. Trump. His family and advisers have touched a staggering number of ventures, from a hotel in Azerbaijan to a poker company in Las Vegas.\n\n\nCheck out the data.world docs on how to Upload & sync files from [**Google Sheets**](https://docs.data.world/documentation/api/googleSync.html) and [**Github**](https://docs.data.world/documentation/api/githubSync.html)   \n\n\nSource: [github.com/BuzzFeedNews](https://github.com/BuzzFeedNews/trumpworld/tree/master/data)   \n\n_If you have suggestions for expanding or improving the dataset, please email trump@buzzfeed.com. If you’d like to send your tip securely and anonymously, see these [instructions](https://tips.buzzfeed.com/)._",
                "tags": [
                  "trump",
                  "trump world",
                  "president",
                  "connections",
                  "swamp",
                  "business network"
                ],
                "title": "TrumpWorld",
                "updated": "2017-02-06T22:55:19.128Z",
                "version": "versionId",
                "visibility": "OPEN"
              }
            },
            "schema": {
              "$ref": "#/definitions/DatasetSummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve a dataset version",
        "tags": [
          "datasets"
        ]
      }
    },
    "/properties/{owner}": {
      "get": {
        "tags": [
          "metadata/properties"
        ],
        "summary": "Get supported metadata properties by owner",
        "description": "Get supported metadata properties by owner.\n\nThis endpoint can be used to obtain a reference list of supported custom metadata properties for your organization's catalog. Custom properties for resources in your catalog require an ApiBinding to be configured for use in the public API. For more information about how to correctly configure ApiBindings, please reach out to your data.world support representative or message help@data.world.",
        "operationId": "getPropertiesByOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User or organization id that owns the catalog you would like to get properties for."
          },
          {
            "name": "categorylabel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Resource category filter. example: “Business Term” or \"Report\""
          },
          {
            "name": "typelabel",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Custom resource type. filter example: “PowerBI Dashboard”"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved properties",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "examples": {
              "application/json": [
                {
                  "categoryLabel": "Report",
                  "label": "Experts",
                  "multivalued": false
                },
                {
                  "categoryLabel": "Report",
                  "label": "Impact Potential",
                  "multivalued": false
                }
              ]
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/v/{versionId}/dois/{doi}": {
      "delete": {
        "description": "Delete a DOI ([Digital Object Identifier](https://www.doi.org/)) associated with a version of a dataset.",
        "operationId": "deleteVersionDoi",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/versionId"
          },
          {
            "$ref": "#/parameters/doi"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "DOI successfully removed from dataset version."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Delete dataset version DOI",
        "tags": [
          "DOIs"
        ]
      },
      "put": {
        "description": "Associate a DOI ([Digital Object Identifier](https://www.doi.org/)) with a version of a dataset.",
        "operationId": "addVersionDoi",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/versionId"
          },
          {
            "$ref": "#/parameters/doi"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "DOI successfully added to dataset version."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create dataset version DOI",
        "tags": [
          "DOIs"
        ]
      }
    },
    "/download/{owner}/{id}": {
      "get": {
        "description": "Download a .zip file containing all files within a dataset as originally uploaded. Prefer `POST:/sql` or `POST:/sparql` for retrieving clean and structured data.",
        "operationId": "downloadDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "produces": [
          "application/zip"
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Download a dataset",
        "tags": [
          "datasets"
        ]
      }
    },
    "/file_download/{owner}/{id}/{file}": {
      "get": {
        "description": "Download a file within the dataset as originally uploaded. Prefer `POST:/sql` or `POST:/sparql` for retrieving clean and structured data.",
        "operationId": "downloadFile",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/file"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Download a file",
        "tags": [
          "files"
        ]
      }
    },
    "/insights/{projectOwner}/{projectId}": {
      "get": {
        "description": "List insights associated with a project.",
        "operationId": "getInsightsForProject",
        "parameters": [
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "count": 1,
                "records": [
                  {
                    "author": "someuser",
                    "body": {
                      "imageUrl": "https://example.com/image.png"
                    },
                    "created": "2018-03-30T02:30:54.742Z",
                    "dataSourceLinks": [
                      "https://data.world/jonloyens/intermediate-data-world/workspace/query?queryid=23e7f574-3020-4683-bc89-123e12cf039e"
                    ],
                    "description": "This is an example of an insight.",
                    "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                    "sourceLink": "https://example.com/dashboard",
                    "thumbnail": "https://example.com/thumbnail.png",
                    "title": "My insight",
                    "updated": "2018-03-30T02:30:54.742Z"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/PaginatedInsightResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List insights",
        "tags": [
          "insights"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new insight.",
        "operationId": "createInsight",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InsightCreateRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"title\": \"My insight\",\r\n  \"description\": \"This is an example of an insight.\",\r\n  \"body\": {\r\n    \"imageUrl\": \"https://example.com/image.png\"\r\n  },\r\n  \"sourceLink\": \"https://example.com/dashboard\",\r\n  \"dataSourceLinks\": [\r\n    \"https://data.world/jonloyens/intermediate-data-world/workspace/query?queryid=23e7f574-3020-4683-bc89-123e12cf039e\"\r\n  ]\r\n}"
            }
          },
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Insight created successfully.",
                "uri": "https://data.world/owner/project/insights/d529a67d-a27a-4f88-86f0-c8c3003afed9"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateInsightResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create an insight",
        "tags": [
          "insights"
        ]
      }
    },
    "/insights/{projectOwner}/{projectId}/{id}": {
      "delete": {
        "description": "Delete an insight.",
        "operationId": "deleteInsight",
        "parameters": [
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Insight has been successfully deleted."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Delete an insight",
        "tags": [
          "insights"
        ]
      },
      "get": {
        "description": "Retrieve an insight.",
        "operationId": "getInsight",
        "parameters": [
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "author": "someuser",
                "body": {
                  "imageUrl": "https://example.com/image.png"
                },
                "created": "2018-03-30T02:30:54.742Z",
                "dataSourceLinks": [
                  "https://data.world/jonloyens/intermediate-data-world/workspace/query?queryid=23e7f574-3020-4683-bc89-123e12cf039e"
                ],
                "description": "This is an example of an insight.",
                "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                "sourceLink": "https://example.com/dashboard",
                "thumbnail": "https://example.com/thumbnail.png",
                "title": "My insight",
                "updated": "2018-03-30T02:30:54.742Z",
                "version": "versionId"
              }
            },
            "schema": {
              "$ref": "#/definitions/InsightSummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve an insight",
        "tags": [
          "insights"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an insight. Note that only elements included in the request will be updated. All omitted elements will remain untouched.",
        "operationId": "updateInsight",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InsightPatchRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"title\": \"A better title for my insight\"\r\n}"
            }
          },
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Insight updated successfully."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Update an insight",
        "tags": [
          "insights"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Replace an insight.",
        "operationId": "replaceInsight",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InsightPutRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"title\": \"My insight\",\r\n  \"description\": \"This is an example of an insight.\",\r\n  \"body\": {\r\n    \"imageUrl\": \"https://example.com/image.png\"\r\n  },\r\n  \"sourceLink\": \"https://example.com/dashboard\",\r\n  \"dataSourceLinks\": [\r\n    \"https://data.world/jonloyens/intermediate-data-world/workspace/query?queryid=23e7f574-3020-4683-bc89-123e12cf039e\"\r\n  ]\r\n}"
            }
          },
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Insight replaced successfully."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Replace an insight",
        "tags": [
          "insights"
        ]
      }
    },
    "/insights/{projectOwner}/{projectId}/{id}/v/{versionId}": {
      "get": {
        "description": "Retrieve an insight version.",
        "operationId": "getInsightByVersion",
        "parameters": [
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          },
          {
            "$ref": "#/parameters/versionId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "author": "someuser",
                "body": {
                  "imageUrl": "https://example.com/image.png"
                },
                "created": "2018-03-30T02:30:54.742Z",
                "dataSourceLinks": [
                  "https://data.world/jonloyens/intermediate-data-world/workspace/query?queryid=23e7f574-3020-4683-bc89-123e12cf039e"
                ],
                "description": "This is an example of an insight.",
                "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                "sourceLink": "https://example.com/dashboard",
                "thumbnail": "https://example.com/thumbnail.png",
                "title": "My insight",
                "updated": "2018-03-30T02:30:54.742Z",
                "version": "versionId"
              }
            },
            "schema": {
              "$ref": "#/definitions/InsightSummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve an insight version",
        "tags": [
          "insights"
        ]
      }
    },
    "/metadata/data/sources/{owner}": {
      "get": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Get datasources by owner.",
        "description": "Get datasources by owner.",
        "operationId": "getDatabases",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved datasource metadata",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}": {
      "get": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Get an individual datasource metadata",
        "description": "Get an individual datasource metadata",
        "operationId": "getDatabase",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DatabaseDbo"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}/tables": {
      "get": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Get tables for a data source",
        "description": "Get tables for a data source",
        "operationId": "getTables",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "typelabel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeiri",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tables metadata",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Create a new table metadata",
        "description": "Create a new table metadata.",
        "operationId": "createCatalogTable",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table Metadata created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}": {
      "get": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Get an individual table metadata",
        "description": "Get an individual table metadata",
        "operationId": "getTable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetadataResourceDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Replace an existing table",
        "description": "Replace an existing table",
        "operationId": "replaceCatalogTable",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Delete a table",
        "description": "Delete a table.",
        "operationId": "deleteCatalogTable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Table has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Update an existing table",
        "description": "Update an existing table.",
        "operationId": "patchCatalogTable",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogTableRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns": {
      "get": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Get columns for a given table",
        "description": "Get columns for a given table",
        "operationId": "getTableColumns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata analysis",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Create a Column",
        "description": "Create a Column.",
        "operationId": "createCatalogColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogColumnRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Column Metadata created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}": {
      "get": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Get an individual column metadata",
        "description": "Get an individual column metadata",
        "operationId": "getTableColumn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "columnid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetadataResourceDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Replace an existing column",
        "description": "Replace an existing column",
        "operationId": "replaceCatalogColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "columnid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogColumnRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Column replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Delete a Column",
        "description": "Delete a Column.",
        "operationId": "deleteCatalogColumn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "columnid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Column has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "metadata/data"
        ],
        "summary": "Update an existing Column",
        "description": "Update an existing Column.",
        "operationId": "patchCatalogColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "id of the user or organization",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceid",
            "in": "path",
            "description": "database source id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "columnid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogColumnRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Column updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      }
    },
    "/metadata/analysis/{owner}": {
      "get": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "List analysis resources by owner",
        "description": "List analysis resources by owner",
        "operationId": "getMetadataAnalysisByOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "typelabel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeiri",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/owner"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata analysis",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Create a new analysis resource",
        "description": "Create a new analysis resource",
        "operationId": "createCatalogAnalysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogAnalysisRequest"
            },
            "x-examples": {
              "Minimal data": {
                "title": "Predictive Analysis",
                "catalogs": [
                  "crypto_snowflake"
                ]
              },
              "Standard fields": {
                "title": "Prescriptive Analysis",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Tableau dashboard",
                "description": "Fake tableau dashboard utilizing state of the art data practices",
                "tags": [
                  "prescriptive",
                  "AI",
                  "DataDriven"
                ]
              },
              "With custom properties": {
                "title": "Descriptive Analysis",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Tableau dashboard",
                "description": "Fake KPI dashboard and monthly revenue reports",
                "tags": [
                  "descriptive",
                  "fakekpi"
                ],
                "properties": {
                  "Impact Potential": "Grassroot Impact with paradigm shift",
                  "Customer Segmentation": [
                    "floater",
                    "regular",
                    "champion"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis Metadata created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/analysis/{owner}/{id}": {
      "get": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Get an analysis resource by id",
        "description": "Get an analysis resource by id",
        "operationId": "getMetadataAnalysis",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetadataResourceDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Overwrite an existing analysis resource",
        "description": "Overwrite an existing analysis resource",
        "operationId": "replaceCatalogAnalysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogAnalysisRequest"
            },
            "x-examples": {
              "Minimal data": {
                "title": "Predictive Analysis",
                "catalogs": [
                  "crypto_snowflake"
                ]
              },
              "Standard fields": {
                "title": "Prescriptive Analysis",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Tableau dashboard",
                "description": "Fake tableau dashboard utilizing state of the art data practices",
                "tags": [
                  "prescriptive",
                  "AI",
                  "DataDriven"
                ]
              },
              "With custom properties": {
                "title": "Descriptive Analysis",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Tableau dashboard",
                "description": "Fake KPI dashboard and monthly revenue reports",
                "tags": [
                  "descriptive",
                  "fakekpi"
                ],
                "properties": {
                  "Impact Potential": "Grassroot Impact with paradigm shift",
                  "Customer Segmentation": [
                    "floater",
                    "regular",
                    "champion"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Delete an analysis resource",
        "description": "Delete an analysis resource",
        "operationId": "deleteCatalogAnalysis",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Update an existing analysis resource",
        "description": "Update an existing analysis resource",
        "operationId": "patchCatalogAnalysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogAnalysisRequest"
            },
            "x-examples": {
              "Simple": {
                "title": "Predictive Analysis"
              },
              "Standard fields": {
                "title": "Prescriptive Analysis",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Tableau dashboard",
                "description": "Fake tableau dashboard utilizing state of the art data practices",
                "tags": [
                  "prescriptive",
                  "AI",
                  "DataDriven"
                ]
              },
              "With custom properties": {
                "title": "Descriptive Analysis",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Tableau dashboard",
                "description": "Fake KPI dashboard and monthly revenue reports",
                "tags": [
                  "descriptive",
                  "fakekpi"
                ],
                "properties": {
                  "Impact Potential": "Grassroot Impact with paradigm shift",
                  "Customer Segmentation": [
                    "floater",
                    "regular",
                    "champion"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/collections/{owner}": {
      "get": {
        "tags": [
          "metadata/collections"
        ],
        "summary": "Get collections owned by specified owner",
        "description": "Get collections owned by specified owner",
        "operationId": "getCatalogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved collections",
            "schema": {
              "$ref": "#/definitions/PaginatedSearchResultsDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "metadata/collections"
        ],
        "summary": "Create a new collection",
        "description": "Create a new collection",
        "operationId": "createCatalog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/collections/{owner}/{id}": {
      "get": {
        "tags": [
          "metadata/collections"
        ],
        "summary": "Get a collection by ID",
        "description": "Get a collection by ID",
        "operationId": "getCatalog",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved collection",
            "schema": {
              "$ref": "#/definitions/MetadataResourceDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "metadata/collections"
        ],
        "summary": "Replace a collection",
        "description": "Replace a collection",
        "operationId": "replaceCatalog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "metadata/collections"
        ],
        "summary": "Delete an empty collection",
        "description": "Delete an empty collection",
        "operationId": "deleteCatalog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "metadata/collections"
        ],
        "summary": "Update a collection",
        "description": "Update a collection",
        "operationId": "updateCatalog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/glossary/{owner}": {
      "get": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "List business glossary entries by owner",
        "description": "List business glossary resources by owner",
        "operationId": "getMetadataGlossaryByOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "name": "typelabel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeiri",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata glossary",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Create a new business glossary resource",
        "description": "Create a new business glossary resource",
        "operationId": "createCatalogGlossary",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogGlossaryRequest"
            },
            "x-examples": {
              "Minimal data": {
                "title": "Adverse Selection",
                "catalogs": [
                  "crypto_snowflake"
                ]
              },
              "Standard fields": {
                "title": "Actuarial Report",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Business term",
                "summary": "Actuarial memorandum submitted to the state regulatory authority",
                "description": "Consists of actuary's professional conclusions and recommendations, of recording and communicating the methods and procedures, of assuring that the parties addressed are aware of the significance of the actuary's opinion or findings",
                "tags": [
                  "AReport",
                  "AMemo",
                  "RiskMgmt"
                ]
              },
              "With custom properties": {
                "title": "Asset",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Business term",
                "summary": "Embodiment of future benefit leading to net cash inflow in combination with other assets",
                "tags": [
                  "Category1Depreciation",
                  "FakeAsset"
                ],
                "properties": {
                  "Future Benefit": "Not Singly, only in combination with other assets",
                  "Contribution": "Directly or Indirectly to future net cash inflows",
                  "Risk": "Only Assigned, no asset risk as per risk based capital formula"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary Metadata created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/glossary/{owner}/{id}": {
      "get": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Get a business glossary resource by id",
        "description": "Get a business glossary resource by id",
        "operationId": "getMetadataGlossary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetadataResourceDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Overwrite an existing business glossary resource",
        "description": "Overwrite an existing business glossary resource",
        "operationId": "replaceCatalogGlossary",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogGlossaryRequest"
            },
            "x-examples": {
              "Minimal data": {
                "title": "Adverse Selection",
                "catalogs": [
                  "crypto_snowflake"
                ]
              },
              "Standard fields": {
                "title": "Actuarial Report",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Business term",
                "summary": "Actuarial memorandum submitted to the state regulatory authority",
                "description": "Consists of actuary's professional conclusions and recommendations, of recording and communicating the methods and procedures, of assuring that the parties addressed are aware of the significance of the actuary's opinion or findings",
                "tags": [
                  "AReport",
                  "AMemo",
                  "RiskMgmt"
                ]
              },
              "With custom properties": {
                "title": "Asset",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Business term",
                "summary": "Embodiment of future benefit leading to net cash inflow in combination with other assets",
                "tags": [
                  "Category1Depreciation",
                  "FakeAsset"
                ],
                "properties": {
                  "Future Benefit": "Not Singly, only in combination with other assets",
                  "Contribution": "Directly or Indirectly to future net cash inflows",
                  "Risk": "Only Assigned, no asset risk as per risk based capital formula"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Delete a business glossary resource",
        "description": "Delete a business glossary resource",
        "operationId": "deleteCatalogGlossary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Update an existing business glossary resource",
        "description": "Update an existing business glossary resource",
        "operationId": "patchCatalogGlossary",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/id"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogGlossaryRequest"
            },
            "x-examples": {
              "Simple": {
                "title": "Adverse Selection"
              },
              "Standard fields": {
                "title": "Actuarial Report",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Business term",
                "summary": "Actuarial memorandum submitted to the state regulatory authority",
                "description": "Consists of actuary's professional conclusions and recommendations, of recording and communicating the methods and procedures, of assuring that the parties addressed are aware of the significance of the actuary's opinion or findings",
                "tags": [
                  "AReport",
                  "AMemo",
                  "RiskMgmt"
                ]
              },
              "With custom properties": {
                "title": "Asset",
                "catalogs": [
                  "crypto_snowflake",
                  "use-case-org-catalog"
                ],
                "typeLabel": "Business term",
                "summary": "Embodiment of future benefit leading to net cash inflow in combination with other assets",
                "tags": [
                  "Category1Depreciation",
                  "FakeAsset"
                ],
                "properties": {
                  "Future Benefit": "Not Singly, only in combination with other assets",
                  "Contribution": "Directly or Indirectly to future net cash inflows",
                  "Risk": "Only Assigned, no asset risk as per risk based capital formula"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/relationships/{owner}": {
      "post": {
        "tags": [
          "metadata/relationships"
        ],
        "summary": "Create a relationship between two resources",
        "description": "Create a relationship between two resources. ",
        "operationId": "createRelationship",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RelationshipCreateOrDeleteRequest"
            },
            "x-examples": {
              "relate a business term to analysis": "/*\nrelate analysis https://data.world/myOrganization/catalog/analysis/myAnalysisId\n\nto business term https://data.world/myOrganization/catalog/glossary/myBusinessTermId\n*/\n\n{\n  \"relationshipType\": \"REFERENCE_BUSINESS_TERM\",\n  \"sourceId\": \"myAnalysisId\",\n  \"sourceType\": \"ANALYSIS\",\n  \"targetId\": \"myBusinessTermId\",\n  \"targetType\": \"BUSINESS_TERM\"\n}",
              "relate table to analysis": "/*\nrelate analysis https://data.world/myOrganization/catalog/analysis/myAnalysisId\n\nto table https://data.world/myOrganization/catalog/sources/myTableDataSourceId/tables/myTableId\n*/\n\n{\n  \"relationshipType\": \"USES_DATA_FROM\",\n  \"sourceId\": \"myAnalysisId\",\n  \"sourceType\": \"ANALYSIS\",\n  \"targetId\": \"myTableId\",\n  \"targetDatasetId\": \"myTableDataSourceId\",\n  \"targetType\": \"TABLE\"\n}",
              "relate table to dataset": "/*\nrelate table https://data.world/myOrganization/catalog/sources/myTableDataSourceId/tables/myTableId\n\nto dataset https://data.world/myOrganization/myDatatsetId\n*/\n\n{\n  \"relationshipType\": \"USES_DATASET\",\n  \"sourceDatasetId\": \"myTableDataSourceId\",\n  \"sourceId\": \"myTableId\",\n  \"sourceType\": \"TABLE\",\n  \"targetId\": \"myDatasetId\",\n  \"targetType\": \"DATASET\"\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EditActivitiesResultDto"
            },
            "examples": {
              "application/json": {
                "activityBatchId": "95620de3-xxxx-4e2d-9ea8-cxxxxxc8934f",
                "activityResults": [
                  "https://my-organization.linked.data.world/d/my-dataset"
                ],
                "timeEnded": "2020-10-07T20:23:48.896716Z",
                "timeStarted": "2020-10-07T20:23:48.847900Z"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/relationships/{owner}/delete": {
      "post": {
        "tags": [
          "metadata/relationships"
        ],
        "summary": "Delete a relationship between two resources",
        "description": "Delete a relationship between two resources",
        "operationId": "deleteRelationship",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RelationshipCreateOrDeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EditActivitiesResultDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/relationships/{owner}/resource/{resourceId}": {
      "post": {
        "tags": [
          "metadata/relationships"
        ],
        "summary": "Get related resources for a given resource id",
        "description": "Get a list of resources related to a particular resource specified by id. For example, you may use this endpoint to retrieve a list of business glossary terms related to an analysis dashboard. The resourceType param in the request body is required. Results may be filtered by resource type (byResourceTypes) or by relationship type (byRelationTypes).",
        "operationId": "getRelationships",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Unique identifier for the resource you would like to retrieve related resources for. The resourceid can be found in the URL for the resource in the data.world UI."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RelationshipGetRequest"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/metadata/relationships/{owner}/table/{sourceId}/{tableId}": {
      "post": {
        "tags": [
          "metadata/relationships"
        ],
        "summary": "Get resources related to a table",
        "description": "Get resources related to a table",
        "operationId": "getTableRelationships",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "name": "sourceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RelationshipGetTableRequest"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ]
      }
    },
    "/projects/{owner}": {
      "get": {
        "description": "List projects that the currently authenticated user has access to, for the specified owner; when the project is open, or when project is private but has view/edit/manage permissions for the authenticated user",
        "operationId": "getProjectsByOwner",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "count": 1,
                "records": [
                  {
                    "accessLevel": "READ",
                    "created": "2017-08-08T18:40:27.270Z",
                    "files": [
                      {
                        "created": "2017-08-09T17:11:11.225Z",
                        "description": "Cleaned up column headers and empty cells using Excel",
                        "labels": [
                          "clean data"
                        ],
                        "name": "cleaned_USCG_data_import.xlsx",
                        "sizeInBytes": 42430,
                        "updated": "2017-08-09T17:11:11.225Z"
                      },
                      {
                        "created": "2017-08-09T16:44:02.861Z",
                        "description": "Data loaded using Tablua from: https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf",
                        "labels": [
                          "raw data"
                        ],
                        "name": "raw_USCG_data_import.csv",
                        "sizeInBytes": 3097,
                        "updated": "2017-08-09T16:44:02.861Z"
                      },
                      {
                        "created": "2017-08-09T16:51:55.176Z",
                        "name": "uscg-search-rescue-summary.ipynb",
                        "sizeInBytes": 26786,
                        "updated": "2018-03-27T23:27:46.167Z"
                      }
                    ],
                    "id": "an-example-project-that-shows-what-to-put-in-data-world",
                    "linkedDatasets": [
                      {
                        "accessLevel": "READ",
                        "created": "2016-11-17T15:10:00.033Z",
                        "description": "USCG Search and Rescue Summary Statistics",
                        "id": "uscg-search-rescue-summary",
                        "license": "Public Domain",
                        "owner": "uscg",
                        "summary": "Datasets include statistics on search and rescue cases by fiscal year.\n\nSource: https://catalog.data.gov/dataset/uscg-search-and-rescue-summary-statistics",
                        "tags": [
                          "boat",
                          "communication",
                          "search and rescue sar"
                        ],
                        "title": "USCG Search Rescue Summary",
                        "updated": "2016-11-17T15:18:37.403Z",
                        "version": "7f38fbbb-55b3-4fde-bfa5-44ace690c835",
                        "visibility": "OPEN"
                      }
                    ],
                    "objective": "Link to a dataset, extract some data from a PDF, make some insights!",
                    "owner": "jonloyens",
                    "status": "LOADED",
                    "summary": "Overview\n-----------\nA sample project to show off the different kinds of files you might want to keep in a data.world dataset or project.  This project, based on a post on our blog:   **[What do I put in data.world?](https://meta.data.world/what-do-i-put-in-data-world-c6d3a478565d)**, demonstrates how you can use data.world to find unstructured data in a PDF, convert it to structured data with a Notebook, clean the data with Excel then generate insights and analytics while keep everything together in one place for other people to reuse your work.\n\n(Note: This sample project assumes some familiarity with using Python Notebooks and a working installation of Python and Jupyter Notebooks).\n\nIn this sample project we:\n\n1. Identify some raw data in a linked dataset [shown as a PDF](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf).\n\n2. [Use a Python Notebook and Tabula.py](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=uscg-search-rescue-summary.ipynb) to create and [import raw structured data as a CSV](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=raw_USCG_data_import.csv).\n\n3. Load the [CSV into Excel and clean it up nicely](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=cleaned_USCG_data_import.xlsx) so it has nice headers and we can query it.\n\n4. [Use Insights](https://help.data.world/hc/en-us/articles/115010306647-Data-Projects-Share-insights) to document the process and do some basic exploratory analytics.\n\n",
                    "tags": [
                      "new feature"
                    ],
                    "title": "An Example Project that Shows What To Put in data.world",
                    "updated": "2018-03-27T23:27:51.006Z",
                    "visibility": "OPEN"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List projects for a specified owner",
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new project.",
        "operationId": "createProject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ProjectCreateRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"title\": \"My Project\",\r\n  \"objective\": \"Try creating a project via API\",\r\n  \"summary\": \"A very **important** project\",\r\n  \"tags\": [\r\n    \"example\",\r\n    \"api\"\r\n  ],\r\n  \"license\": \"ODC-ODbL\",\r\n  \"visibility\": \"PRIVATE\",\r\n  \"linkedDatasets\": [\r\n    {\r\n      \"owner\": \"gooduser\",\r\n      \"id\": \"good-data\"\r\n    },\r\n    {\r\n      \"owner\": \"importantuser\",\r\n      \"id\": \"important-data\"\r\n    }\r\n  ]\r\n}"
            }
          },
          {
            "$ref": "#/parameters/projectOwner"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Project created successfully.",
                "uri": "https://data.world/owner/project"
              }
            },
            "schema": {
              "$ref": "#/definitions/CreateProjectResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create a data project",
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/{owner}/{id}": {
      "delete": {
        "description": "Delete a project and associated data. This operation cannot be undone, but you may recreate the project using the same id.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Project has been successfully deleted."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_admin"
            ]
          }
        ],
        "summary": "Delete a data project",
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Retrieve a project. The definition of the project will be returned, not the associated data. Use `POST:/sql/{owner}/{id}` or `POST:/sparql/{owner}/{id}` to query the data or use dataset APIs to retrieve data from linked datasets.",
        "operationId": "getProject",
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "accessLevel": "READ",
                "created": "2017-08-08T18:40:27.270Z",
                "files": [
                  {
                    "created": "2017-08-09T17:11:11.225Z",
                    "description": "Cleaned up column headers and empty cells using Excel",
                    "labels": [
                      "clean data"
                    ],
                    "name": "cleaned_USCG_data_import.xlsx",
                    "sizeInBytes": 42430,
                    "updated": "2017-08-09T17:11:11.225Z"
                  },
                  {
                    "created": "2017-08-09T16:44:02.861Z",
                    "description": "Data loaded using Tablua from: https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf",
                    "labels": [
                      "raw data"
                    ],
                    "name": "raw_USCG_data_import.csv",
                    "sizeInBytes": 3097,
                    "updated": "2017-08-09T16:44:02.861Z"
                  },
                  {
                    "created": "2017-08-09T16:51:55.176Z",
                    "name": "uscg-search-rescue-summary.ipynb",
                    "sizeInBytes": 26786,
                    "updated": "2018-03-27T23:27:46.167Z"
                  }
                ],
                "id": "an-example-project-that-shows-what-to-put-in-data-world",
                "linkedDatasets": [
                  {
                    "accessLevel": "READ",
                    "created": "2016-11-17T15:10:00.033Z",
                    "description": "USCG Search and Rescue Summary Statistics",
                    "id": "uscg-search-rescue-summary",
                    "license": "Public Domain",
                    "owner": "uscg",
                    "summary": "Datasets include statistics on search and rescue cases by fiscal year.\n\nSource: https://catalog.data.gov/dataset/uscg-search-and-rescue-summary-statistics",
                    "tags": [
                      "boat",
                      "communication",
                      "search and rescue sar"
                    ],
                    "title": "USCG Search Rescue Summary",
                    "updated": "2016-11-17T15:18:37.403Z",
                    "version": "7f38fbbb-55b3-4fde-bfa5-44ace690c835",
                    "visibility": "OPEN"
                  }
                ],
                "objective": "Link to a dataset, extract some data from a PDF, make some insights!",
                "owner": "jonloyens",
                "status": "LOADED",
                "summary": "Overview\n-----------\nA sample project to show off the different kinds of files you might want to keep in a data.world dataset or project.  This project, based on a post on our blog:   **[What do I put in data.world?](https://meta.data.world/what-do-i-put-in-data-world-c6d3a478565d)**, demonstrates how you can use data.world to find unstructured data in a PDF, convert it to structured data with a Notebook, clean the data with Excel then generate insights and analytics while keep everything together in one place for other people to reuse your work.\n\n(Note: This sample project assumes some familiarity with using Python Notebooks and a working installation of Python and Jupyter Notebooks).\n\nIn this sample project we:\n\n1. Identify some raw data in a linked dataset [shown as a PDF](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf).\n\n2. [Use a Python Notebook and Tabula.py](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=uscg-search-rescue-summary.ipynb) to create and [import raw structured data as a CSV](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=raw_USCG_data_import.csv).\n\n3. Load the [CSV into Excel and clean it up nicely](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=cleaned_USCG_data_import.xlsx) so it has nice headers and we can query it.\n\n4. [Use Insights](https://help.data.world/hc/en-us/articles/115010306647-Data-Projects-Share-insights) to document the process and do some basic exploratory analytics.\n\n",
                "tags": [
                  "new feature"
                ],
                "title": "An Example Project that Shows What To Put in data.world",
                "updated": "2018-03-27T23:27:51.006Z",
                "version": "versionId",
                "visibility": "OPEN"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProjectSummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve a data project",
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing project. Only elements included in the request will be updated. All omitted elements will remain untouched.",
        "operationId": "patchProject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ProjectPatchRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"summary\": \"A very very very **important** project\"\r\n}"
            }
          },
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Project updated successfully."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Update a data project",
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Create or replace a project with a given id. If a project exists with the same id, this call will reset such project redefining all its attributes.",
        "operationId": "replaceProject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ProjectCreateRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"title\": \"My Project\",\r\n  \"objective\": \"Try creating a project via API\",\r\n  \"summary\": \"A very **important** project\",\r\n  \"tags\": [\r\n    \"example\",\r\n    \"api\"\r\n  ],\r\n  \"license\": \"ODC-ODbL\",\r\n  \"visibility\": \"PRIVATE\",\r\n  \"linkedDatasets\": [\r\n    {\r\n      \"owner\": \"gooduser\",\r\n      \"id\": \"good-data\"\r\n    },\r\n    {\r\n      \"owner\": \"importantuser\",\r\n      \"id\": \"important-data\"\r\n    }\r\n  ]\r\n}"
            }
          },
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Project replaced successfully."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create / Replace a data project",
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/{owner}/{id}/linkedDatasets/{linkedDatasetOwner}/{linkedDatasetId}": {
      "delete": {
        "description": "Remove a linked dataset from a project.",
        "operationId": "removeLinkedDataset",
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          },
          {
            "in": "path",
            "name": "linkedDatasetOwner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "linkedDatasetId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Successfully removed linked dataset from project."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Unlink dataset",
        "tags": [
          "projects"
        ]
      },
      "put": {
        "description": "Add a linked dataset to a project.",
        "operationId": "addLinkedDataset",
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          },
          {
            "in": "path",
            "name": "linkedDatasetOwner",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "linkedDatasetId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "message": "Dataset successfully linked to project."
              }
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Link dataset",
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/{owner}/{id}/queries": {
      "get": {
        "description": "List saved queries associated with a project.",
        "operationId": "getProjectQueries",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "count": 1,
                "records": [
                  {
                    "body": "DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000",
                    "created": "2018-03-30T02:30:54.751Z",
                    "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                    "language": "SQL",
                    "name": "queryname",
                    "owner": "username",
                    "updated": "2018-03-30T02:30:54.742Z",
                    "version": "9d634c59-ed52-4c62-b8ca-242dedcb39fa",
                    "parameters": {
                      "metric": {
                        "type": "literal",
                        "datatype": "<http://www.w3.org/2001/XMLSchema#boolean>"
                      }
                    }
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/PaginatedQueryResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List saved queries",
        "tags": [
          "queries"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a saved query in a specified project.",
        "operationId": "createProjectSavedQuery",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateQueryRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"name\": \"sample saved query\",\r\n  \"content\": \"DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000\",\r\n  \"type\": \"SQL\",\r\n \"published\": \"false\" }"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "body": "DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000",
                "created": "2018-03-30T02:30:54.751Z",
                "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                "language": "SQL",
                "name": "queryname",
                "owner": "username",
                "updated": "2018-03-30T02:30:54.742Z",
                "version": "9d634c59-ed52-4c62-b8ca-242dedcb39fa"
              }
            },
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Create a saved query in a specified project.",
        "tags": [
          "queries"
        ]
      }
    },
    "/projects/{owner}/{id}/queries/{queryId}": {
      "delete": {
        "description": "Delete a saved query in a specified project.",
        "operationId": "deleteProjectSavedQuery",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/projectQueryId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"query deleted.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Delete a saved query in a specified project.",
        "tags": [
          "queries"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a saved query in a specified project.",
        "operationId": "updateProjectSavedQuery",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/projectQueryId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryPutRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"name\": \"sample saved query\",\r\n  \"content\": \"DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000\",\r\n \"published\": \"false\" }"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "body": "DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000",
                "created": "2018-03-30T02:30:54.751Z",
                "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                "language": "SQL",
                "name": "queryname",
                "owner": "username",
                "updated": "2018-03-30T02:30:54.742Z",
                "version": "9d634c59-ed52-4c62-b8ca-242dedcb39fa"
              }
            },
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Update a saved query in a specified project.",
        "tags": [
          "queries"
        ]
      }
    },
    "/projects/{owner}/{id}/v/{versionId}": {
      "get": {
        "description": "Retrieve a project version. The definition of the project will be returned.",
        "operationId": "getProjectByVersion",
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          },
          {
            "$ref": "#/parameters/versionId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "accessLevel": "READ",
                "created": "2017-08-08T18:40:27.270Z",
                "files": [
                  {
                    "created": "2017-08-09T17:11:11.225Z",
                    "description": "Cleaned up column headers and empty cells using Excel",
                    "labels": [
                      "clean data"
                    ],
                    "name": "cleaned_USCG_data_import.xlsx",
                    "sizeInBytes": 42430,
                    "updated": "2017-08-09T17:11:11.225Z"
                  },
                  {
                    "created": "2017-08-09T16:44:02.861Z",
                    "description": "Data loaded using Tablua from: https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf",
                    "labels": [
                      "raw data"
                    ],
                    "name": "raw_USCG_data_import.csv",
                    "sizeInBytes": 3097,
                    "updated": "2017-08-09T16:44:02.861Z"
                  },
                  {
                    "created": "2017-08-09T16:51:55.176Z",
                    "name": "uscg-search-rescue-summary.ipynb",
                    "sizeInBytes": 26786,
                    "updated": "2018-03-27T23:27:46.167Z"
                  }
                ],
                "id": "an-example-project-that-shows-what-to-put-in-data-world",
                "linkedDatasets": [
                  {
                    "accessLevel": "READ",
                    "created": "2016-11-17T15:10:00.033Z",
                    "description": "USCG Search and Rescue Summary Statistics",
                    "id": "uscg-search-rescue-summary",
                    "license": "Public Domain",
                    "owner": "uscg",
                    "summary": "Datasets include statistics on search and rescue cases by fiscal year.\n\nSource: https://catalog.data.gov/dataset/uscg-search-and-rescue-summary-statistics",
                    "tags": [
                      "boat",
                      "communication",
                      "search and rescue sar"
                    ],
                    "title": "USCG Search Rescue Summary",
                    "updated": "2016-11-17T15:18:37.403Z",
                    "version": "7f38fbbb-55b3-4fde-bfa5-44ace690c835",
                    "visibility": "OPEN"
                  }
                ],
                "objective": "Link to a dataset, extract some data from a PDF, make some insights!",
                "owner": "jonloyens",
                "status": "LOADED",
                "summary": "Overview\n-----------\nA sample project to show off the different kinds of files you might want to keep in a data.world dataset or project.  This project, based on a post on our blog:   **[What do I put in data.world?](https://meta.data.world/what-do-i-put-in-data-world-c6d3a478565d)**, demonstrates how you can use data.world to find unstructured data in a PDF, convert it to structured data with a Notebook, clean the data with Excel then generate insights and analytics while keep everything together in one place for other people to reuse your work.\n\n(Note: This sample project assumes some familiarity with using Python Notebooks and a working installation of Python and Jupyter Notebooks).\n\nIn this sample project we:\n\n1. Identify some raw data in a linked dataset [shown as a PDF](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf).\n\n2. [Use a Python Notebook and Tabula.py](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=uscg-search-rescue-summary.ipynb) to create and [import raw structured data as a CSV](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=raw_USCG_data_import.csv).\n\n3. Load the [CSV into Excel and clean it up nicely](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=cleaned_USCG_data_import.xlsx) so it has nice headers and we can query it.\n\n4. [Use Insights](https://help.data.world/hc/en-us/articles/115010306647-Data-Projects-Share-insights) to document the process and do some basic exploratory analytics.\n\n",
                "tags": [
                  "new feature"
                ],
                "title": "An Example Project that Shows What To Put in data.world",
                "updated": "2018-03-27T23:27:51.006Z",
                "version": "versionId",
                "visibility": "OPEN"
              }
            },
            "schema": {
              "$ref": "#/definitions/ProjectSummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve a data project version",
        "tags": [
          "projects"
        ]
      }
    },
    "/queries/{id}": {
      "get": {
        "description": "Retrieve a saved query. Query definitions will be returned, not query results. To retrieve query results use `GET:/queries/{id}/results`.",
        "operationId": "getQuery",
        "parameters": [
          {
            "$ref": "#/parameters/queryId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "body": "DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000",
                "created": "2018-03-30T02:30:54.751Z",
                "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                "language": "SQL",
                "name": "queryname",
                "owner": "username",
                "updated": "2018-03-30T02:30:54.742Z",
                "version": "9d634c59-ed52-4c62-b8ca-242dedcb39fa",
                "parameters": {
                  "metric": {
                    "type": "literal",
                    "datatype": "<http://www.w3.org/2001/XMLSchema#boolean>"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve a saved query",
        "tags": [
          "queries"
        ]
      }
    },
    "/queries/{id}/results": {
      "get": {
        "description": "Execute a saved query.\n\nSQL results are available in a variety of formats. By default, `application/json` will be returned. Set the `Accept` header to one of the following values in accordance with your preference:\n\n* `text/csv`\n* `application/json`\n* `application/json-l`\n* `application/x-ndjson`\n\nSPARQL results are available in a variety of formats. By default, `application/sparql-results+json` will be returned. Set the `Accept` header to one of the following values in accordance with your preference:\n\n- `application/sparql-results+xml`\n- `application/sparql-results+json`\n- `application/rdf+json`\n- `application/rdf+xml`\n- `text/csv`\n- `text/tab-separated-values`\n- `text/turtle`",
        "operationId": "executeQuery",
        "parameters": [
          {
            "$ref": "#/parameters/queryId"
          },
          {
            "$ref": "#/parameters/includeTableSchema"
          }
        ],
        "produces": [
          "application/json",
          "text/csv",
          "application/sparql-results+xml",
          "application/sparql-results+json",
          "text/tab-separated-values",
          "application/rdf+json",
          "text/turtle",
          "application/rdf+xml",
          "application/json-l",
          "application/x-ndjson"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded."
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Execute a saved query",
        "tags": [
          "queries"
        ]
      },
      "post": {
        "tags": [
          "queries"
        ],
        "description": "Execute a saved query (same as GET:/queries/{id}/results) with the option to specify named query parameters.",
        "operationId": "executeQueryWithPost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/csv",
          "application/sparql-results+xml",
          "application/sparql-results+json",
          "text/tab-separated-values",
          "application/rdf+json",
          "text/turtle",
          "application/rdf+xml",
          "application/json-l",
          "application/x-ndjson"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/queryId"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SavedQueryExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded."
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Execute a saved query (with parameters)"
      }
    },
    "/queries/{id}/v/{versionId}": {
      "get": {
        "description": "Retrieve a version of a saved query. Query definitions will be returned, not query results.",
        "operationId": "getQueryVersion",
        "parameters": [
          {
            "$ref": "#/parameters/queryId"
          },
          {
            "$ref": "#/parameters/versionId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "body": "DECLARE metric AS BOOLEAN = true\nSELECT *\nFROM table\nLIMIT 5000",
                "created": "2018-03-30T02:30:54.751Z",
                "id": "d529a67d-a27a-4f88-86f0-c8c3003afed9",
                "language": "SQL",
                "name": "queryname",
                "owner": "username",
                "updated": "2018-03-30T02:30:54.742Z",
                "version": "9d634c59-ed52-4c62-b8ca-242dedcb39fa",
                "parameters": {
                  "metric": {
                    "type": "literal",
                    "datatype": "<http://www.w3.org/2001/XMLSchema#boolean>"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve a saved query version",
        "tags": [
          "queries"
        ]
      }
    },
    "/search": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Advanced search on resources",
        "description": "Advanced search on resources",
        "operationId": "searchResourcesAdvanced",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedSearchResultsDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      }
    },
    "/search/resources": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Simple search on resources",
        "description": "Simple search is a light weight API implementation exposing similar search capabilities as our main platform search UI.\n\nBy default, the search response will return mixed result types including metadata resources, datasets, projects, queries, insights, tables, and comments.\n\nA free-text search term is required. Simple search does not support complex keyword or logical operator grammar.\nLight weight filters for resource owner and resource category are supported. You may optionally specify the includeCommunityResults param to query for resources in the data.world open data community.",
        "operationId": "searchResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SimpleSearchRequest"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedSearchResultsDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ]
      }
    },
    "/sparql/{owner}/{id}": {
      "get": {
        "description": "Same as `POST:/sparql`.",
        "operationId": "sparqlGet",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "produces": [
          "application/sparql-results+json",
          "application/sparql-results+xml",
          "application/rdf+json",
          "application/rdf+xml",
          "text/tab-separated-values",
          "text/turtle",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded."
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "SPARQL query (via GET)",
        "tags": [
          "queries"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Execute a SPARQL query against a dataset or data project.\n\nSPARQL results are available in a variety of formats. By default, `application/sparql-results+json` will be returned. Set the `Accept` header to one of the following values in accordance with your preference:\n\n- `application/sparql-results+xml`\n- `application/sparql-results+json`\n- `application/rdf+json`\n- `application/rdf+xml`\n- `text/csv`\n- `text/tab-separated-values`\n- `text/turtle`\n\nNew to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/).",
        "operationId": "sparqlPost",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/formQuery"
          }
        ],
        "produces": [
          "application/sparql-results+json",
          "application/sparql-results+xml",
          "application/rdf+json",
          "application/rdf+xml",
          "text/tab-separated-values",
          "text/turtle",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {}
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "SPARQL query",
        "tags": [
          "queries"
        ]
      }
    },
    "/sql/{owner}/{id}": {
      "get": {
        "description": "Same as `POST:/sql/{owner}/{id}`",
        "operationId": "sqlGet",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/includeTableSchema"
          }
        ],
        "produces": [
          "application/json",
          "application/json-l",
          "application/x-ndjson",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded."
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "SQL query (via GET)",
        "tags": [
          "queries"
        ]
      },
      "post": {
        "description": "Execute a SQL query against a dataset or data project.\n\nSQL results are available in a variety of formats. By default, `application/json` will be returned. Set the `Accept` header to one of the following values in accordance with your preference:\n\n* `text/csv`\n* `application/json`\n* `application/json-l`\n* `application/x-ndjson`\n\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId": "sqlPost",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SqlQueryRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/json-l",
          "application/x-ndjson",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded."
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "SQL query",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "queries"
        ]
      }
    },
    "/streams/{owner}/{id}/{streamId}": {
      "post": {
        "consumes": [
          "application/json-l",
          "application/json"
        ],
        "description": "Append JSON data to a stream associated with a dataset. \n\ndata.world streams are append-only by default. Alternatively, if a primary key is specified (see: `POST:/streams/{owner}/{id}/{streamId}/schema`), data.world will replace records with the same primary key value.\n\n**Streams don't need to be created before you can append data to them**. They will be created on-demand, when the first record is appended or by defining its schema.\n\nMultiple records can be appended at once by using JSON-L (`application/json-l`) as the request content type.\n\n**IMPORTANT**\n\nData uploaded to a dataset via a stream is not immediatelly processed. Instead, it is processed automatically in accordance with the dataset settings (default: daily) or as a result of calling `POST:/datasets/{owner}/{id}/sync`.\n\nOnce processed, the contents of a stream will appear as part of the respective dataset as a `.jsonl` file (e.g. `my-stream` will produce a file named `my-stream.jsonl`).",
        "operationId": "appendRecords",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/streamId"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/StreamsResource"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "**ACCEPTED**\nThe request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place."
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Append record(s)",
        "tags": [
          "streams"
        ]
      }
    },
    "/streams/{owner}/{id}/{streamId}/records": {
      "delete": {
        "description": "Delete all records previously appended to stream.",
        "operationId": "deleteRecords",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/streamId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Delete all records",
        "tags": [
          "streams"
        ]
      }
    },
    "/streams/{owner}/{id}/{streamId}/schema": {
      "get": {
        "description": "Retrieve a stream's schema.",
        "operationId": "getStreamSchema",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/streamId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StreamSchema"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve stream schema",
        "tags": [
          "streams"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Set or update a stream's schema.\n\nThe schema of a stream defines its primary key(s) and sort/sequence field. \n\ndata.world streams are append-only by default. Alternatively, if a primary key is specified, data.world will replace records with the same primary key value. data.world will sort records by sequence field value and will discard all but the last record appended for each given primary key value.\n\nThe `updateMethod` parameter specifies how data.world should handle existing records when schema is updated. Currently, the only `updateMethod` supported is `TRUNCATED`. data.world will discard all records when the schema is updated.",
        "operationId": "patchStreamSchema",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/streamId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamSchemaPatchRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Set / Update stream schema",
        "tags": [
          "streams"
        ]
      }
    },
    "/uploads/{owner}/{id}/files": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload multiple files at once to a dataset.\n\nThis endpoint expects requests of type `multipart/form-data` and you can include one or more parts named `file`, each containing a different file to be uploaded.\n\nFor example, assuming that you want to upload two local files named `file1.csv` and `file2.csv` to a hypothetical dataset `https://data.world/awesome-user/awesome-dataset`, this is what the cURL command would look like.\n\n```bash\ncurl \\\n  -H \"Authorization: Bearer <YOUR_API_TOKEN>\" \\\n  -F \"file=@file1.csv\" \\\n  -F \"file=@file2.csv\" \\\n  https://api.data.world/v0/uploads/awesome-user/awesome-dataset/files\n```\n\nSwagger clients may limit this method of upload to one file at a time. Other HTTP clients capable of making multipart/form-data requests can be used to upload multiple files in a single request.",
        "operationId": "uploadFiles",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "description": "Multipart-encoded file contents",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "default": false,
            "description": "Indicates whether compressed files should be expanded upon upload.",
            "in": "query",
            "name": "expandArchives",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"File(s) uploaded.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "**PAYLOAD TOO LARGE**\nThe server is refusing to process a request because the request payload is larger than the server is willing or able to process.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Upload files",
        "tags": [
          "files"
        ]
      }
    },
    "/uploads/{owner}/{id}/files/{file}": {
      "put": {
        "consumes": [
          "application/octet-stream",
          "*/*"
        ],
        "description": "Upload one file at a time to a dataset.\n\nThis endpoint expects requests of type `application/octet-stream`.\n\nFor example, assuming that you want to upload a local file named `file1.csv` to a hypothetical dataset `https://data.world/awesome-user/awesome-dataset` and choose its name on data.world to be `better-name.csv`, this is what the cURL command would look like.\n\n```bash\ncurl \\\n  -H \"Authorization: Bearer <YOUR_API_TOKEN>\" \\\n  -X PUT -H \"Content-Type: application/octet-stream\" \\\n  --data-binary @file1.csv \\\n  https://api.data.world/v0/uploads/awesome-user/awesome-dataset/files/better-name.csv\n```\n\nThis method of upload is typically not supported by Swagger clients. Other HTTP clients can be used to supply the contents of the file directly in the body of the request.",
        "operationId": "uploadFile",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/file"
          },
          {
            "default": false,
            "description": "Indicates whether a compressed file should be expanded upon upload.",
            "in": "query",
            "name": "expandArchive",
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"message\": \"File uploaded.\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "**PAYLOAD TOO LARGE**\nThe server is refusing to process a request because the request payload is larger than the server is willing or able to process.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_write"
            ]
          }
        ],
        "summary": "Upload a file",
        "tags": [
          "files"
        ]
      }
    },
    "/user": {
      "get": {
        "description": "Retrieve user profile information of the currently authenticated user.",
        "operationId": "getUserData",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n    \"avatarUrl\": \"https://cdn.filepicker.io/api/file/m0Y31H2NRq6byi22ApUs\",\n    \"displayName\": \"Rafael Pereira\",\n    \"id\": \"rflprr\",\n    \"created\": \"2016-06-13T22:38:29.412Z\",\n    \"updated\": \"2017-01-31T17:01:49.847Z\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/UserDataResponse"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve user data",
        "tags": [
          "user"
        ]
      }
    },
    "/user/datasets/contributing": {
      "get": {
        "description": "List datasets that the currently authenticated user has access to because he or she is a contributor.",
        "operationId": "fetchContributingDatasets",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List datasets as contributor",
        "tags": [
          "user"
        ]
      }
    },
    "/user/datasets/liked": {
      "get": {
        "description": "List datasets that the currently authenticated user liked (bookmarked).",
        "operationId": "fetchLikedDatasets",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List liked (bookmarked) datasets",
        "tags": [
          "user"
        ]
      }
    },
    "/user/datasets/own": {
      "get": {
        "description": "List datasets that the currently authenticated user has access to because he or she is the owner.",
        "operationId": "fetchDatasets",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            },
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List datasets as owner",
        "tags": [
          "datasets"
        ]
      }
    },
    "/user/projects/contributing": {
      "get": {
        "description": "List projects that the currently authenticated user has access to because he or she is a contributor.",
        "operationId": "fetchContributingProjects",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "count": 1,
                "records": [
                  {
                    "accessLevel": "READ",
                    "created": "2017-08-08T18:40:27.270Z",
                    "files": [
                      {
                        "created": "2017-08-09T17:11:11.225Z",
                        "description": "Cleaned up column headers and empty cells using Excel",
                        "labels": [
                          "clean data"
                        ],
                        "name": "cleaned_USCG_data_import.xlsx",
                        "sizeInBytes": 42430,
                        "updated": "2017-08-09T17:11:11.225Z"
                      },
                      {
                        "created": "2017-08-09T16:44:02.861Z",
                        "description": "Data loaded using Tablua from: https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf",
                        "labels": [
                          "raw data"
                        ],
                        "name": "raw_USCG_data_import.csv",
                        "sizeInBytes": 3097,
                        "updated": "2017-08-09T16:44:02.861Z"
                      },
                      {
                        "created": "2017-08-09T16:51:55.176Z",
                        "name": "uscg-search-rescue-summary.ipynb",
                        "sizeInBytes": 26786,
                        "updated": "2018-03-27T23:27:46.167Z"
                      }
                    ],
                    "id": "an-example-project-that-shows-what-to-put-in-data-world",
                    "linkedDatasets": [
                      {
                        "accessLevel": "READ",
                        "created": "2016-11-17T15:10:00.033Z",
                        "description": "USCG Search and Rescue Summary Statistics",
                        "id": "uscg-search-rescue-summary",
                        "license": "Public Domain",
                        "owner": "uscg",
                        "summary": "Datasets include statistics on search and rescue cases by fiscal year.\n\nSource: https://catalog.data.gov/dataset/uscg-search-and-rescue-summary-statistics",
                        "tags": [
                          "boat",
                          "communication",
                          "search and rescue sar"
                        ],
                        "title": "USCG Search Rescue Summary",
                        "updated": "2016-11-17T15:18:37.403Z",
                        "version": "7f38fbbb-55b3-4fde-bfa5-44ace690c835",
                        "visibility": "OPEN"
                      }
                    ],
                    "objective": "Link to a dataset, extract some data from a PDF, make some insights!",
                    "owner": "jonloyens",
                    "status": "LOADED",
                    "summary": "Overview\n-----------\nA sample project to show off the different kinds of files you might want to keep in a data.world dataset or project.  This project, based on a post on our blog:   **[What do I put in data.world?](https://meta.data.world/what-do-i-put-in-data-world-c6d3a478565d)**, demonstrates how you can use data.world to find unstructured data in a PDF, convert it to structured data with a Notebook, clean the data with Excel then generate insights and analytics while keep everything together in one place for other people to reuse your work.\n\n(Note: This sample project assumes some familiarity with using Python Notebooks and a working installation of Python and Jupyter Notebooks).\n\nIn this sample project we:\n\n1. Identify some raw data in a linked dataset [shown as a PDF](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf).\n\n2. [Use a Python Notebook and Tabula.py](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=uscg-search-rescue-summary.ipynb) to create and [import raw structured data as a CSV](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=raw_USCG_data_import.csv).\n\n3. Load the [CSV into Excel and clean it up nicely](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=cleaned_USCG_data_import.xlsx) so it has nice headers and we can query it.\n\n4. [Use Insights](https://help.data.world/hc/en-us/articles/115010306647-Data-Projects-Share-insights) to document the process and do some basic exploratory analytics.\n\n",
                    "tags": [
                      "new feature"
                    ],
                    "title": "An Example Project that Shows What To Put in data.world",
                    "updated": "2018-03-27T23:27:51.006Z",
                    "visibility": "OPEN"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List projects as contributor",
        "tags": [
          "user"
        ]
      }
    },
    "/user/projects/liked": {
      "get": {
        "description": "List projects that the currently authenticated user liked (bookmarked).",
        "operationId": "fetchLikedProjects",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "count": 1,
                "records": [
                  {
                    "accessLevel": "READ",
                    "created": "2017-08-08T18:40:27.270Z",
                    "files": [
                      {
                        "created": "2017-08-09T17:11:11.225Z",
                        "description": "Cleaned up column headers and empty cells using Excel",
                        "labels": [
                          "clean data"
                        ],
                        "name": "cleaned_USCG_data_import.xlsx",
                        "sizeInBytes": 42430,
                        "updated": "2017-08-09T17:11:11.225Z"
                      },
                      {
                        "created": "2017-08-09T16:44:02.861Z",
                        "description": "Data loaded using Tablua from: https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf",
                        "labels": [
                          "raw data"
                        ],
                        "name": "raw_USCG_data_import.csv",
                        "sizeInBytes": 3097,
                        "updated": "2017-08-09T16:44:02.861Z"
                      },
                      {
                        "created": "2017-08-09T16:51:55.176Z",
                        "name": "uscg-search-rescue-summary.ipynb",
                        "sizeInBytes": 26786,
                        "updated": "2018-03-27T23:27:46.167Z"
                      }
                    ],
                    "id": "an-example-project-that-shows-what-to-put-in-data-world",
                    "linkedDatasets": [
                      {
                        "accessLevel": "READ",
                        "created": "2016-11-17T15:10:00.033Z",
                        "description": "USCG Search and Rescue Summary Statistics",
                        "id": "uscg-search-rescue-summary",
                        "license": "Public Domain",
                        "owner": "uscg",
                        "summary": "Datasets include statistics on search and rescue cases by fiscal year.\n\nSource: https://catalog.data.gov/dataset/uscg-search-and-rescue-summary-statistics",
                        "tags": [
                          "boat",
                          "communication",
                          "search and rescue sar"
                        ],
                        "title": "USCG Search Rescue Summary",
                        "updated": "2016-11-17T15:18:37.403Z",
                        "version": "7f38fbbb-55b3-4fde-bfa5-44ace690c835",
                        "visibility": "OPEN"
                      }
                    ],
                    "objective": "Link to a dataset, extract some data from a PDF, make some insights!",
                    "owner": "jonloyens",
                    "status": "LOADED",
                    "summary": "Overview\n-----------\nA sample project to show off the different kinds of files you might want to keep in a data.world dataset or project.  This project, based on a post on our blog:   **[What do I put in data.world?](https://meta.data.world/what-do-i-put-in-data-world-c6d3a478565d)**, demonstrates how you can use data.world to find unstructured data in a PDF, convert it to structured data with a Notebook, clean the data with Excel then generate insights and analytics while keep everything together in one place for other people to reuse your work.\n\n(Note: This sample project assumes some familiarity with using Python Notebooks and a working installation of Python and Jupyter Notebooks).\n\nIn this sample project we:\n\n1. Identify some raw data in a linked dataset [shown as a PDF](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf).\n\n2. [Use a Python Notebook and Tabula.py](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=uscg-search-rescue-summary.ipynb) to create and [import raw structured data as a CSV](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=raw_USCG_data_import.csv).\n\n3. Load the [CSV into Excel and clean it up nicely](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=cleaned_USCG_data_import.xlsx) so it has nice headers and we can query it.\n\n4. [Use Insights](https://help.data.world/hc/en-us/articles/115010306647-Data-Projects-Share-insights) to document the process and do some basic exploratory analytics.\n\n",
                    "tags": [
                      "new feature"
                    ],
                    "title": "An Example Project that Shows What To Put in data.world",
                    "updated": "2018-03-27T23:27:51.006Z",
                    "visibility": "OPEN"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List liked (bookmarked) projects",
        "tags": [
          "user"
        ]
      }
    },
    "/user/projects/own": {
      "get": {
        "description": "List projects that the currently authenticated user has access to because he or she is the owner.",
        "operationId": "fetchProjects",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "count": 1,
                "records": [
                  {
                    "accessLevel": "ADMIN",
                    "created": "2017-08-08T18:40:27.270Z",
                    "files": [
                      {
                        "created": "2017-08-09T17:11:11.225Z",
                        "description": "Cleaned up column headers and empty cells using Excel",
                        "labels": [
                          "clean data"
                        ],
                        "name": "cleaned_USCG_data_import.xlsx",
                        "sizeInBytes": 42430,
                        "updated": "2017-08-09T17:11:11.225Z"
                      },
                      {
                        "created": "2017-08-09T16:44:02.861Z",
                        "description": "Data loaded using Tablua from: https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf",
                        "labels": [
                          "raw data"
                        ],
                        "name": "raw_USCG_data_import.csv",
                        "sizeInBytes": 3097,
                        "updated": "2017-08-09T16:44:02.861Z"
                      },
                      {
                        "created": "2017-08-09T16:51:55.176Z",
                        "name": "uscg-search-rescue-summary.ipynb",
                        "sizeInBytes": 26786,
                        "updated": "2018-03-27T23:27:46.167Z"
                      }
                    ],
                    "id": "an-example-project-that-shows-what-to-put-in-data-world",
                    "linkedDatasets": [
                      {
                        "accessLevel": "READ",
                        "created": "2016-11-17T15:10:00.033Z",
                        "description": "USCG Search and Rescue Summary Statistics",
                        "id": "uscg-search-rescue-summary",
                        "license": "Public Domain",
                        "owner": "uscg",
                        "summary": "Datasets include statistics on search and rescue cases by fiscal year.\n\nSource: https://catalog.data.gov/dataset/uscg-search-and-rescue-summary-statistics",
                        "tags": [
                          "boat",
                          "communication",
                          "search and rescue sar"
                        ],
                        "title": "USCG Search Rescue Summary",
                        "updated": "2016-11-17T15:18:37.403Z",
                        "version": "7f38fbbb-55b3-4fde-bfa5-44ace690c835",
                        "visibility": "OPEN"
                      }
                    ],
                    "objective": "Link to a dataset, extract some data from a PDF, make some insights!",
                    "owner": "jonloyens",
                    "status": "LOADED",
                    "summary": "Overview\n-----------\nA sample project to show off the different kinds of files you might want to keep in a data.world dataset or project.  This project, based on a post on our blog:   **[What do I put in data.world?](https://meta.data.world/what-do-i-put-in-data-world-c6d3a478565d)**, demonstrates how you can use data.world to find unstructured data in a PDF, convert it to structured data with a Notebook, clean the data with Excel then generate insights and analytics while keep everything together in one place for other people to reuse your work.\n\n(Note: This sample project assumes some familiarity with using Python Notebooks and a working installation of Python and Jupyter Notebooks).\n\nIn this sample project we:\n\n1. Identify some raw data in a linked dataset [shown as a PDF](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?agentid=uscg&datasetid=uscg-search-rescue-summary&filename=SAR+Sum+Stats+64-13.pdf).\n\n2. [Use a Python Notebook and Tabula.py](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=uscg-search-rescue-summary.ipynb) to create and [import raw structured data as a CSV](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=raw_USCG_data_import.csv).\n\n3. Load the [CSV into Excel and clean it up nicely](https://data.world/jonloyens/an-example-project-that-shows-what-to-put-in-data-world/workspace/file?filename=cleaned_USCG_data_import.xlsx) so it has nice headers and we can query it.\n\n4. [Use Insights](https://help.data.world/hc/en-us/articles/115010306647-Data-Projects-Share-insights) to document the process and do some basic exploratory analytics.\n\n",
                    "tags": [
                      "new feature"
                    ],
                    "title": "An Example Project that Shows What To Put in data.world",
                    "updated": "2018-03-27T23:27:51.006Z",
                    "visibility": "OPEN"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "List projects owned",
        "tags": [
          "user"
        ]
      }
    },
    "/user/webhooks": {
      "get": {
        "description": "List webhook subscriptions associated with the currently authenticated user.",
        "operationId": "getWebhooks",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "next",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedSubscriptionResults"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "List subscriptions",
        "tags": [
          "webhooks"
        ]
      }
    },
    "/user/webhooks/datasets/{owner}/{id}": {
      "delete": {
        "description": "Delete webhook subscription associated with the currently authenticated user and to a given dataset.",
        "operationId": "unsubscribeFromDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Unsubscribe from dataset",
        "tags": [
          "webhooks"
        ]
      },
      "get": {
        "description": "Retrieve webhook subscription associated with the currently authenticated user and to a given dataset.",
        "operationId": "getForDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Retrieve dataset subscription",
        "tags": [
          "webhooks"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Create webhook subscription associated with the currently authenticated user and to a given dataset.",
        "operationId": "subscribeToDataset",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Subscribe to dataset",
        "tags": [
          "webhooks"
        ]
      }
    },
    "/user/webhooks/projects/{owner}/{id}": {
      "delete": {
        "description": "Delete webhook subscription associated with the currently authenticated user and to a given data project.",
        "operationId": "unsubscribeFromProject",
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Unsubscribe from data project",
        "tags": [
          "webhooks"
        ]
      },
      "get": {
        "description": "Retrieve webhook subscription associated with the currently authenticated user and to a given data project.",
        "operationId": "getForProject",
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Retrieve data project subscription",
        "tags": [
          "webhooks"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Create webhook subscription associated with the currently authenticated user and to a given data project.",
        "operationId": "subscribeToProject",
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Subscribe to data project",
        "tags": [
          "webhooks"
        ]
      }
    },
    "/user/webhooks/users/{account}": {
      "delete": {
        "description": "Delete webhook subscription associated with the currently authenticated user and to a given organization or user account.",
        "operationId": "unsubscribeFromUser",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Unsubscribe from account",
        "tags": [
          "webhooks"
        ]
      },
      "get": {
        "description": "Retrieve webhook subscription associated with the currently authenticated user and to a given organization or user account.",
        "operationId": "getForUser",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Retrieve account subscription",
        "tags": [
          "webhooks"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Create webhook subscription associated with the currently authenticated user and to a given organization or user account.",
        "operationId": "subscribeToUser",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_hooks"
            ]
          }
        ],
        "summary": "Subscribe to account",
        "tags": [
          "webhooks"
        ]
      }
    },
    "/users/{account}": {
      "get": {
        "description": "Retrieve user profile information for the specified account.",
        "operationId": "getAccount",
        "parameters": [
          {
            "$ref": "#/parameters/accountId"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "examples": {
              "application/json": {
                "avatarUrl": "https://cdn.filepicker.io/api/file/m0Y31H2NRq6byi22ApUs",
                "created": "2016-06-13T22:38:29.412Z",
                "displayName": "Rafael Pereira",
                "id": "rflprr",
                "updated": "2017-01-31T17:01:49.847Z"
              }
            },
            "schema": {
              "$ref": "#/definitions/UserDataResponse"
            }
          },
          "400": {
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": [
              "user_api_read"
            ]
          }
        ],
        "summary": "Retrieve a user's profile",
        "tags": [
          "users"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "security": [
    {
      "oauth": []
    }
  ],
  "securityDefinitions": {
    "oauth": {
      "authorizationUrl": "https://data.world/oauth/authorize",
      "flow": "accessCode",
      "scopes": {
        "user_api_admin": "Permission to access administrative features, including permission to delete datasets and data projects.",
        "user_api_read": "Permission to read the data and metadata contained in datasets and data projects to which you have access.",
        "user_api_write": "Permission to update the data and metadata contained in datasets and data projects to which you have write access.",
        "user_api_hooks": "Permission to receive notifications for activities you have visibility into, such as modifications of datasets and projects to which you have access and others.",
        "user_api_offline": "Permission to interact with data.world on your behalf without your active engagement."
      },
      "tokenUrl": "https://data.world/oauth/access_token",
      "type": "oauth2"
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "name": "connections"
    },
    {
      "name": "datasets"
    },
    {
      "name": "download"
    },
    {
      "name": "files"
    },
    {
      "name": "insights"
    },
    {
      "name": "metadata/analysis"
    },
    {
      "name": "metadata/collections"
    },
    {
      "name": "metadata/data"
    },
    {
      "name": "metadata/glossary"
    },
    {
      "name": "metadata/properties"
    },
    {
      "name": "metadata/relationships"
    },
    {
      "name": "projects"
    },
    {
      "name": "queries"
    },
    {
      "name": "search"
    },
    {
      "name": "streams"
    },
    {
      "name": "tables"
    },
    {
      "name": "user"
    },
    {
      "name": "users"
    },
    {
      "name": "webhooks"
    },
    {
      "name": "DOIs"
    }
  ]
}