{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is the internal version of the Swagger API generated from the Java\n                                            resource objects and is not visible to external users. It must be a superset\n                                            of the more user-friendly Swagger API maintained manually at\n                                            https://github.com/datadotworld/dwapi-spec.",
    "version" : "0.21.0",
    "title" : "data.world Public API (internal version)"
  },
  "host" : "api.data.world",
  "basePath" : "/v0",
  "tags" : [ {
    "name" : "DOIs"
  }, {
    "name" : "cancel"
  }, {
    "name" : "connections"
  }, {
    "name" : "datasets"
  }, {
    "name" : "describe"
  }, {
    "name" : "download"
  }, {
    "name" : "insights"
  }, {
    "name" : "metadata"
  }, {
    "name" : "metadata/analysis"
  }, {
    "name" : "metadata/collections"
  }, {
    "name" : "metadata/data/sources"
  }, {
    "name" : "metadata/glossary"
  }, {
    "name" : "metadata/relationships"
  }, {
    "name" : "partners"
  }, {
    "name" : "projects"
  }, {
    "name" : "properties"
  }, {
    "name" : "queries"
  }, {
    "name" : "requests"
  }, {
    "name" : "search"
  }, {
    "name" : "serviceaccount"
  }, {
    "name" : "sparql"
  }, {
    "name" : "sql"
  }, {
    "name" : "streams"
  }, {
    "name" : "uploads"
  }, {
    "name" : "user"
  }, {
    "name" : "users"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/cancel" : {
      "post" : {
        "tags" : [ "cancel" ],
        "summary" : "Cancel a query",
        "description" : "",
        "operationId" : "cancel",
        "parameters" : [ {
          "name" : "queryruntoken",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/connections/{owner}" : {
      "get" : {
        "tags" : [ "connections" ],
        "summary" : "Get connections by owner.",
        "description" : "",
        "operationId" : "getConnectionsByOwner",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved connections",
            "schema" : {
              "$ref" : "#/definitions/PaginatedConnectionResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "connections" ],
        "summary" : "Create a new connection.",
        "description" : "",
        "operationId" : "createConnection",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ConnectionDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/connections/{owner}/{id}" : {
      "get" : {
        "tags" : [ "connections" ],
        "summary" : "Get an individual connection",
        "description" : "",
        "operationId" : "getConnection",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ConnectionDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "connections" ],
        "summary" : "Delete a Connection.",
        "description" : "",
        "operationId" : "deleteConnection",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection has been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/search" : {
      "get" : {
        "tags" : [ "datasets" ],
        "summary" : "Search for datasets.",
        "description" : "",
        "operationId" : "search",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDatasetResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}" : {
      "get" : {
        "tags" : [ "datasets" ],
        "summary" : "Gets datasets by owner.",
        "description" : "",
        "operationId" : "getDatasetsByOwner",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDatasetResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "datasets" ],
        "summary" : "Create a new dataset.",
        "description" : "",
        "operationId" : "createDataset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatasetCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateDatasetResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}" : {
      "get" : {
        "tags" : [ "datasets" ],
        "summary" : "Retrieve a dataset.",
        "description" : "",
        "operationId" : "getDataset",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/DatasetSummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "datasets" ],
        "summary" : "Replace an existing dataset or create a new dataset",
        "description" : "",
        "operationId" : "replaceDataset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatasetPutRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset replaced successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "datasets" ],
        "summary" : "Delete a dataset.",
        "description" : "",
        "operationId" : "deleteDataset",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset has been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "datasets" ],
        "summary" : "Update an existing dataset.",
        "description" : "",
        "operationId" : "patchDataset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatasetPatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/dois/{doi}" : {
      "put" : {
        "tags" : [ "DOIs" ],
        "summary" : "Create dataset DOI",
        "description" : "",
        "operationId" : "addDoi",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "doi",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "DOI successfully added to dataset.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "DOIs" ],
        "summary" : "Delete dataset DOI",
        "description" : "",
        "operationId" : "deleteDoi",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "doi",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "DOI successfully removed from dataset.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/files" : {
      "post" : {
        "tags" : [ "datasets" ],
        "summary" : "Add or update files for a dataset.",
        "description" : "",
        "operationId" : "addFilesBySource",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FileBatchUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset successfully updated with new sources. Sync in progress.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "datasets" ],
        "summary" : "Delete files for a dataset.",
        "description" : "",
        "operationId" : "deleteFilesAndSyncSources",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset file(s) have been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/files/{file}" : {
      "delete" : {
        "tags" : [ "datasets" ],
        "summary" : "Delete a single file for a dataset.",
        "description" : "",
        "operationId" : "deleteFileAndSyncSource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "path",
          "description" : "Filename",
          "required" : true,
          "type" : "string",
          "maxItems" : 128,
          "minItems" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset file(s) have been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/files/{file}/metadata" : {
      "get" : {
        "tags" : [ "datasets" ],
        "summary" : "Get file description and labels",
        "description" : "Get file description and labels",
        "operationId" : "getFileMetadata",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved metadata of file.",
            "schema" : {
              "$ref" : "#/definitions/FileMetadataResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "datasets" ],
        "summary" : "Replace file description and labels",
        "description" : "Replace file description and labels",
        "operationId" : "putFileMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FileMetadataUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully replaced metadata of file.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "datasets" ],
        "summary" : "Update file description and labels",
        "description" : "Update file description and labels",
        "operationId" : "patchFileMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FileMetadataUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated metadata of file.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/queries" : {
      "get" : {
        "tags" : [ "datasets" ],
        "summary" : "Retrieve queries saved in a dataset.",
        "description" : "",
        "operationId" : "getDatasetQueries",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved queries saved in a dataset.",
            "schema" : {
              "$ref" : "#/definitions/PaginatedQueryResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "datasets" ],
        "summary" : "Create a saved query for a dataset",
        "description" : "",
        "operationId" : "createSavedQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateQueryRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully created saved query.",
            "schema" : {
              "$ref" : "#/definitions/QuerySummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/queries/{queryId}" : {
      "put" : {
        "tags" : [ "datasets" ],
        "summary" : "Update a saved query for a dataset",
        "description" : "",
        "operationId" : "updateSavedQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QueryPutRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated saved query.",
            "schema" : {
              "$ref" : "#/definitions/QuerySummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "datasets" ],
        "summary" : "Delete a saved query for a dataset",
        "description" : "",
        "operationId" : "deleteSavedQuery",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted saved query.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/sync" : {
      "get" : {
        "tags" : [ "datasets" ],
        "summary" : "Fetch latest files from source and update dataset — via GET, for convenience.",
        "description" : "",
        "operationId" : "syncViaGet",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Sync started.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "429" : {
            "description" : "Too many requests",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "datasets" ],
        "summary" : "Fetch latest files from source and update dataset.",
        "description" : "",
        "operationId" : "sync",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Sync started.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "429" : {
            "description" : "Too many requests",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/tables" : {
      "post" : {
        "tags" : [ "datasets" ],
        "summary" : "Add or update tables for a dataset.",
        "description" : "",
        "operationId" : "addTables",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TableBatchUpdateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset successfully updated with new sources. Sync in progress.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/v/{versionId}" : {
      "get" : {
        "tags" : [ "datasets" ],
        "summary" : "Retrieve a dataset by version.",
        "description" : "",
        "operationId" : "getDatasetByVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset version",
            "schema" : {
              "$ref" : "#/definitions/DatasetSummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/datasets/{owner}/{id}/v/{versionId}/dois/{doi}" : {
      "put" : {
        "tags" : [ "DOIs" ],
        "summary" : "Create dataset version DOI",
        "description" : "",
        "operationId" : "addVersionDoi",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "doi",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "DOI successfully added to dataset version.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "DOIs" ],
        "summary" : "Delete dataset version DOI",
        "description" : "",
        "operationId" : "deleteVersionDoi",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "doi",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "DOI successfully removed from dataset version.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/describe" : {
      "get" : {
        "tags" : [ "describe" ],
        "summary" : "SPARQL DESCRIBE query",
        "description" : "This endpoint executes a SPARQL DESCRIBE query, given an IRI.\n.",
        "operationId" : "queryViaGet",
        "produces" : [ "text/tab-separated-values", "application/rdf+json", "application/rdf+xml", "text/csv", "application/sparql-results+xml", "text/turtle", "application/sparql-results+json" ],
        "parameters" : [ {
          "name" : "iri",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "uri"
        }, {
          "name" : "queryruntoken",
          "in" : "query",
          "description" : "Query token to use with cancel",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "namespace",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request has succeeded."
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/download/{owner}/{id}" : {
      "get" : {
        "tags" : [ "download" ],
        "summary" : "Download dataset",
        "description" : "This endpoint will return a .zip of all files within the dataset.\"",
        "operationId" : "downloadDataset",
        "produces" : [ "application/zip" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "maxItems" : 32,
          "minItems" : 0
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request has succeeded."
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/file_download/{owner}/{id}/{file}" : {
      "get" : {
        "tags" : [ "download" ],
        "summary" : "Download file",
        "description" : "This endpoint will return the file from the latest dataset version.",
        "operationId" : "downloadFile",
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "maxItems" : 32,
          "minItems" : 0
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request has succeeded."
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/insights/{projectOwner}/{projectId}" : {
      "get" : {
        "tags" : [ "insights" ],
        "summary" : "Get insights for project.",
        "description" : "",
        "operationId" : "getInsightsForProject",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved project insights",
            "schema" : {
              "$ref" : "#/definitions/PaginatedInsightResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "insights" ],
        "summary" : "Create new insight for a project.",
        "description" : "",
        "operationId" : "createInsight",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InsightCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Insight created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateInsightResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/insights/{projectOwner}/{projectId}/{id}" : {
      "get" : {
        "tags" : [ "insights" ],
        "summary" : "Retrieve a project insight.",
        "description" : "",
        "operationId" : "getInsight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved insight",
            "schema" : {
              "$ref" : "#/definitions/InsightSummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "insights" ],
        "summary" : "Replace an existing insight or create a new insight.",
        "description" : "",
        "operationId" : "replaceInsight",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InsightPutRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Insight replaced successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "insights" ],
        "summary" : "Delete an insight.",
        "description" : "",
        "operationId" : "deleteInsight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Insight has been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "insights" ],
        "summary" : "Update an existing insight.",
        "description" : "",
        "operationId" : "updateInsight",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InsightPatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Insight updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/insights/{projectOwner}/{projectId}/{id}/v/{versionId}" : {
      "get" : {
        "tags" : [ "insights" ],
        "summary" : "Retrieve a project insight by version.",
        "description" : "",
        "operationId" : "getInsightByVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved insight by version.",
            "schema" : {
              "$ref" : "#/definitions/InsightSummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/analysis/suggest/{owner}/{id}" : {
      "patch" : {
        "tags" : [ "metadata/analysis" ],
        "summary" : "suggest for an existing analysis",
        "description" : "",
        "operationId" : "suggestCatalogAnalysis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MetadataSuggestRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Suggested changes to Analysis updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/analysis/{owner}" : {
      "get" : {
        "tags" : [ "metadata/analysis" ],
        "summary" : "Gets metadata analysis by owner.",
        "description" : "",
        "operationId" : "getCatalogAnalysesByOwner",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typelabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "typeiri",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved metadata analysis",
            "schema" : {
              "$ref" : "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata/analysis" ],
        "summary" : "Create a new analysis metadata.",
        "description" : "",
        "operationId" : "createCatalogAnalysis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MetadataRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Analysis Metadata created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/analysis/{owner}/{id}" : {
      "get" : {
        "tags" : [ "metadata/analysis" ],
        "summary" : "Get an individual metadata analysis",
        "description" : "",
        "operationId" : "getCatalogAnalysis",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetadataResourceDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "metadata/analysis" ],
        "summary" : "Replace an existing analysis",
        "description" : "",
        "operationId" : "replaceCatalogAnalysis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MetadataRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Analysis replaced successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "metadata/analysis" ],
        "summary" : "Delete an Analysis.",
        "description" : "",
        "operationId" : "deleteCatalogAnalysis",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Analysis has been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "metadata/analysis" ],
        "summary" : "Update an existing analysis.",
        "description" : "",
        "operationId" : "patchCatalogAnalysis",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MetadataRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Analysis updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/collections/{owner}" : {
      "get" : {
        "tags" : [ "metadata/collections" ],
        "summary" : "Gets collections owned by specified owner",
        "description" : "",
        "operationId" : "getCatalogs",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved collections",
            "schema" : {
              "$ref" : "#/definitions/PaginatedSearchResultsDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata/collections" ],
        "summary" : "Creates a new collection",
        "description" : "",
        "operationId" : "createCatalog",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/metadata/collections/{owner}/{id}" : {
      "get" : {
        "tags" : [ "metadata/collections" ],
        "summary" : "Gets a collection by ID",
        "description" : "",
        "operationId" : "getCatalog",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved collection",
            "schema" : {
              "$ref" : "#/definitions/MetadataResourceDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "metadata/collections" ],
        "summary" : "Replaces a collection",
        "description" : "",
        "operationId" : "replaceCatalog",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "metadata/collections" ],
        "summary" : "Deletes a collection",
        "description" : "",
        "operationId" : "deleteCatalog",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "metadata/collections" ],
        "summary" : "Updates a collection",
        "description" : "",
        "operationId" : "updateCatalog",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Collection created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/metadata/data/sources/suggest/{owner}/{sourceid}/tables/{tableid}" : {
      "patch" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "suggest for an existing table.",
        "description" : "",
        "operationId" : "suggestCatalogTable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogTableSuggestRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Suggested changes to Table updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/data/sources/{owner}" : {
      "get" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Gets datasources by owner.",
        "description" : "",
        "operationId" : "getDatabases",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved datasource metadata",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDatabaseResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}" : {
      "get" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Get an individual datasource metadata",
        "description" : "",
        "operationId" : "getDatabase",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatabaseDbo"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}/tables" : {
      "get" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Get tables for a data source",
        "description" : "",
        "operationId" : "getTables",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typelabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "typeiri",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved tables metadata",
            "schema" : {
              "$ref" : "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Create a new table metadata.",
        "description" : "",
        "operationId" : "createCatalogTable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogTableRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table Metadata created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}" : {
      "get" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Get an individual table metadata",
        "description" : "",
        "operationId" : "getTable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetadataResourceDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Replace an existing table",
        "description" : "",
        "operationId" : "replaceCatalogTable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogTableRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table replaced successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Delete a table.",
        "description" : "",
        "operationId" : "deleteCatalogTable",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Table has been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Update an existing table.",
        "description" : "",
        "operationId" : "patchCatalogTable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogTableRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns" : {
      "get" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Get columns for a given table",
        "description" : "",
        "operationId" : "getTableColumns",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved metadata analysis",
            "schema" : {
              "$ref" : "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Create a Column.",
        "description" : "",
        "operationId" : "createCatalogColumn",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogColumnRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column Metadata created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}" : {
      "get" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Get an individual column metadata",
        "description" : "",
        "operationId" : "getTableColumn",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "columnid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetadataResourceDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Replace an existing column",
        "description" : "",
        "operationId" : "replaceCatalogColumn",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "columnid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogColumnRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column replaced successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Delete a Column.",
        "description" : "",
        "operationId" : "deleteCatalogColumn",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "columnid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Column has been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "metadata/data/sources" ],
        "summary" : "Update an existing Column.",
        "description" : "",
        "operationId" : "patchCatalogColumn",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "id of the user or organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceid",
          "in" : "path",
          "description" : "database source id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "columnid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogColumnRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/glossary/suggest/{owner}/{id}" : {
      "patch" : {
        "tags" : [ "metadata/glossary" ],
        "summary" : "suggest for an existing glossary.",
        "description" : "",
        "operationId" : "suggestCatalogGlossary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogGlossarySuggestRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Suggested changes to Glossary updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/glossary/{owner}" : {
      "get" : {
        "tags" : [ "metadata/glossary" ],
        "summary" : "Gets metadata glossary by owner.",
        "description" : "",
        "operationId" : "getCatalogGlossariesByOwner",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "typelabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "typeiri",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved metadata glossary",
            "schema" : {
              "$ref" : "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "metadata/glossary" ],
        "summary" : "Create a new glossary metadata.",
        "description" : "",
        "operationId" : "createCatalogGlossary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogGlossaryRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Glossary Metadata created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/glossary/{owner}/{id}" : {
      "get" : {
        "tags" : [ "metadata/glossary" ],
        "summary" : "Get an individual metadata glossary",
        "description" : "",
        "operationId" : "getCatalogGlossary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MetadataResourceDto"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "metadata/glossary" ],
        "summary" : "Replace an existing glossary",
        "description" : "",
        "operationId" : "replaceCatalogGlossary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogGlossaryRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Glossary replaced successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "metadata/glossary" ],
        "summary" : "Delete a Glossary.",
        "description" : "",
        "operationId" : "deleteCatalogGlossary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Glossary has been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "metadata/glossary" ],
        "summary" : "Update an existing glossary.",
        "description" : "",
        "operationId" : "patchCatalogGlossary",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CatalogGlossaryRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Glossary updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/metadata/relationships/{owner}" : {
      "post" : {
        "tags" : [ "metadata/relationships" ],
        "summary" : "Creates a relationship between two catalog resources",
        "description" : "",
        "operationId" : "createRelationship",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RelationshipCreateOrDeleteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EditActivitiesResultDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/metadata/relationships/{owner}/delete" : {
      "post" : {
        "tags" : [ "metadata/relationships" ],
        "summary" : "Deletes a relationship between two catalog resources",
        "description" : "",
        "operationId" : "deleteRelationship",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RelationshipCreateOrDeleteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EditActivitiesResultDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/metadata/relationships/{owner}/resource/{resourceId}" : {
      "post" : {
        "tags" : [ "metadata/relationships" ],
        "summary" : "Get resources that are related to a resource",
        "description" : "",
        "operationId" : "getRelationships",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "ID of organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RelationshipGetRequest"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/metadata/relationships/{owner}/table/{sourceId}/{tableId}" : {
      "post" : {
        "tags" : [ "metadata/relationships" ],
        "summary" : "Get resources that are related to a table",
        "description" : "",
        "operationId" : "getTableRelationships",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "description" : "ID of organization",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sourceId",
          "in" : "path",
          "description" : "ID of dataset that the table is in",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tableId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RelationshipGetTableRequest"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/metadata/{owner}/resources/properties/clear" : {
      "put" : {
        "tags" : [ "metadata" ],
        "summary" : "Clear all edits on specified properties from a resource",
        "description" : "",
        "operationId" : "clearMetadataResourceProperties",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClearResourcePropertiesRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Properties cleared successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessageDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/partners/stitchdata/uploads/{account}" : {
      "head" : {
        "tags" : [ "partners" ],
        "summary" : "Check whether user credentials allow write access to the specified data.world account.",
        "description" : "",
        "operationId" : "stitchAuthorized",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/partners/stitchdata/uploads/{account}/{integrationName}" : {
      "post" : {
        "tags" : [ "partners" ],
        "summary" : "Create a target dataset if it doesn't exist already.",
        "description" : "",
        "operationId" : "stitchCreateDataset",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "integrationName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatasetIdentifierResponse"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/partners/stitchdata/uploads/{account}/{integrationName}/manifest" : {
      "post" : {
        "tags" : [ "partners" ],
        "summary" : "Notify data.world that new files have been uploaded to S3.",
        "description" : "",
        "operationId" : "stitchUploadManifest",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "integrationName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DatasetIdentifierResponse"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/projects/{owner}" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Gets projects by owner.",
        "description" : "",
        "operationId" : "getProjectsByOwner",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved project",
            "schema" : {
              "$ref" : "#/definitions/PaginatedProjectResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a new project.",
        "description" : "",
        "operationId" : "createProject",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProjectCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project created successfully.",
            "schema" : {
              "$ref" : "#/definitions/CreateProjectResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/projects/{owner}/{id}" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve a project.",
        "description" : "",
        "operationId" : "getProject",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved project",
            "schema" : {
              "$ref" : "#/definitions/ProjectSummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Replace an existing project or create a new project.",
        "description" : "",
        "operationId" : "replaceProject",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProjectPutRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project replaced successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a project.",
        "description" : "",
        "operationId" : "deleteProject",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project has been successfully deleted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "projects" ],
        "summary" : "Update an existing project.",
        "description" : "",
        "operationId" : "patchProject",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProjectPatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Project updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/projects/{owner}/{id}/linkedDatasets/{linkedDatasetOwner}/{linkedDatasetId}" : {
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Link a dataset to a project.",
        "description" : "",
        "operationId" : "addLinkedDataset",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "linkedDatasetOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "linkedDatasetId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset linked successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Remove a linked dataset from a project.",
        "description" : "",
        "operationId" : "removeLinkedDataset",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "linkedDatasetOwner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "linkedDatasetId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Dataset linked successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/projects/{owner}/{id}/queries" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve queries saved in a project.",
        "description" : "",
        "operationId" : "getProjectQueries",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved queries saved in a project.",
            "schema" : {
              "$ref" : "#/definitions/PaginatedQueryResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "projects" ],
        "summary" : "Create a saved query for a project",
        "description" : "",
        "operationId" : "createSavedQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateQueryRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully created saved query.",
            "schema" : {
              "$ref" : "#/definitions/QuerySummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/projects/{owner}/{id}/queries/{queryId}" : {
      "put" : {
        "tags" : [ "projects" ],
        "summary" : "Update a saved query for a project",
        "description" : "",
        "operationId" : "updateSavedQuery",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QueryPutRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated saved query.",
            "schema" : {
              "$ref" : "#/definitions/QuerySummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "projects" ],
        "summary" : "Delete a saved query for a project",
        "description" : "",
        "operationId" : "deleteSavedQuery",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted saved query.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/projects/{owner}/{id}/v/{versionId}" : {
      "get" : {
        "tags" : [ "projects" ],
        "summary" : "Retrieve a project by version.",
        "description" : "",
        "operationId" : "getProjectByVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved project by version",
            "schema" : {
              "$ref" : "#/definitions/ProjectSummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/properties/{owner}" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Get properties by owner.",
        "description" : "",
        "operationId" : "getPropertiesByOwner",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "categorylabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "typelabel",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved properties",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/queries/{id}" : {
      "get" : {
        "tags" : [ "queries" ],
        "summary" : "Retrieve a query definition.",
        "description" : "",
        "operationId" : "getQuery",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved a query definition.",
            "schema" : {
              "$ref" : "#/definitions/QuerySummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/queries/{id}/results" : {
      "get" : {
        "tags" : [ "queries" ],
        "summary" : "Execute a query.",
        "description" : "",
        "operationId" : "executeQuery",
        "produces" : [ "application/json", "text/csv", "application/sparql-results+xml", "application/sparql-results+json", "text/tab-separated-values", "application/rdf+json", "text/turtle", "application/rdf+xml", "application/json-l", "application/x-ndjson", "application/trig" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "includeTableSchema",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "queryruntoken",
          "in" : "query",
          "description" : "Query token to use with cancel",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully executed a query.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "queries" ],
        "summary" : "Execute a query.",
        "description" : "",
        "operationId" : "executeQueryWithPost",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json", "text/csv", "application/sparql-results+xml", "application/sparql-results+json", "text/tab-separated-values", "application/rdf+json", "text/turtle", "application/rdf+xml", "application/json-l", "application/x-ndjson", "application/trig" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "queryruntoken",
          "in" : "query",
          "description" : "Query token to use with cancel",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SavedQueryExecutionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully executed a query.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/queries/{id}/v/{versionId}" : {
      "get" : {
        "tags" : [ "queries" ],
        "summary" : "Retrieve a versioned query definition.",
        "description" : "",
        "operationId" : "getQueryVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved a version query definition.",
            "schema" : {
              "$ref" : "#/definitions/QuerySummaryResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/requests/accept" : {
      "post" : {
        "tags" : [ "requests" ],
        "summary" : "Accept a request.",
        "description" : "",
        "operationId" : "acceptRequest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AcceptRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessageDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/requests/owner/{agentid}" : {
      "get" : {
        "tags" : [ "requests" ],
        "summary" : "Get pending resource request for specified agent",
        "description" : "",
        "operationId" : "getRequests",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "agentid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/PaginatedResultsDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/requests/reject" : {
      "post" : {
        "tags" : [ "requests" ],
        "summary" : "Reject a request",
        "description" : "",
        "operationId" : "rejectRequest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RejectRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessageDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/requests/suggest" : {
      "post" : {
        "tags" : [ "requests" ],
        "summary" : "Suggest a request.",
        "description" : "",
        "operationId" : "createResourceRequest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateResourceRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/ResourceRequestDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/requests/{requestid}" : {
      "get" : {
        "tags" : [ "requests" ],
        "summary" : "Get resource request for specified agent",
        "description" : "",
        "operationId" : "getRequest",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "requestid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/ResourceRequestDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "requests" ],
        "summary" : "Delete a request",
        "description" : "",
        "operationId" : "deleteRequest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "requestid",
          "in" : "path",
          "description" : "ID of the request to delete.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "owner",
          "in" : "query",
          "description" : "User name and unique identifier of the user or organization a resource belongs to. Only required for dataset authorization requests.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceid",
          "in" : "query",
          "description" : "Unique identifier of the resource. Only required for dataset authorization requests.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved dataset",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessageDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/search" : {
      "post" : {
        "tags" : [ "search" ],
        "summary" : "Advanced search on resources",
        "description" : "",
        "operationId" : "searchResources",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchRequest"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "hydration",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "agent" ]
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedGenericResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/search/resources" : {
      "post" : {
        "tags" : [ "search" ],
        "summary" : "Simple search on resources",
        "description" : "",
        "operationId" : "simpleSearchResources",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SimpleSearchRequest"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedGenericResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/serviceaccount/{owner}" : {
      "get" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Gets all service accounts by owner.",
        "description" : "",
        "operationId" : "getServiceAccounts",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved service accounts",
            "schema" : {
              "$ref" : "#/definitions/PaginatedServiceAccountDetails"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Create a new service account.",
        "description" : "",
        "operationId" : "createServiceAccount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceAccountCreateRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Service account created successfully.",
            "schema" : {
              "$ref" : "#/definitions/ServiceAccountCreateResponseDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/serviceaccount/{owner}/{serviceAccount}" : {
      "delete" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Delete service account",
        "description" : "",
        "operationId" : "deleteServiceAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceAccount",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted service account",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Update service account",
        "description" : "",
        "operationId" : "updateServiceAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceAccount",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceAccountUpdateDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated the service account",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/serviceaccount/{owner}/{serviceAccount}/refresh" : {
      "post" : {
        "tags" : [ "serviceaccount" ],
        "summary" : "Refresh service account token",
        "description" : "",
        "operationId" : "resetServiceAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceAccount",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceAccountRefreshTokenRequestDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully refresh service account token",
            "schema" : {
              "$ref" : "#/definitions/ServiceAccountCreateResponseDto"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/sparql/{owner}/{id}" : {
      "get" : {
        "tags" : [ "sparql" ],
        "summary" : "SPARQL query (via GET)",
        "description" : "This endpoint executes SPARQL queries against a dataset.\nNew to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .",
        "operationId" : "queryViaGet",
        "produces" : [ "text/tab-separated-values", "application/rdf+json", "application/rdf+xml", "text/csv", "application/sparql-results+xml", "text/turtle", "application/sparql-results+json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "maxItems" : 32,
          "minItems" : 0
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "query",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "queryruntoken",
          "in" : "query",
          "description" : "Query token to use with cancel",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request has succeeded."
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "sparql" ],
        "summary" : "SPARQL query",
        "description" : "This endpoint executes SPARQL queries against a dataset.\nNew to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .",
        "operationId" : "queryViaUrlEncodedPost",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "text/tab-separated-values", "application/rdf+json", "application/rdf+xml", "text/csv", "application/sparql-results+xml", "text/turtle", "application/sparql-results+json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "maxItems" : 32,
          "minItems" : 0
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "query",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "queryruntoken",
          "in" : "query",
          "description" : "Query token to use with cancel",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request has succeeded."
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/sql/{owner}/{id}" : {
      "get" : {
        "tags" : [ "sql" ],
        "summary" : "SQL query (via GET)",
        "description" : "This endpoint executes SQL queries against a dataset.\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId" : "sqlGet",
        "produces" : [ "application/x-ndjson", "application/json", "text/csv", "application/json-l" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "maxItems" : 32,
          "minItems" : 0
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "includeTableSchema",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "query",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "dialect",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "DW_SQL",
          "enum" : [ "DW_SQL", "POSTGRESQL" ]
        }, {
          "name" : "queryruntoken",
          "in" : "query",
          "description" : "Query token to use with cancel",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The request has succeeded."
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "sql" ],
        "summary" : "SQL query",
        "description" : "This endpoint executes SQL queries against a dataset.\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId" : "sqlPostWithJsonRequest",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/x-ndjson", "application/json", "text/csv", "application/json-l" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "maxItems" : 32,
          "minItems" : 0
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SqlQueryRequest"
          }
        }, {
          "name" : "dialect",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "DW_SQL",
          "enum" : [ "DW_SQL", "POSTGRESQL" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The request has succeeded."
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/sql/{owner}/{id}/describe" : {
      "post" : {
        "tags" : [ "sql" ],
        "summary" : "Describe a SQL query",
        "description" : "This endpoint describes what columns will be included if the given SQL query is performed against the specified dataset.\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId" : "sqlDescribe",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/x-ndjson", "application/json", "text/csv", "application/json-l" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "maxItems" : 32,
          "minItems" : 0
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SqlQueryRequest"
          }
        }, {
          "name" : "dialect",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "DW_SQL",
          "enum" : [ "DW_SQL", "POSTGRESQL" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The request has succeeded."
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/streams/{owner}/{id}/{streamId}" : {
      "post" : {
        "tags" : [ "streams" ],
        "summary" : "Append record(s) to a stream.",
        "description" : "",
        "operationId" : "appendRecords",
        "consumes" : [ "application/json-l", "application/json", "application/n-triples", "text/turtle", "application/rdf+xml" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "streamId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Content-Type",
          "in" : "header",
          "required" : false,
          "type" : "string",
          "default" : ""
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StreamsResource"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Record(s) accepted.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/streams/{owner}/{id}/{streamId}/records" : {
      "delete" : {
        "tags" : [ "streams" ],
        "summary" : "Delete all records uploaded to the stream.",
        "description" : "",
        "operationId" : "deleteRecords",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "streamId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Stream updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/streams/{owner}/{id}/{streamId}/schema" : {
      "get" : {
        "tags" : [ "streams" ],
        "summary" : "Get the configured record schema for a stream.",
        "description" : "",
        "operationId" : "getStreamSchema",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "streamId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved stream schema.",
            "schema" : {
              "$ref" : "#/definitions/StreamSchema"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "streams" ],
        "summary" : "Update the record schema of a stream.",
        "description" : "",
        "operationId" : "patchStreamSchema",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "streamId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StreamSchemaPatchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Stream updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/uploads/{owner}/{id}/files" : {
      "post" : {
        "tags" : [ "uploads" ],
        "summary" : "Upload one or more files to a dataset.",
        "description" : "Swagger clients will limit this method of upload to one file at a time. Other HTTP clients capable of making multipart/form-data requests can be used to upload multiple files in a single request.",
        "operationId" : "uploadFiles",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "expandArchives",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "Multipart-encoded file contents",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "File(s) uploaded successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "413" : {
            "description" : "Upload too large",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/uploads/{owner}/{id}/files/{file}" : {
      "put" : {
        "tags" : [ "uploads" ],
        "summary" : "Upload a file to a dataset.",
        "description" : "This method of upload is not supported by Swagger clients. Other HTTP clients can be used to supply the contents of the file directly in the body of the request",
        "operationId" : "uploadFile",
        "consumes" : [ "application/octet-stream", "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "path",
          "description" : "Filename",
          "required" : true,
          "type" : "string",
          "maxItems" : 128,
          "minItems" : 1
        }, {
          "name" : "expandArchive",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "File uploaded successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "413" : {
            "description" : "Upload too large",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user data.",
        "description" : "",
        "operationId" : "getUserData",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "User data returned.",
            "schema" : {
              "$ref" : "#/definitions/UserDataResponse"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/datasets/contributing" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch datasets to which the requesting user is a contributor",
        "description" : "",
        "operationId" : "fetchContributingDatasets",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDatasetResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/datasets/liked" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch datasets the requesting user likes",
        "description" : "",
        "operationId" : "fetchLikedDatasets",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDatasetResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/datasets/own" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch datasets the requesting user owns",
        "description" : "",
        "operationId" : "fetchDatasets",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedDatasetResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/organizations" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch organizations to which the requesting user is a member",
        "description" : "",
        "operationId" : "fetchOrganizations",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedUserResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/projects/contributing" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch projects to which the requesting user is a contributor",
        "description" : "",
        "operationId" : "fetchContributingProjects",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedProjectResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/projects/liked" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch projects the requesting user likes",
        "description" : "",
        "operationId" : "fetchLikedProjects",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedProjectResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/projects/own" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch projects the requesting user owns",
        "description" : "",
        "operationId" : "fetchProjects",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PaginatedProjectResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/webhooks" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Return existing webhook subscriptions.",
        "description" : "",
        "operationId" : "getWebhooks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "next",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscriptions returned successfully.",
            "schema" : {
              "$ref" : "#/definitions/PaginatedSubscriptionResults"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/webhooks/datasets/{owner}/{id}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch a webhook subscription for a dataset.",
        "description" : "",
        "operationId" : "getForDataset",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Create a webhook subscription for a dataset including objects owned by it.",
        "description" : "",
        "operationId" : "subscribeToDataset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubscriptionCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription created successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete a webhook subscription for a dataset.",
        "description" : "",
        "operationId" : "unsubscribeFromDataset",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription deleted successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/webhooks/projects/{owner}/{id}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch a webhook subscription for a project.",
        "description" : "",
        "operationId" : "getForProject",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Create a webhook subscription for a project including objects owned by it.",
        "description" : "",
        "operationId" : "subscribeToProject",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubscriptionCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription created successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete a webhook subscription for a project.",
        "description" : "",
        "operationId" : "unsubscribeFromProject",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription deleted successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/user/webhooks/users/{account}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Fetch a webhook subscription for a user account.",
        "description" : "",
        "operationId" : "getForUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription retrieved successfully.",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Create a webhook subscription for a user account including objects owned by it.",
        "description" : "",
        "operationId" : "subscribeToUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubscriptionCreateRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription created successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "422" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete a webhook subscription for a user account.",
        "description" : "",
        "operationId" : "unsubscribeFromUser",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook subscription deleted successfully.",
            "schema" : {
              "$ref" : "#/definitions/SuccessMessage"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    },
    "/users/{account}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user account info.",
        "description" : "",
        "operationId" : "getAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "User data returned.",
            "schema" : {
              "$ref" : "#/definitions/UserDataResponse"
            }
          },
          "400" : {
            "description" : "Bad request",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "404" : {
            "description" : "Not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorMessage"
            }
          }
        },
        "security" : [ {
          "oauth" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "oauth" : {
      "type" : "oauth2",
      "authorizationUrl" : "https://data.world/oauth/authorize",
      "tokenUrl" : "https://data.world/oauth/access_token",
      "flow" : "accessCode",
      "scopes" : {
        "user_api_read" : "Permission to read the data and metadata contained in datasets and data projects to which you have access.",
        "user_api_write" : "Permission to update the data and metadata contained in datasets and data projects to which you have write access.",
        "user_api_admin" : "Permission to access administrative features, including permission to delete datasets and data projects."
      }
    }
  },
  "definitions" : {
    "AcceptRequestDto" : {
      "type" : "object",
      "required" : [ "requestid" ],
      "properties" : {
        "requestid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "ID of the request to accept."
        },
        "owner" : {
          "type" : "string",
          "description" : "User name and unique identifier of the user or organization a resource belongs to. Only required for dataset authorization requests."
        },
        "resourceid" : {
          "type" : "string",
          "description" : "Unique identifier of the resource. Only required for dataset authorization requests."
        },
        "collectionIds" : {
          "type" : "array",
          "description" : "The destination catalog collections belonging to the organization that the resource is being transferred to",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "AddCustomIriPropertyContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "property", "target", "value" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "property" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "valueEntityType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AddTagContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "tag", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AddToCatalogContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "catalogIri", "entryIri", "entryType" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "catalogIri" : {
            "type" : "string"
          },
          "entryIri" : {
            "type" : "string"
          },
          "entryType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AddUsesDataFromContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "analysisIri", "tableIri" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "analysisIri" : {
            "type" : "string"
          },
          "tableIri" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AddUsesDatasetContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "analysisIri", "datasetIri" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "analysisIri" : {
            "type" : "string"
          },
          "datasetIri" : {
            "type" : "string"
          }
        }
      } ]
    },
    "AgentHydrationDto" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "avatarUrl" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "orgMode" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "AnalysisImage" : {
      "type" : "object",
      "properties" : {
        "externalUrl" : {
          "type" : "string"
        }
      }
    },
    "AssetStatus" : {
      "type" : "object",
      "properties" : {
        "assetStatusLabel" : {
          "type" : "string"
        },
        "dispositionLabel" : {
          "type" : "string"
        }
      }
    },
    "CatalogAnalysisHydrationDto" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "analysisid" : {
          "type" : "string"
        },
        "assetStatus" : {
          "$ref" : "#/definitions/AssetStatus"
        },
        "catalogs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogId"
          }
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "description" : {
          "type" : "string"
        },
        "entryTypeHierarchy" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntryType"
          }
        },
        "entryTypeLabel" : {
          "type" : "string"
        },
        "previewImage" : {
          "$ref" : "#/definitions/AnalysisImage"
        },
        "referent" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "CatalogBusinessTermHydrationDto" : {
      "type" : "object",
      "properties" : {
        "abstract_" : {
          "type" : "string"
        },
        "agentid" : {
          "type" : "string"
        },
        "assetStatus" : {
          "$ref" : "#/definitions/AssetStatus"
        },
        "businessTermid" : {
          "type" : "string"
        },
        "catalogs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogId"
          }
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "description" : {
          "type" : "string"
        },
        "entryTypeHierarchy" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntryType"
          }
        },
        "entryTypeLabel" : {
          "type" : "string"
        },
        "referent" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "CatalogColumnHydrationDto" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "assetStatus" : {
          "$ref" : "#/definitions/AssetStatus"
        },
        "columnid" : {
          "type" : "string"
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "description" : {
          "type" : "string"
        },
        "entryTypeHierarchy" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntryType"
          }
        },
        "entryTypeLabel" : {
          "type" : "string"
        },
        "referent" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "CatalogColumnRequest" : {
      "type" : "object",
      "properties" : {
        "collections" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "title" : {
          "type" : "string",
          "example" : "crypto.snowflake",
          "description" : "Title of the metadata resource. Required for POST and PUT.",
          "minLength" : 1,
          "maxLength" : 60
        },
        "typeLabel" : {
          "type" : "string",
          "example" : "Tableau dashboard",
          "description" : "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description" : {
          "type" : "string",
          "example" : "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description" : "A short, but descriptive statement about the metadata resource.",
          "minLength" : 0,
          "maxLength" : 120
        },
        "tags" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "dataType" : {
          "type" : "string",
          "example" : "BIGINT",
          "description" : "Data Type name for column. Required for POST and PUT."
        },
        "columnIndex" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "5",
          "description" : "Column index values from 1 and upwards. 0 is default."
        }
      }
    },
    "CatalogConceptHydrationDto" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "altLabel" : {
          "type" : "string"
        },
        "conceptHierarchy" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConceptEntry"
          }
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "iri" : {
          "type" : "string"
        },
        "prefLabel" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "CatalogGlossaryRequest" : {
      "type" : "object",
      "properties" : {
        "collections" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "title" : {
          "type" : "string",
          "example" : "crypto.snowflake",
          "description" : "Title of the metadata resource. Required for POST and PUT.",
          "minLength" : 1,
          "maxLength" : 60
        },
        "typeLabel" : {
          "type" : "string",
          "example" : "Tableau dashboard",
          "description" : "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description" : {
          "type" : "string",
          "example" : "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description" : "A short, but descriptive statement about the metadata resource.",
          "minLength" : 0,
          "maxLength" : 120
        },
        "tags" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        }
      }
    },
    "CatalogGlossarySuggestRequest" : {
      "type" : "object",
      "properties" : {
        "collectionsToAdd" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "collectionsToRemove" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "title" : {
          "type" : "string",
          "example" : "crypto.snowflake",
          "description" : "Title of the metadata resource. Required for POST and PUT.",
          "minLength" : 1,
          "maxLength" : 60
        },
        "typeLabel" : {
          "type" : "string",
          "example" : "Tableau dashboard",
          "description" : "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description" : {
          "type" : "string",
          "example" : "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description" : "A short, but descriptive statement about the metadata resource.",
          "minLength" : 0,
          "maxLength" : 120
        },
        "tagsToAdd" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "tagsToRemove" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "message" : {
          "type" : "string",
          "example" : "I strongly suggest",
          "description" : "Message for the suggestion",
          "minLength" : 1,
          "maxLength" : 250
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        }
      }
    },
    "CatalogHydrationDto" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "catalogid" : {
          "type" : "string"
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "description" : {
          "type" : "string"
        },
        "entryTypeHierarchy" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntryType"
          }
        },
        "entryTypeLabel" : {
          "type" : "string"
        },
        "sources" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SourceId"
          }
        },
        "title" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "CatalogId" : {
      "type" : "object",
      "required" : [ "collectionId", "owner" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "collectionId" : {
          "type" : "string"
        }
      }
    },
    "CatalogRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        }
      }
    },
    "CatalogTableHydrationDto" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "catalogs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogId"
          }
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "description" : {
          "type" : "string"
        },
        "entryTypeHierarchy" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntryType"
          }
        },
        "entryTypeLabel" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "referent" : {
          "type" : "string"
        },
        "sourceId" : {
          "$ref" : "#/definitions/SourceId"
        },
        "source" : {
          "$ref" : "#/definitions/SourceId"
        },
        "tableid" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "CatalogTableRequest" : {
      "type" : "object",
      "properties" : {
        "collections" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "title" : {
          "type" : "string",
          "example" : "crypto.snowflake",
          "description" : "Title of the metadata resource. Required for POST and PUT.",
          "minLength" : 1,
          "maxLength" : 60
        },
        "typeLabel" : {
          "type" : "string",
          "example" : "Tableau dashboard",
          "description" : "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description" : {
          "type" : "string",
          "example" : "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description" : "A short, but descriptive statement about the metadata resource.",
          "minLength" : 0,
          "maxLength" : 120
        },
        "tags" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      }
    },
    "CatalogTableSuggestRequest" : {
      "type" : "object",
      "properties" : {
        "collectionsToAdd" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "collectionsToRemove" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "title" : {
          "type" : "string",
          "example" : "crypto.snowflake",
          "description" : "Title of the metadata resource. Required for POST and PUT.",
          "minLength" : 1,
          "maxLength" : 60
        },
        "typeLabel" : {
          "type" : "string",
          "example" : "Tableau dashboard",
          "description" : "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description" : {
          "type" : "string",
          "example" : "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description" : "A short, but descriptive statement about the metadata resource.",
          "minLength" : 0,
          "maxLength" : 120
        },
        "tagsToAdd" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "tagsToRemove" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "message" : {
          "type" : "string",
          "example" : "I strongly suggest",
          "description" : "Message for the suggestion",
          "minLength" : 1,
          "maxLength" : 250
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      }
    },
    "ClearResourcePropertiesRequest" : {
      "type" : "object",
      "properties" : {
        "resource" : {
          "type" : "string",
          "description" : "A metadata resource"
        },
        "resourceType" : {
          "type" : "string",
          "description" : "Type iri of specified metadata resource"
        },
        "properties" : {
          "type" : "array",
          "description" : "Properties of the specified metadata resource",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ConceptEntry" : {
      "type" : "object",
      "properties" : {
        "altLabel" : {
          "type" : "string"
        },
        "iri" : {
          "type" : "string"
        },
        "prefLabel" : {
          "type" : "string"
        }
      }
    },
    "ConnectionDto" : {
      "type" : "object",
      "required" : [ "host", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Humanitarian_Aid",
          "description" : "Connection name",
          "minLength" : 0,
          "maxLength" : 1024,
          "pattern" : "[\\w\\_\\.-]{0,}"
        },
        "type" : {
          "type" : "string",
          "example" : "ATHENA",
          "description" : "Database Type"
        },
        "host" : {
          "type" : "string",
          "example" : "dwserver.thinktank.com",
          "description" : "Database Host"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "5432",
          "description" : "Database Port",
          "minimum" : 1.0,
          "maximum" : 65535.0
        },
        "database" : {
          "type" : "string",
          "example" : "schemadw",
          "description" : "Database/Schema Logical Name",
          "minLength" : 0,
          "maxLength" : 256,
          "pattern" : "[\\w\\_]{0,}"
        },
        "credentials" : {
          "description" : "Database Credentials",
          "$ref" : "#/definitions/DatabaseCredentials"
        },
        "sshTunnel" : {
          "description" : "ssh tunnel configuration",
          "$ref" : "#/definitions/SshTunnel"
        },
        "sslRequired" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "Is ssl required",
          "default" : false
        },
        "verifyServerCertificate" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "Should server certificate be verified",
          "default" : false
        },
        "trustedServerCertificates" : {
          "type" : "string",
          "description" : "trusted server certificates",
          "minLength" : 0,
          "maxLength" : 100000
        },
        "properties" : {
          "type" : "object",
          "description" : "Properties such as auto commit, isolation level etc.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "advancedProperties" : {
          "type" : "object",
          "description" : "Advanced properties",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ContributionActivity" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "contributionHydratables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContributionHydratable"
          }
        }
      }
    },
    "ContributionDto" : {
      "type" : "object",
      "required" : [ "activities", "activityType", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "METADATA", "DATASET" ]
        },
        "activityType" : {
          "type" : "string",
          "enum" : [ "METADATA_EDIT", "RELATIONSHIP" ]
        },
        "activities" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ContributionActivity"
          }
        }
      }
    },
    "ContributionHydratable" : {
      "type" : "object",
      "properties" : {
        "agentId" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "entityType" : {
          "type" : "string"
        }
      }
    },
    "CreateAnalysisContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "catalogIri", "name" ],
        "properties" : {
          "catalogIri" : {
            "type" : "string"
          },
          "subclass" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CreateBusinessTermContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "catalogIri", "name" ],
        "properties" : {
          "catalogIri" : {
            "type" : "string"
          },
          "subclass" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CreateDatasetContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "agentId", "datasetId", "title" ],
        "properties" : {
          "datasetIri" : {
            "type" : "string"
          },
          "agentId" : {
            "type" : "string"
          },
          "datasetId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CreateDatasetResponse" : {
      "type" : "object",
      "required" : [ "uri" ],
      "properties" : {
        "message" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 256
        },
        "uri" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "CreateExternalResourceContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "externalUrl" ],
        "properties" : {
          "entityType" : {
            "type" : "string"
          },
          "entityIri" : {
            "type" : "string"
          },
          "externalUrl" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CreateInsightResponse" : {
      "type" : "object",
      "required" : [ "uri" ],
      "properties" : {
        "message" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 256
        },
        "uri" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "CreateMissingDatasetAndLinkAnalysisContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "agentId", "analysisIri", "datasetId", "title" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "analysisIri" : {
            "type" : "string"
          },
          "agentId" : {
            "type" : "string"
          },
          "datasetId" : {
            "type" : "string"
          },
          "datasetIri" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CreateMissingDatasetAndLinkTableContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "agentId", "databaseTableIri", "datasetId", "title" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "databaseTableIri" : {
            "type" : "string"
          },
          "agentId" : {
            "type" : "string"
          },
          "datasetId" : {
            "type" : "string"
          },
          "datasetIri" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          }
        }
      } ]
    },
    "CreateProjectResponse" : {
      "type" : "object",
      "required" : [ "uri" ],
      "properties" : {
        "message" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 256
        },
        "uri" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "CreateQueryRequest" : {
      "type" : "object",
      "required" : [ "content", "language", "name" ],
      "properties" : {
        "language" : {
          "type" : "string",
          "enum" : [ "SPARQL", "SQL" ]
        },
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 128
        },
        "content" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "published" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "CreateResourceRequestDto" : {
      "type" : "object",
      "required" : [ "resource", "resourceRequestType" ],
      "properties" : {
        "resource" : {
          "type" : "string"
        },
        "granteeParty" : {
          "type" : "string"
        },
        "resourceRequestType" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "contribution" : {
          "$ref" : "#/definitions/ContributionDto"
        },
        "transferAsset" : {
          "$ref" : "#/definitions/TransferAssetDto"
        }
      }
    },
    "CreateResponse" : {
      "type" : "object",
      "required" : [ "uri" ],
      "properties" : {
        "message" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 256
        },
        "uri" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "DatabaseCredentials" : {
      "type" : "object",
      "required" : [ "user" ],
      "properties" : {
        "user" : {
          "type" : "string",
          "example" : "johnsmith",
          "description" : "user name",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "password" : {
          "type" : "string",
          "example" : "!AdHJfGgd@3#",
          "description" : "password",
          "minLength" : 0,
          "maxLength" : 16384
        }
      }
    },
    "DatabaseDbo" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "environment" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "server" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "catalog" : {
          "type" : "string"
        },
        "schema" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "DatabaseDto" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "environment" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "server" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "catalog" : {
          "type" : "string"
        },
        "schema" : {
          "type" : "string"
        },
        "created" : {
          "$ref" : "#/definitions/Instant"
        },
        "updated" : {
          "$ref" : "#/definitions/Instant"
        }
      }
    },
    "DatabaseMetadataSpecDto" : {
      "type" : "object",
      "properties" : {
        "tableSpecs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TableMetadataSpecDto"
          },
          "maxItems" : 100,
          "minItems" : 0
        }
      }
    },
    "DatabaseSourceReference" : {
      "type" : "object",
      "required" : [ "id", "owner" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "format" : "uuid"
        }
      }
    },
    "DatasetCreateRequest" : {
      "type" : "object",
      "required" : [ "title", "visibility" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileCreateRequest"
          }
        },
        "assetStatusIri" : {
          "type" : "string"
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "autoSyncInterval" : {
          "type" : "string",
          "description" : "Interval in which files should be synced",
          "enum" : [ "NEVER", "HOURLY", "DAILY", "WEEKLY" ]
        }
      }
    },
    "DatasetHydrationDto" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "datasetid" : {
          "type" : "string"
        },
        "headline" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "project" : {
          "type" : "boolean",
          "default" : false
        },
        "referent" : {
          "type" : "string"
        },
        "relationship" : {
          "$ref" : "#/definitions/ResourceRelationshipDto"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "userUpdated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "abstract" : {
          "type" : "string"
        }
      }
    },
    "DatasetIdentifier" : {
      "type" : "object",
      "required" : [ "id", "owner" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "owner" : {
          "type" : "string"
        }
      }
    },
    "DatasetIdentifierResponse" : {
      "type" : "object",
      "required" : [ "id", "owner" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        }
      }
    },
    "DatasetPatchRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "autoSyncInterval" : {
          "type" : "string",
          "description" : "Interval in which files should be synced",
          "enum" : [ "NEVER", "HOURLY", "DAILY", "WEEKLY" ]
        },
        "description" : {
          "type" : "string"
        },
        "summary" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "assetStatusIri" : {
          "type" : "string"
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      }
    },
    "DatasetPutRequest" : {
      "type" : "object",
      "required" : [ "title", "visibility" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "assetStatusIri" : {
          "type" : "string"
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      }
    },
    "DatasetSummaryResponse" : {
      "type" : "object",
      "required" : [ "accessLevel", "created", "id", "isProject", "owner", "status", "title", "updated", "version", "visibility" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "version" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "dois" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Doi"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileSummaryResponse"
          }
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "assetStatus" : {
          "$ref" : "#/definitions/AssetStatus"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "NEW", "INPROGRESS", "LOADED", "SYSTEMERROR" ]
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        },
        "accessLevel" : {
          "type" : "string",
          "enum" : [ "NONE", "DISCOVER", "READ", "WRITE", "ADMIN" ]
        },
        "versionDois" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Doi"
          }
        },
        "isProject" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Doi" : {
      "type" : "object",
      "required" : [ "created", "doi" ],
      "properties" : {
        "doi" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string"
        }
      }
    },
    "DwccSpecDto" : {
      "type" : "object",
      "properties" : {
        "sourceDatabase" : {
          "type" : "string"
        },
        "sourceSchemas" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "targetCatalog" : {
          "type" : "string"
        },
        "databaseId" : {
          "type" : "string"
        }
      }
    },
    "EditActivitiesResultDto" : {
      "type" : "object",
      "properties" : {
        "activityBatchId" : {
          "type" : "string",
          "format" : "uuid"
        },
        "timeStarted" : {
          "type" : "string"
        },
        "timeEnded" : {
          "type" : "string"
        },
        "activityResults" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "EntryType" : {
      "type" : "object",
      "properties" : {
        "label" : {
          "type" : "string"
        },
        "pluralLabel" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "ErrorMessage" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "message" : {
          "type" : "string",
          "readOnly" : true
        },
        "details" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "FileBatchUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileCreateOrUpdateRequest"
          }
        }
      }
    },
    "FileCreateOrUpdateRequest" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128,
          "pattern" : "^[^/]+$"
        },
        "source" : {
          "$ref" : "#/definitions/FileSourceCreateOrUpdateRequest"
        },
        "description" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 120
        },
        "labels" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FileCreateRequest" : {
      "type" : "object",
      "required" : [ "name", "source" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128,
          "pattern" : "^[^/]+$"
        },
        "source" : {
          "$ref" : "#/definitions/FileSourceCreateRequest"
        },
        "description" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 120
        },
        "labels" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FileMetadataResponse" : {
      "type" : "object",
      "required" : [ "created", "name", "updated" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128,
          "pattern" : "^[^/]+$"
        },
        "description" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 120
        },
        "labels" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "sizeInBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        },
        "createdBy" : {
          "type" : "string"
        },
        "updatedBy" : {
          "type" : "string"
        }
      }
    },
    "FileMetadataUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "labels" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "FileSourceCreateOrUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "url" : {
          "type" : "string",
          "format" : "uri"
        },
        "method" : {
          "type" : "string",
          "enum" : [ "GET", "POST" ]
        },
        "requestHeaders" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "requestEntity" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10000
        },
        "oauthToken" : {
          "$ref" : "#/definitions/OauthTokenReference"
        },
        "credentials" : {
          "$ref" : "#/definitions/WebCredentials"
        },
        "authorization" : {
          "$ref" : "#/definitions/WebAuthorization"
        },
        "databaseSource" : {
          "$ref" : "#/definitions/DatabaseSourceReference"
        },
        "dwccSpec" : {
          "$ref" : "#/definitions/DwccSpecDto"
        },
        "viewRequest" : {
          "$ref" : "#/definitions/ViewRequestDto"
        },
        "databaseMetadataSpec" : {
          "$ref" : "#/definitions/DatabaseMetadataSpecDto"
        },
        "dataTables" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/QueryExecutionDto"
          }
        },
        "tableSpec" : {
          "$ref" : "#/definitions/SingleTableMetadataSpecDto"
        },
        "expandArchive" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "FileSourceCreateRequest" : {
      "type" : "object",
      "properties" : {
        "url" : {
          "type" : "string",
          "format" : "uri"
        },
        "method" : {
          "type" : "string",
          "enum" : [ "GET", "POST" ]
        },
        "requestHeaders" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "requestEntity" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10000
        },
        "oauthToken" : {
          "$ref" : "#/definitions/OauthTokenReference"
        },
        "credentials" : {
          "$ref" : "#/definitions/WebCredentials"
        },
        "authorization" : {
          "$ref" : "#/definitions/WebAuthorization"
        },
        "databaseSource" : {
          "$ref" : "#/definitions/DatabaseSourceReference"
        },
        "dwccSpec" : {
          "$ref" : "#/definitions/DwccSpecDto"
        },
        "viewRequest" : {
          "$ref" : "#/definitions/ViewRequestDto"
        },
        "databaseMetadataSpec" : {
          "$ref" : "#/definitions/DatabaseMetadataSpecDto"
        },
        "dataTables" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/QueryExecutionDto"
          }
        },
        "tableSpec" : {
          "$ref" : "#/definitions/SingleTableMetadataSpecDto"
        },
        "expandArchive" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "FileSourceSummaryResponse" : {
      "type" : "object",
      "required" : [ "syncStatus" ],
      "properties" : {
        "url" : {
          "type" : "string",
          "format" : "uri"
        },
        "method" : {
          "type" : "string",
          "enum" : [ "GET", "POST" ]
        },
        "requestHeaders" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "requestEntity" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 10000
        },
        "oauthToken" : {
          "$ref" : "#/definitions/OauthTokenReference"
        },
        "credentials" : {
          "$ref" : "#/definitions/WebCredentials"
        },
        "authorization" : {
          "$ref" : "#/definitions/WebAuthorization"
        },
        "databaseSource" : {
          "$ref" : "#/definitions/DatabaseSourceReference"
        },
        "dwccSpec" : {
          "$ref" : "#/definitions/DwccSpecDto"
        },
        "viewRequest" : {
          "$ref" : "#/definitions/ViewRequestDto"
        },
        "databaseMetadataSpec" : {
          "$ref" : "#/definitions/DatabaseMetadataSpecDto"
        },
        "dataTables" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/QueryExecutionDto"
          }
        },
        "tableSpec" : {
          "$ref" : "#/definitions/SingleTableMetadataSpecDto"
        },
        "expandArchive" : {
          "type" : "boolean",
          "default" : false
        },
        "syncStatus" : {
          "type" : "string",
          "enum" : [ "NEW", "INPROGRESS", "OK", "SYSTEMERROR" ]
        },
        "syncSummary" : {
          "type" : "string"
        },
        "lastSyncStart" : {
          "type" : "string"
        },
        "lastSyncSuccess" : {
          "type" : "string"
        },
        "lastSyncFailure" : {
          "type" : "string"
        }
      }
    },
    "FileSummaryResponse" : {
      "type" : "object",
      "required" : [ "created", "name", "updated" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128,
          "pattern" : "^[^/]+$"
        },
        "sizeInBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "source" : {
          "$ref" : "#/definitions/FileSourceSummaryResponse"
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 120
        },
        "labels" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "createdBy" : {
          "type" : "string"
        },
        "updatedBy" : {
          "type" : "string"
        }
      }
    },
    "InsightBody" : {
      "type" : "object",
      "properties" : {
        "imageUrl" : {
          "type" : "string",
          "format" : "uri"
        },
        "embedUrl" : {
          "type" : "string",
          "format" : "uri"
        },
        "markdownBody" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        }
      }
    },
    "InsightCreateRequest" : {
      "type" : "object",
      "required" : [ "body", "title" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "body" : {
          "$ref" : "#/definitions/InsightBody"
        },
        "sourceLink" : {
          "type" : "string",
          "format" : "uri"
        },
        "dataSourceLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "thumbnail" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "InsightHydrationDto" : {
      "type" : "object",
      "properties" : {
        "body" : {
          "type" : "string"
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "dataset" : {
          "$ref" : "#/definitions/DatasetHydrationDto"
        },
        "datasetid" : {
          "type" : "string"
        },
        "dataSources" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "description" : {
          "type" : "string"
        },
        "insightid" : {
          "type" : "string"
        },
        "thumbnail" : {
          "type" : "string",
          "format" : "uri"
        },
        "title" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "InsightPatchRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128
        },
        "body" : {
          "$ref" : "#/definitions/InsightBody"
        },
        "description" : {
          "type" : "string"
        },
        "sourceLink" : {
          "type" : "string",
          "format" : "uri"
        },
        "dataSourceLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "thumbnail" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "InsightPutRequest" : {
      "type" : "object",
      "required" : [ "body", "title" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "body" : {
          "$ref" : "#/definitions/InsightBody"
        },
        "sourceLink" : {
          "type" : "string",
          "format" : "uri"
        },
        "dataSourceLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "thumbnail" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "InsightSummaryResponse" : {
      "type" : "object",
      "required" : [ "author", "body", "created", "id", "title", "updated", "version" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "author" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 128
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "version" : {
          "type" : "string"
        },
        "body" : {
          "$ref" : "#/definitions/InsightBody"
        },
        "sourceLink" : {
          "type" : "string",
          "format" : "uri"
        },
        "dataSourceLinks" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "thumbnail" : {
          "type" : "string",
          "format" : "uri"
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        }
      }
    },
    "Instant" : {
      "type" : "object",
      "properties" : {
        "nano" : {
          "type" : "integer",
          "format" : "int32"
        },
        "epochSecond" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "JsonNode" : {
      "type" : "object",
      "properties" : {
        "array" : {
          "type" : "boolean",
          "default" : false
        },
        "null" : {
          "type" : "boolean",
          "default" : false
        },
        "float" : {
          "type" : "boolean",
          "default" : false
        },
        "valueNode" : {
          "type" : "boolean",
          "default" : false
        },
        "containerNode" : {
          "type" : "boolean",
          "default" : false
        },
        "missingNode" : {
          "type" : "boolean",
          "default" : false
        },
        "pojo" : {
          "type" : "boolean",
          "default" : false
        },
        "integralNumber" : {
          "type" : "boolean",
          "default" : false
        },
        "floatingPointNumber" : {
          "type" : "boolean",
          "default" : false
        },
        "textual" : {
          "type" : "boolean",
          "default" : false
        },
        "bigDecimal" : {
          "type" : "boolean",
          "default" : false
        },
        "bigInteger" : {
          "type" : "boolean",
          "default" : false
        },
        "double" : {
          "type" : "boolean",
          "default" : false
        },
        "long" : {
          "type" : "boolean",
          "default" : false
        },
        "boolean" : {
          "type" : "boolean",
          "default" : false
        },
        "int" : {
          "type" : "boolean",
          "default" : false
        },
        "short" : {
          "type" : "boolean",
          "default" : false
        },
        "binary" : {
          "type" : "boolean",
          "default" : false
        },
        "object" : {
          "type" : "boolean",
          "default" : false
        },
        "nodeType" : {
          "type" : "string",
          "enum" : [ "ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING" ]
        },
        "number" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "LinkedDatasetCreateOrUpdateRequest" : {
      "type" : "object",
      "required" : [ "id", "owner" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        }
      }
    },
    "LinkedDatasetSummaryResponse" : {
      "type" : "object",
      "required" : [ "accessLevel", "created", "id", "owner", "title", "updated", "visibility" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "version" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        },
        "accessLevel" : {
          "type" : "string",
          "enum" : [ "NONE", "DISCOVER", "READ", "WRITE", "ADMIN" ]
        }
      }
    },
    "MetadataRequest" : {
      "type" : "object",
      "properties" : {
        "collections" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "title" : {
          "type" : "string",
          "example" : "crypto.snowflake",
          "description" : "Title of the metadata resource. Required for POST and PUT.",
          "minLength" : 1,
          "maxLength" : 60
        },
        "typeLabel" : {
          "type" : "string",
          "example" : "Tableau dashboard",
          "description" : "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description" : {
          "type" : "string",
          "example" : "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description" : "A short, but descriptive statement about the metadata resource.",
          "minLength" : 0,
          "maxLength" : 120
        },
        "tags" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      }
    },
    "MetadataResourceDto" : {
      "type" : "object",
      "required" : [ "created", "id", "owner", "visibility" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "typeLabel" : {
          "type" : "string"
        },
        "typeIri" : {
          "type" : "string"
        },
        "rootParentTypeLabel" : {
          "type" : "string"
        },
        "rootParentTypeIri" : {
          "type" : "string"
        },
        "table" : {
          "$ref" : "#/definitions/TableId"
        },
        "dataType" : {
          "type" : "string"
        },
        "columnIndex" : {
          "type" : "integer",
          "format" : "int32"
        },
        "owner" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "encodedIri" : {
          "type" : "string"
        },
        "summary" : {
          "type" : "string"
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "DISCOVERABLE", "OPEN", "PRIVATE" ]
        },
        "url" : {
          "type" : "string",
          "format" : "uri"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "collections" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogId"
          }
        },
        "relationshipTypes" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "externalUrls" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "assetStatus" : {
          "$ref" : "#/definitions/AssetStatus"
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "MetadataSuggestRequest" : {
      "type" : "object",
      "properties" : {
        "collectionsToAdd" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "collectionsToRemove" : {
          "type" : "array",
          "example" : "Aid Option",
          "description" : "Catalog Collection to which this metadata resource is added. Required for POST and PUT.Available catalog collection can be discovered via appropriate discovery endpoints.",
          "items" : {
            "type" : "string"
          }
        },
        "title" : {
          "type" : "string",
          "example" : "crypto.snowflake",
          "description" : "Title of the metadata resource. Required for POST and PUT.",
          "minLength" : 1,
          "maxLength" : 60
        },
        "typeLabel" : {
          "type" : "string",
          "example" : "Tableau dashboard",
          "description" : "Indicates the type of metadata resource. Some examples of valid values are Report, Tableau dashboard, Glossary, Table, Database view etc. Default values will be assumed if not provided. Defaults to Report for analysis resources, Glossary for Glossary resources, Table for Table resources and Column for Column resources. Once specified during creation, this cannot be changed via PATCH. Only a PUT can change the type "
        },
        "description" : {
          "type" : "string",
          "example" : "Aid given to charity is an option that can be exercised by individuals and corporations",
          "description" : "A short, but descriptive statement about the metadata resource.",
          "minLength" : 0,
          "maxLength" : 120
        },
        "tagsToAdd" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "tagsToRemove" : {
          "type" : "array",
          "example" : "HumanitarianAid",
          "description" : "A collection of tags to identify the relevance of metadata resource. Tags with no spaces is defacto standard",
          "items" : {
            "type" : "string"
          }
        },
        "message" : {
          "type" : "string",
          "example" : "I strongly suggest",
          "description" : "Message for the suggestion",
          "minLength" : 1,
          "maxLength" : 250
        },
        "properties" : {
          "type" : "object",
          "description" : "Custom properties for the metadata resource mapped to API BindingsCan be simple name-value string pairs or nested values for a string name. See examples for details.",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        }
      }
    },
    "OauthTokenReference" : {
      "type" : "object",
      "required" : [ "id", "owner", "site" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "site" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string",
          "format" : "uuid"
        }
      }
    },
    "PaginatedConnectionResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ConnectionDto"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedDatabaseResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DatabaseDto"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedDatasetResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DatasetSummaryResponse"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedGenericResults" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "next" : {
          "type" : "string"
        },
        "hydrations" : {
          "$ref" : "#/definitions/SearchHydrations"
        }
      }
    },
    "PaginatedInsightResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InsightSummaryResponse"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedMetadataResourceResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetadataResourceDto"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedProjectResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProjectSummaryResponse"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedQueryResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/QuerySummaryResponse"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedResultsDto" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "next" : {
          "type" : "string"
        }
      }
    },
    "PaginatedSearchResultsDto" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "next" : {
          "type" : "string"
        },
        "facets" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SearchFacetResult"
            }
          }
        },
        "hydrations" : {
          "$ref" : "#/definitions/SearchHydrations"
        }
      }
    },
    "PaginatedServiceAccountDetails" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceAccountDetailsDto"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedSubscriptionResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SubscriptionResponse"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "PaginatedUserResults" : {
      "type" : "object",
      "required" : [ "count", "records" ],
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0.0
        },
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserDataResponse"
          }
        },
        "nextPageToken" : {
          "type" : "string"
        }
      }
    },
    "ProjectCreateRequest" : {
      "type" : "object",
      "required" : [ "title", "visibility" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "objective" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileCreateRequest"
          }
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "linkedDatasets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        }
      }
    },
    "ProjectPatchRequest" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "objective" : {
          "type" : "string"
        },
        "summary" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "linkedDatasets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        }
      }
    },
    "ProjectPutRequest" : {
      "type" : "object",
      "required" : [ "title", "visibility" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "objective" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/JsonNode"
          }
        },
        "linkedDatasets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        }
      }
    },
    "ProjectSummaryResponse" : {
      "type" : "object",
      "required" : [ "accessLevel", "created", "id", "owner", "status", "title", "updated", "version", "visibility" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 60
        },
        "objective" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 120
        },
        "summary" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 25000
        },
        "version" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "license" : {
          "type" : "string",
          "enum" : [ "Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other" ]
        },
        "visibility" : {
          "type" : "string",
          "enum" : [ "OPEN", "PRIVATE" ]
        },
        "assetStatus" : {
          "$ref" : "#/definitions/AssetStatus"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "NEW", "INPROGRESS", "LOADED", "SYSTEMERROR" ]
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        },
        "accessLevel" : {
          "type" : "string",
          "enum" : [ "NONE", "DISCOVER", "READ", "WRITE", "ADMIN" ]
        },
        "files" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileSummaryResponse"
          }
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "linkedDatasets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/LinkedDatasetSummaryResponse"
          }
        }
      }
    },
    "QueryExecutionDto" : {
      "type" : "object",
      "required" : [ "query" ],
      "properties" : {
        "query" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 10000
        }
      }
    },
    "QueryParameter" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "datatype" : {
          "type" : "string"
        }
      }
    },
    "QueryPutRequest" : {
      "type" : "object",
      "required" : [ "content", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 128
        },
        "content" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1000
        },
        "published" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "QuerySummaryResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "owner" : {
          "type" : "string"
        },
        "language" : {
          "type" : "string",
          "enum" : [ "SPARQL", "SQL" ]
        },
        "name" : {
          "type" : "string"
        },
        "body" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        },
        "parameters" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/QueryParameter"
          }
        }
      }
    },
    "Range" : {
      "type" : "object",
      "properties" : {
        "endDate" : {
          "type" : "string",
          "description" : "Inclusive. Format is YYYY-MM-DD in UTC. If inputted by itself (without startDate), it will match all dates before this date and this date."
        },
        "startDate" : {
          "type" : "string",
          "description" : "Inclusive. Format is YYYY-MM-DD in UTC. If inputted by itself (without endDate),it will match all dates after this date and this date."
        }
      }
    },
    "RdfTerm" : {
      "type" : "object",
      "required" : [ "type", "value" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "literal", "uri" ]
        },
        "value" : {
          "type" : "string"
        },
        "datatype" : {
          "type" : "string",
          "readOnly" : true
        },
        "xml:lang" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "ReferenceBusinessTermContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "businessTermIri", "entityType", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "businessTermIri" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RejectRequestDto" : {
      "type" : "object",
      "required" : [ "requestid" ],
      "properties" : {
        "requestid" : {
          "type" : "string",
          "format" : "uuid",
          "description" : "ID of the request to reject."
        },
        "owner" : {
          "type" : "string",
          "description" : "User name and unique identifier of the user or organization a resource belongs to. Only required for dataset authorization requests."
        },
        "resourceid" : {
          "type" : "string",
          "description" : "Unique identifier of the resource. Only required for dataset authorization requests."
        }
      }
    },
    "RelationshipCreateOrDeleteRequest" : {
      "type" : "object",
      "required" : [ "relationshipType", "sourceId", "sourceType", "targetId", "targetType" ],
      "properties" : {
        "relationshipType" : {
          "type" : "string",
          "format" : "uri",
          "description" : "IRI of the relationship type"
        },
        "sourceDatasetId" : {
          "type" : "string",
          "description" : "If source is a table or column, populate with dataset ID that contains table."
        },
        "sourceId" : {
          "type" : "string"
        },
        "sourceTableId" : {
          "type" : "string",
          "description" : "If source is a column, populate with table ID that contains column."
        },
        "sourceType" : {
          "type" : "string",
          "description" : "Type of sourceId.",
          "enum" : [ "CATALOG", "ANALYSIS", "BUSINESS_TERM", "COLUMN", "DATA_TYPE", "DATASET", "PROJECT", "TABLE" ]
        },
        "targetDatasetId" : {
          "type" : "string",
          "description" : "If target is a table or column, populate with dataset ID that contains table."
        },
        "targetId" : {
          "type" : "string"
        },
        "targetTableId" : {
          "type" : "string",
          "description" : "If target is a column, populate with table ID that contains column."
        },
        "targetType" : {
          "type" : "string",
          "description" : "Type of targetId.",
          "enum" : [ "CATALOG", "ANALYSIS", "BUSINESS_TERM", "COLUMN", "DATA_TYPE", "DATASET", "PROJECT", "TABLE" ]
        }
      }
    },
    "RelationshipGetRequest" : {
      "type" : "object",
      "required" : [ "resourceType" ],
      "properties" : {
        "byResourceTypes" : {
          "type" : "array",
          "description" : "Filter by these resource types.",
          "items" : {
            "type" : "string",
            "enum" : [ "CATALOG", "ANALYSIS", "BUSINESS_TERM", "COLUMN", "DATA_TYPE", "DATASET", "PROJECT", "TABLE" ]
          }
        },
        "byRelationTypes" : {
          "type" : "array",
          "example" : "https://dwec.data.world/v0/usesDataFrom",
          "description" : "Filter by these relation types. Relation types should be IRIs.",
          "items" : {
            "type" : "string"
          }
        },
        "resourceType" : {
          "type" : "string",
          "description" : "The type of resourceId.",
          "enum" : [ "CATALOG", "ANALYSIS", "BUSINESS_TERM", "COLUMN", "DATA_TYPE", "DATASET", "PROJECT", "TABLE" ]
        }
      }
    },
    "RelationshipGetTableRequest" : {
      "type" : "object",
      "properties" : {
        "byResourceTypes" : {
          "type" : "array",
          "description" : "Filter by these resource types.",
          "items" : {
            "type" : "string",
            "enum" : [ "CATALOG", "ANALYSIS", "BUSINESS_TERM", "COLUMN", "DATA_TYPE", "DATASET", "PROJECT", "TABLE" ]
          }
        },
        "byRelationTypes" : {
          "type" : "array",
          "example" : "https://dwec.data.world/v0/usesDataFrom",
          "description" : "Filter by these relation types. Relation types should be IRIs.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RemoveCustomIriPropertyContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "property", "target", "value" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "property" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "valueEntityType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RemoveFromCatalogContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "catalogIri", "entryIri", "entryType" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "catalogIri" : {
            "type" : "string"
          },
          "entryIri" : {
            "type" : "string"
          },
          "entryType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RemoveTagContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "tag", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "tag" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RemoveUsesDataFromContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "analysisIri", "tableIri" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "analysisIri" : {
            "type" : "string"
          },
          "tableIri" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RemoveUsesDatasetContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "analysisIri", "datasetIri" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "analysisIri" : {
            "type" : "string"
          },
          "datasetIri" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ResourceRelationshipDto" : {
      "type" : "object",
      "properties" : {
        "contributor" : {
          "type" : "boolean",
          "default" : false
        },
        "liked" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ResourceRequestDto" : {
      "type" : "object",
      "properties" : {
        "requestid" : {
          "type" : "string",
          "format" : "uuid"
        },
        "resource" : {
          "type" : "string"
        },
        "approverParty" : {
          "type" : "string"
        },
        "requesterParty" : {
          "type" : "string"
        },
        "granteeParty" : {
          "type" : "string"
        },
        "resourceRequestType" : {
          "type" : "string"
        },
        "contribution" : {
          "$ref" : "#/definitions/ContributionDto"
        },
        "transferAsset" : {
          "$ref" : "#/definitions/TransferAssetDto"
        },
        "message" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        }
      }
    },
    "SavedQueryExecutionRequest" : {
      "type" : "object",
      "properties" : {
        "parameters" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/RdfTerm"
          }
        },
        "includeTableSchema" : {
          "type" : "boolean",
          "default" : false
        },
        "maxRows" : {
          "type" : "integer",
          "format" : "int64"
        },
        "queryRunToken" : {
          "type" : "string"
        }
      }
    },
    "SearchFacetResult" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "term" : {
          "type" : "string"
        }
      }
    },
    "SearchHydrations" : {
      "type" : "object",
      "properties" : {
        "agents" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/AgentHydrationDto"
          }
        },
        "catalogConcepts" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CatalogConceptHydrationDto"
          }
        },
        "catalogs" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CatalogHydrationDto"
          }
        },
        "catalogAnalysis" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CatalogAnalysisHydrationDto"
          }
        },
        "catalogBusinessTerms" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CatalogBusinessTermHydrationDto"
          }
        },
        "catalogTables" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CatalogTableHydrationDto"
          }
        },
        "catalogColumns" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/CatalogColumnHydrationDto"
          }
        },
        "unknownCatalogEntry" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/UnknownCatalogEntryHydrationDto"
          }
        },
        "datasets" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/DatasetHydrationDto"
          }
        },
        "insights" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/InsightHydrationDto"
          }
        }
      }
    },
    "SearchRequest" : {
      "type" : "object",
      "required" : [ "query" ],
      "properties" : {
        "query" : {
          "type" : "string"
        },
        "category" : {
          "type" : "array",
          "description" : "Filter by categories.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "catalogAnalysis", "catalogBusinessTerm", "catalogDataType", "catalogTable", "collection", "comment", "dataset", "datatable", "file", "insight", "integration", "project", "query", "unknownCatalogEntry" ]
          }
        },
        "type" : {
          "type" : "array",
          "description" : "Filter by type of metadata resource. Both IRI and label are accepted.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "owner" : {
          "type" : "array",
          "description" : "Filter by owners. Owners are identified by their IDs.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "minAccessLevel" : {
          "type" : "string",
          "description" : "Minimum access level to filter by.",
          "enum" : [ "NONE", "SAML_GATED", "DISCOVER", "MEMBER", "READ", "WRITE", "ADMIN" ]
        },
        "tag" : {
          "type" : "array",
          "description" : "Filter by tags.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "visibility" : {
          "type" : "string",
          "description" : "Filter by visibility.",
          "enum" : [ "DISCOVERABLE", "OPEN", "PRIVATE" ]
        },
        "createdRange" : {
          "description" : "Filter by range of date that the resource was created.",
          "$ref" : "#/definitions/Range"
        },
        "updatedRange" : {
          "description" : "Filter by range of date that the resource was updated.",
          "$ref" : "#/definitions/Range"
        },
        "assetStatus" : {
          "type" : "array",
          "description" : "Filter by asset status label.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ServiceAccountCreateRequestDto" : {
      "type" : "object",
      "properties" : {
        "desiredUsername" : {
          "type" : "string"
        },
        "expiryDate" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "ServiceAccountCreateResponseDto" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        },
        "active" : {
          "type" : "string"
        },
        "serviceAccountUsername" : {
          "type" : "string"
        }
      }
    },
    "ServiceAccountDetailsDto" : {
      "type" : "object",
      "properties" : {
        "desiredUsername" : {
          "type" : "string"
        },
        "expiryDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ServiceAccountRefreshTokenRequestDto" : {
      "type" : "object",
      "properties" : {
        "expiryDate" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "ServiceAccountUpdateDto" : {
      "type" : "object",
      "required" : [ "active" ],
      "properties" : {
        "active" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "SetAssetStatusContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "assetStatus", "entityType", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "assetStatus" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SetCustomIriPropertyContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "property", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "property" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SetCustomLiteralPropertyContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "property", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "property" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "valueType" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SetCustomStringPropertyContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "property", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "property" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SetDescriptionContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "description", "entityType", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SetLicense" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "license", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "license" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SetNameContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SetSummaryContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "entityType", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "summary" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SimpleSearchRequest" : {
      "type" : "object",
      "required" : [ "query" ],
      "properties" : {
        "query" : {
          "type" : "string"
        },
        "owner" : {
          "type" : "array",
          "description" : "Filter by owners. Owners are identified by their IDs.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "category" : {
          "type" : "array",
          "description" : "Filter by categories.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "catalogAnalysis", "catalogBusinessTerm", "catalogDataType", "catalogTable", "collection", "comment", "dataset", "datatable", "file", "insight", "integration", "project", "query", "unknownCatalogEntry" ]
          }
        },
        "includeCommunityResults" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "SingleTableMetadataSpecDto" : {
      "type" : "object",
      "properties" : {
        "database" : {
          "type" : "string"
        },
        "schema" : {
          "type" : "string"
        },
        "table" : {
          "type" : "string"
        },
        "tableType" : {
          "type" : "string",
          "enum" : [ "EXTRACT", "VIRTUAL" ]
        }
      }
    },
    "SourceId" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "sourceid" : {
          "type" : "string"
        }
      }
    },
    "SqlQueryRequest" : {
      "type" : "object",
      "required" : [ "query" ],
      "properties" : {
        "query" : {
          "type" : "string"
        },
        "includeTableSchema" : {
          "type" : "boolean",
          "default" : false
        },
        "datasetVersions" : {
          "type" : "string"
        },
        "queryRunToken" : {
          "type" : "string"
        }
      }
    },
    "SshTunnel" : {
      "type" : "object",
      "required" : [ "host", "user", "userKeyPair" ],
      "properties" : {
        "host" : {
          "type" : "string",
          "example" : "passthru.tunnel.ca",
          "description" : "ssh tunnel host"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "3454",
          "description" : "Tunnel Port",
          "minimum" : 1.0,
          "maximum" : 65535.0
        },
        "user" : {
          "type" : "string",
          "example" : "johnsmith",
          "description" : "user name",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "userKeyPair" : {
          "type" : "boolean",
          "example" : "true",
          "description" : "whether authentication is required",
          "default" : false
        }
      }
    },
    "StreamSchema" : {
      "type" : "object",
      "properties" : {
        "primaryKeyFields" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "maxItems" : 10,
          "minItems" : 1
        },
        "sequenceField" : {
          "type" : "string"
        }
      }
    },
    "StreamSchemaPatchRequest" : {
      "type" : "object",
      "required" : [ "updateMethod" ],
      "properties" : {
        "updateMethod" : {
          "type" : "string",
          "enum" : [ "TRUNCATE" ]
        },
        "primaryKeyFields" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "sequenceField" : {
          "type" : "string"
        }
      }
    },
    "StreamsResource" : {
      "type" : "object"
    },
    "Subscription" : {
      "type" : "object",
      "required" : [ "events" ],
      "properties" : {
        "user" : {
          "$ref" : "#/definitions/UserIdentifier"
        },
        "events" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "ALL" ]
          }
        },
        "dataset" : {
          "$ref" : "#/definitions/DatasetIdentifier"
        },
        "project" : {
          "$ref" : "#/definitions/DatasetIdentifier"
        }
      }
    },
    "SubscriptionApiLinks" : {
      "type" : "object",
      "required" : [ "self" ],
      "properties" : {
        "self" : {
          "type" : "string",
          "format" : "uri"
        }
      }
    },
    "SubscriptionCreateRequest" : {
      "type" : "object",
      "required" : [ "events" ],
      "properties" : {
        "events" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "ALL" ]
          },
          "maxItems" : 50,
          "minItems" : 1
        }
      }
    },
    "SubscriptionLinks" : {
      "type" : "object",
      "required" : [ "api" ],
      "properties" : {
        "api" : {
          "$ref" : "#/definitions/SubscriptionApiLinks"
        }
      }
    },
    "SubscriptionResponse" : {
      "type" : "object",
      "required" : [ "events" ],
      "properties" : {
        "dataset" : {
          "$ref" : "#/definitions/DatasetIdentifierResponse"
        },
        "project" : {
          "$ref" : "#/definitions/DatasetIdentifierResponse"
        },
        "user" : {
          "$ref" : "#/definitions/UserIdentifierResponse"
        },
        "events" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "ALL" ]
          }
        },
        "links" : {
          "$ref" : "#/definitions/SubscriptionLinks"
        }
      }
    },
    "SuccessMessage" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 256
        }
      }
    },
    "SuccessMessageDto" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 256
        }
      }
    },
    "TableBatchUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "tables" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FileCreateOrUpdateRequest"
          }
        }
      }
    },
    "TableId" : {
      "type" : "object",
      "required" : [ "owner", "sourceId", "tableId" ],
      "properties" : {
        "owner" : {
          "type" : "string"
        },
        "sourceId" : {
          "type" : "string"
        },
        "tableId" : {
          "type" : "string"
        }
      }
    },
    "TableMetadataSpecDto" : {
      "type" : "object",
      "properties" : {
        "database" : {
          "type" : "string"
        },
        "schema" : {
          "type" : "string"
        },
        "tables" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tablePrefixes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "tableTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "TABLE", "EXTERNAL_TABLE", "VIEW" ]
          }
        }
      }
    },
    "Tag" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "minLength" : 2,
          "maxLength" : 25,
          "pattern" : "[a-zA-Z0-9\\s]*"
        }
      }
    },
    "TransferAssetDto" : {
      "type" : "object",
      "properties" : {
        "entityType" : {
          "type" : "string"
        },
        "iri" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        }
      }
    },
    "UnknownCatalogEntryHydrationDto" : {
      "type" : "object",
      "properties" : {
        "agentid" : {
          "type" : "string"
        },
        "assetStatus" : {
          "$ref" : "#/definitions/AssetStatus"
        },
        "catalogs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CatalogId"
          }
        },
        "createdBy" : {
          "$ref" : "#/definitions/AgentHydrationDto"
        },
        "description" : {
          "type" : "string"
        },
        "entryTypeHierarchy" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EntryType"
          }
        },
        "entryTypeLabel" : {
          "type" : "string"
        },
        "identifier" : {
          "type" : "string"
        },
        "referent" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "UnreferenceBusinessTermContribution" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ContributionActivity"
      }, {
        "type" : "object",
        "required" : [ "businessTermIri", "entityType", "target" ],
        "properties" : {
          "overrideType" : {
            "type" : "string",
            "enum" : [ "SET", "ADD", "REMOVE" ]
          },
          "entityType" : {
            "type" : "string"
          },
          "target" : {
            "type" : "string"
          },
          "businessTermIri" : {
            "type" : "string"
          }
        }
      } ]
    },
    "UserDataResponse" : {
      "type" : "object",
      "required" : [ "created", "id", "updated" ],
      "properties" : {
        "avatarUrl" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 256
        },
        "displayName" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 128
        },
        "id" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        }
      }
    },
    "UserIdentifier" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string"
        }
      }
    },
    "UserIdentifierResponse" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string"
        }
      }
    },
    "ViewRequestDto" : {
      "type" : "object",
      "required" : [ "baseAgentId", "baseDatasetId", "queryName", "queryType", "runAsAgentId", "targetAgentId", "targetDatasetId" ],
      "properties" : {
        "queryName" : {
          "type" : "string"
        },
        "runAsAgentId" : {
          "type" : "string"
        },
        "baseAgentId" : {
          "type" : "string"
        },
        "baseDatasetId" : {
          "type" : "string"
        },
        "queryId" : {
          "type" : "string",
          "format" : "uuid"
        },
        "queryText" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 10000
        },
        "queryType" : {
          "type" : "string",
          "enum" : [ "SPARQL", "SQL" ]
        },
        "targetAgentId" : {
          "type" : "string"
        },
        "targetDatasetId" : {
          "type" : "string"
        }
      }
    },
    "WebAuthorization" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 50
        },
        "credentials" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 1024
        }
      }
    },
    "WebCredentials" : {
      "type" : "object",
      "required" : [ "user" ],
      "properties" : {
        "user" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        },
        "password" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 1024
        }
      }
    }
  }
}