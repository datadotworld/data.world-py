{
  "swagger": "2.0",
  "info": {
    "version": "0.14.1",
    "title": "data.world API",
    "termsOfService": "https://data.world/terms",
    "contact": {
      "name": "data.world",
      "url": "https://data.world",
      "email": "help@data.world"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "description": "data.world is designed for data and the people who work with data.  From professional projects to open data, data.world helps you host and share your data, collaborate with your team, and capture context and conclusions as you work.  \nUsing this API users are able to easily access data and manage their data projects regardless of language or tool of preference. \nCheck out our [documentation](https://dwapi.apidocs.io) for tips on how to get started, tutorials and to interact with the API right within your browser.",
    "x-stoplight": {
      "id": "data-world/specs/data-world"
    }
  },
  "host": "api.data.world",
  "basePath": "/v0",
  "tags": [
    {
      "name": "datasets"
    },
    {
      "name": "download"
    },
    {
      "name": "uploads"
    },
    {
      "name": "sparql"
    },
    {
      "name": "sql"
    },
    {
      "name": "user"
    },
    {
      "name": "streams"
    },
    {
      "name": "projects"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/streams/{owner}/{id}/{streamId}": {
      "post": {
        "tags": [
          "streams"
        ],
        "summary": "Append records to a stream.",
        "operationId": "appendRecords",
        "consumes": [
          "application/json-l",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/streamId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            },
            "x-examples": {
              "application/json": "{\r\n  \"someProperty\": \"someValue\",\r\n  \"aNumericProperty\": 42,\r\n  \"aBooleanProperty\": false\r\n}"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Record(s) accepted."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "This endpoint appends JSON data to a stream associated with a dataset. Streams don't need to be created before you can append data to it. They will be created on-demand, the first time they are used.\n\nMultiple records can be appended at once by using JSON-L (`application/json-l`) as the request content type.\n\nCurrently, data uploaded to a dataset via a stream is not immediatelly processed. Instead, it is processed automatically at least once a day or as a result of a \"Sync files\" endpoint invocation.\n\nOnce processed, the contents of a stream will appear as part of the respective dataset as a `.jsonl` file (e.g. `my-stream` will produce a file named `my-stream.jsonl`)."
      }
    },
    "/download/{owner}/{id}": {
      "get": {
        "tags": [
          "download"
        ],
        "summary": "Download dataset",
        "description": "This endpoint will return a .zip containing all files within the dataset as originally uploaded.  \nIf you are interested retrieving clean data extracted from those files by data.world, check out `GET:/sql` and `GET:/sparql`.",
        "operationId": "downloadDataset",
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/file_download/{owner}/{id}/{file}": {
      "get": {
        "tags": [
          "download"
        ],
        "summary": "Download file",
        "description": "This endpoint will return a file within the dataset as originally uploaded.  \nIf you are interested retrieving clean data extracted from those files by data.world, check out `GET:/sql` and `GET:/sparql`.",
        "operationId": "downloadFile",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/file"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/sparql/{owner}/{id}": {
      "get": {
        "tags": [
          "sparql"
        ],
        "summary": "SPARQL query (via GET)",
        "description": "This endpoint executes SPARQL queries against a dataset or data project.\n\nSPARQL results are available in a variety of formats. By default, `application/sparql-results+json` will be returned. Set the `Accept` header to one of the following values in accordance with your preference:\n\n- `application/sparql-results+xml`\n- `application/sparql-results+json`\n- `application/rdf+json`\n- `application/rdf+xml`\n- `text/csv`\n- `text/tab-separated-values`\n\nNew to SPARQL? Check out data.world’s[SPARQL tutorial](https://docs.data.world/tutorials/sparql/).",
        "operationId": "sparqlGet",
        "produces": [
          "application/sparql-results+json",
          "application/sparql-results+xml",
          "application/rdf+json",
          "application/rdf+xml",
          "text/tab-separated-values",
          "text/csv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "sparql"
        ],
        "summary": "SPARQL query",
        "description": "This endpoint executes SPARQL queries against a dataset or data project.  \n\nSPARQL results are available in a variety of formats. By default, `application/sparql-results+json` will be returned. Set the `Accept` header to one of the following values in accordance with your preference:\n\n- `application/sparql-results+xml`\n- `application/sparql-results+json`\n- `application/rdf+json`\n- `application/rdf+xml`\n- `text/csv`\n- `text/tab-separated-values`\n\nNew to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/).",
        "operationId": "sparqlPost",
        "produces": [
          "application/sparql-results+json",
          "application/sparql-results+xml",
          "application/rdf+json",
          "application/rdf+xml",
          "text/tab-separated-values",
          "text/csv"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/formQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded.",
            "examples": {
              "application/x-www-form-urlencoded": "{}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/sql/{owner}/{id}": {
      "get": {
        "tags": [
          "sql"
        ],
        "summary": "SQL query (via GET)",
        "description": "This endpoint executes SQL queries against a dataset.\n\nSQL results are available in a variety of formats. By default, `application/json` will be returned. Set the `Accept` header to one of the following values in accordance with your preference:\n\n* `text/csv`\n* `application/json`\n* `application/json-l`\n* `application/x-ndjson`\n\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId": "sqlGet",
        "produces": [
          "application/json",
          "application/json-l",
          "application/x-ndjson",
          "text/csv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/includeTableSchema"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "sql"
        ],
        "summary": "SQL query",
        "description": "This endpoint executes SQL queries against a dataset.\n\nSQL results are available in a variety of formats. By default, `application/json` will be returned. Set the `Accept` header to one of the following values in accordance with your preference:\n\n* `text/csv`\n* `application/json`\n* `application/json-l`\n* `application/x-ndjson`\n\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId": "sqlPost",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/json-l",
          "application/x-ndjson",
          "text/csv"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/formQuery"
          },
          {
            "$ref": "#/parameters/includeTableSchema"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/datasets/{owner}": {
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Create a dataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetCreateRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"title\": \"data.world basketball team\",\r\n  \"description\": \"Fake data.world basketball team players and stats\",\r\n  \"summary\": \"This dataset involves some fake information about the totally fake data.world intramural basketball team.\",\r\n  \"tags\": [\r\n    \"sports\", \"datadotworld\", \"basketball\"\r\n  ],\r\n  \"license\": \"PDDL\",\r\n  \"visibility\": \"OPEN\",\r\n  \"files\": [\r\n    {\r\n      \"name\": \"DataDotWorldBBallTeam.csv\",\r\n      \"source\": {\r\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\r\n      },\r\n      \"description\": \"Stats about about our purely fictitious basketball team\",\r\n      \"labels\": [\r\n        \"raw data\", \"clean data\"\r\n      ]\r\n    }\r\n  ]\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CreateDatasetResponse"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "409": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**CONFLICT**\nThe request could not be completed due to a conflict with the current state of the resource.\nFor example, this may occur for a short period of time after deleting a dataset with the same datasetId as the dataset being created."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "description": "Create a new dataset.",
        "operationId": "createDataset"
      }
    },
    "/datasets/{owner}/{id}": {
      "delete": {
        "tags": [
          "datasets"
        ],
        "operationId": "deleteDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully deleted.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Permanently deletes a dataset and all data associated with it. This operation cannot be undone, although a new dataset may be created with the same id.",
        "summary": "Delete a dataset"
      },
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Retrieve a dataset",
        "operationId": "getDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetSummaryResponse"
            },
            "examples": {
              "application/json": {
                "owner": "sya",
                "id": "trumpworld",
                "title": "TrumpWorld",
                "description": "TrumpWorld Data",
                "summary": "From the Buzzfeed article [Help Us Map TrumpWorld](https://www.buzzfeed.com/johntemplon/help-us-map-trumpworld)\n>No American president has taken office with a giant network of businesses, investments, and corporate connections like that amassed by Donald J. Trump. His family and advisers have touched a staggering number of ventures, from a hotel in Azerbaijan to a poker company in Las Vegas.\n\n\nCheck out the data.world docs on how to Upload & sync files from [**Google Sheets**](https://docs.data.world/documentation/api/googleSync.html) and [**Github**](https://docs.data.world/documentation/api/githubSync.html)   \n\n\nSource: [github.com/BuzzFeedNews](https://github.com/BuzzFeedNews/trumpworld/tree/master/data)   \n\n_If you have suggestions for expanding or improving the dataset, please email trump@buzzfeed.com. If you’d like to send your tip securely and anonymously, see these [instructions](https://tips.buzzfeed.com/)._",
                "tags": [
                  "trump",
                  "trump world",
                  "president",
                  "connections",
                  "swamp",
                  "business network"
                ],
                "visibility": "OPEN",
                "files": [
                  {
                    "name": "org-org-connections.csv",
                    "sizeInBytes": 97658,
                    "source": {
                      "id": "bfbac3bb-9cec-410a-9ac4-c904a56d65fe",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/org-org-connections.csv",
                      "syncStatus": "OK",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.258Z",
                      "lastSyncFailure": "2017-02-01T23:47:47.667Z"
                    },
                    "created": "2017-02-01T23:45:12.379Z",
                    "updated": "2017-02-03T16:05:03.241Z"
                  },
                  {
                    "name": "person-org-connections.csv",
                    "sizeInBytes": 231637,
                    "source": {
                      "id": "91cf66e3-4bd7-422f-a8ec-7de1b68f8ee1",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-org-connections.csv",
                      "syncStatus": "OK",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.310Z"
                    },
                    "created": "2017-02-01T23:51:02.777Z",
                    "updated": "2017-02-03T16:05:03.241Z"
                  },
                  {
                    "name": "person-person-connections.csv",
                    "sizeInBytes": 32556,
                    "source": {
                      "id": "b1e0659b-c282-408a-893a-14b5e5a1ae4c",
                      "url": "https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-person-connections.csv",
                      "syncStatus": "OK",
                      "lastSyncStart": "2017-02-06T22:55:15.242Z",
                      "lastSyncSuccess": "2017-02-06T22:55:15.361Z"
                    },
                    "created": "2017-02-01T23:51:32.492Z",
                    "updated": "2017-02-03T16:05:03.241Z"
                  }
                ],
                "status": "LOADED",
                "created": "2017-02-01T22:33:58.809Z",
                "updated": "2017-02-06T22:55:19.128Z",
                "isProject": false,
                "accessLevel": "READ"
              }
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Return details on the dataset."
      },
      "put": {
        "tags": [
          "datasets"
        ],
        "operationId": "replaceDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetPutRequest"
            },
            "x-examples": {
              "application/json": "{\n  \"description\": \"2017 data.world basketball program\",\n  \"summary\": \"Fake data.world basketball team players and stats. Includes 2016 and 2017 team\",\n  \"tags\": [\n    \"basketball\"\n  ],\n  \"visibility\": \"OPEN\",\n  \"files\": [\n    {\n      \"name\": \"DataDotWorld2017BBallTeam.csv\",\n      \"source\": {\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\n      },\n      \"description\": \"Purely fictitious performance data on our purely fictitious data.world basketball team.\",\n      \"labels\": [\n        \"raw data\", \"clean data\"\n      ]\n    }\n  ]\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully replaced.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "description": "Create a dataset with a given id or completely rewrite the dataset, including any previously added files, if one already exists with the given id.",
        "summary": "Create / Replace a dataset"
      },
      "patch": {
        "tags": [
          "datasets"
        ],
        "summary": "Update a dataset",
        "operationId": "patchDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetPatchRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"description\": \"2017 data.world basketball program\",\r\n  \"summary\": \"Fake data.world basketball team players and stats. Includes 2016 and 2017 team\",\r\n  \"tags\": [\r\n    \"basketball\"\r\n  ],\r\n  \"files\": [\r\n    {\r\n      \"name\": \"DataDotWorld2017BBallTeam.csv\",\r\n      \"source\": {\r\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\r\n      },\r\n      \"description\": \"Purely fictitious performance data on our purely fictitious data.world basketball team.\",\r\n      \"labels\": [\r\n        \"raw data\", \"clean data\"\r\n      ]\r\n    }\r\n  ]\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset successfully updated.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Update an existing dataset. Note that only elements or files included in the request will be updated. All omitted elements or files will remain untouched.",
        "consumes": [
          "application/json"
        ]
      }
    },
    "/datasets/{owner}/{id}/files": {
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Add files",
        "operationId": "addFilesBySource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileBatchUpdateRequest"
            },
            "x-examples": {
              "application/json": "{\n  \"files\": [\n    {\n      \"name\": \"DataDotWorldBBallTeam.csv\",\n      \"source\": {\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\n      },\n      \"description\": \"Purely fictitious performance data on our purely fictitious data.world basketball team.\",\n      \"labels\": [\n        \"raw data\",\n        \"clean data\"\n      ]\n    },\n    {\n      \"name\": \"DataDotWorldBBallStats.csv\",\n      \"source\": {\n        \"url\": \"https://raw.githubusercontent.com/rebeccaclay/test-repo/master/DataDotWorldBBallStats.csv\"\n      },\n      \"description\": \"Stats about about our purely fictitious basketball team\",\n      \"labels\": [\n        \"raw data\",\n        \"clean data\"\n      ]\n    }\n  ]\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully updated with new sources. Sync in progress.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "This method allows files published on the web to be added to a data.world dataset via their URL. The source URL will be stored so you can easily update your file anytime it changes via the *fetch latest* link on the [data.world](https://data.world/) dataset page or by triggering the GET:/sync endpoint.  \nCheck-out or tutorials for tips on how to add Google Sheets, GitHub and S3 files via URL and how to use webhooks or scripts to keep them always in sync."
      },
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete files",
        "operationId": "deleteFilesAndSyncSources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Names of files to be deleted. Multiple can be provided in a single request by repeating the query string parameter name as many times as necessary.",
            "uniqueItems": true
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset files have been successfully deleted.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Delete one or more files from a dataset by their name, including files added via URL.   \n\n**Batching**  \nNote that the `name` parameter can be include multiple times in the query string, once for each file that is to be deleted together in a single request."
      }
    },
    "/datasets/{owner}/{id}/files/{name}": {
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete a file",
        "operationId": "deleteFileAndSyncSource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name and unique idenfiier of file within the dataset.",
            "required": true,
            "type": "string",
            "maxItems": 128,
            "minItems": 1
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset file has been successfully deleted.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Delete a single file from a dataset by their name, including files added via URL."
      }
    },
    "/datasets/{owner}/{id}/sync": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Sync files (via GET)",
        "operationId": "syncViaGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Sync started.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Update all files within a dataset that have originally been added via URL (e.g. via /datasets endpoints or on data.world). \nCheck-out or tutorials for tips on how to add Google Sheets, GitHub and S3 files via URL and how to use webhooks or scripts to keep them always in sync."
      },
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Sync files",
        "operationId": "sync",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Sync started.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Update all files within a dataset that have originally been added via URL (e.g. via /datasets endpoints or on data.world).  \nCheck-out or tutorials for tips on how to add Google Sheets, GitHub and S3 files via URL and how to use webhooks or scripts to keep them always in sync."
      }
    },
    "/uploads/{owner}/{id}/files": {
      "post": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload files",
        "description": "Upload multiple files at once to a dataset via multipart request.\n\nThis endpoint expects requests of type `multipart/form-data` and you can include one or more parts named `file`, each containing a different file to be uploaded.\n\nFor example, assuming that, you want to upload two local files named `file1.csv` and `file2.csv` to a hypothetical dataset `https://data.world/awesome-user/awesome-dataset`, this is what the cURL command would look like.\n\n```bash\ncurl \\\n  -H \"Authorization: Bearer <YOUR_API_TOKEN>\" \\\n  -F \"file=@file1.csv\" \\\n  -F \"file=@file2.csv\" \\\n  https://api.data.world/v0/uploads/awesome-user/awesome-dataset/files\n```\n\nSwagger clients will limit this method of upload to one file at a time. Other HTTP clients capable of making multipart/form-data requests can be used to upload multiple files in a single request.",
        "operationId": "uploadFiles",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Multipart-encoded file contents",
            "required": true,
            "type": "file"
          },
          {
            "in": "query",
            "name": "expandArchives",
            "type": "boolean",
            "default": false,
            "description": "Indicates whether compressed files should be expanded upon upload."
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"File(s) uploaded.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "413": {
            "description": "**PAYLOAD TOO LARGE**\nThe server is refusing to process a request because the request payload is larger than the server is willing or able to process.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/uploads/{owner}/{id}/files/{name}": {
      "put": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload file",
        "description": "Upload one file at a time to a dataset.\n\nThis endpoint expects requests of type `application/octet-stream`.\n\nFor example, assuming that you want to upload a local file named `file1.csv` to a hypothetical dataset `https://data.world/awesome-user/awesome-dataset` and choose its name on data.world to be `better-name.csv`, this is what the cURL command would look like.\n\n```bash\ncurl \\\n  -H \"Authorization: Bearer <YOUR_API_TOKEN>\" \\\n  -X PUT -H \"Content-Type: application/octet-stream\" \\\n  --data-binary @file1.csv \\\n  https://api.data.world/v0/uploads/awesome-user/awesome-dataset/files/better-name.csv\n```\n\nThis method of upload is typically not supported by Swagger clients. Other HTTP clients can be used to supply the contents of the file directly in the body of the request.",
        "operationId": "uploadFile",
        "consumes": [
          "application/octet-stream",
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "name": "name",
            "in": "path",
            "description": "File name and unique identifier within dataset.",
            "required": true,
            "type": "string",
            "maxItems": 128,
            "minItems": 1
          },
          {
            "in": "query",
            "name": "expandArchive",
            "type": "boolean",
            "default": false,
            "description": "Indicates whether a compressed file should be expanded upon upload."
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"File uploaded.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "413": {
            "description": "**PAYLOAD TOO LARGE**\nThe server is refusing to process a request because the request payload is larger than the server is willing or able to process.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user data",
        "operationId": "getUserData",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/UserDataResponse"
            },
            "examples": {
              "application/json": "{\n    \"avatarUrl\": \"https://cdn.filepicker.io/api/file/m0Y31H2NRq6byi22ApUs\",\n    \"displayName\": \"Rafael Pereira\",\n    \"id\": \"rflprr\",\n    \"created\": \"2016-06-13T22:38:29.412Z\",\n    \"updated\": \"2017-01-31T17:01:49.847Z\"\n}"
            }
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Return profile information for the currently authenticated user."
      }
    },
    "/user/datasets/contributing": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List datasets as contributor",
        "operationId": "fetchContributingDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            },
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Fetch datasets that the currently authenticated user has access to because he or she is a contributor."
      }
    },
    "/user/datasets/liked": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List liked datasets",
        "operationId": "fetchLikedDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            },
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Fetch datasets that the currently authenticated user likes."
      }
    },
    "/user/datasets/own": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List datasets as owner",
        "operationId": "fetchDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            },
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Fetch datasets that the currently authenticated user has access to because he or she is the owner of the dataset."
      }
    },
    "/projects/{owner}/{id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ProjectSummaryResponse"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "summary": "Retrieve a project",
        "operationId": "getProject",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "description": "Return details on a project."
      },
      "put": {
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ProjectCreateRequest"
            }
          },
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create / Replace a project",
        "description": "Create a project with a given id or completely rewrite the project, including any previously added files or linked datasets, if one already exists with the given id.",
        "operationId": "replaceProject",
        "security": [
          {
            "token": []
          }
        ]
      },
      "patch": {
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ProjectPatchRequest"
            }
          },
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update a project",
        "operationId": "patchProject",
        "security": [
          {
            "token": []
          }
        ],
        "description": "Update an existing project. Note that only elements, files or linked datasets included in the request will be updated. All omitted elements, files or linked datasets will remain untouched."
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "operationId": "deleteProject",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          }
        ],
        "description": "Permanently deletes a project and all data associated with it. This operation cannot be undone, although a new project may be created with the same id.",
        "summary": "Delete a project"
      }
    },
    "/projects/{owner}/{id}/linkedDatasets/{linkedDatasetOwner}/{linkedDatasetId}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "summary": "Unlink dataset",
        "operationId": "removeLinkedDataset",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          },
          {
            "name": "linkedDatasetOwner",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "linkedDatasetId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "description": "Remove a linked dataset from a project."
      },
      "put": {
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "operationId": "addLinkedDataset",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/projectOwner"
          },
          {
            "$ref": "#/parameters/projectId"
          },
          {
            "name": "linkedDatasetOwner",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "linkedDatasetId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "summary": "Link dataset",
        "description": "Add a linked dataset to a project."
      }
    },
    "/projects/{owner}": {
      "post": {
        "tags": [
          "projects"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CreateProjectResponse"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ProjectCreateRequest"
            }
          },
          {
            "$ref": "#/parameters/projectOwner"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "token": []
          }
        ],
        "operationId": "createProject",
        "summary": "Create a project",
        "description": "Create a new project."
      }
    },
    "/insights/{projectOwner}/{projectId}/{id}": {
      "get": {
        "tags": [
          "insights"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/InsightSummaryResponse"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "summary": "Retrieve an insight",
        "operationId": "getInsight",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          }
        ],
        "description": "Retrieve an insight."
      },
      "delete": {
        "tags": [
          "insights"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "summary": "Delete an insight",
        "operationId": "deleteInsight",
        "security": [
          {
            "token": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          }
        ],
        "description": "Delete an existing insight."
      },
      "put": {
        "tags": [
          "insights"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InsightPutRequest"
            }
          },
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          }
        ],
        "summary": "Replace an insight",
        "operationId": "replaceInsight",
        "security": [
          {
            "token": []
          }
        ],
        "description": "Replace an insight."
      },
      "patch": {
        "tags": [
          "insights"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InsightPatchRequest"
            }
          },
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/insightId"
          }
        ],
        "summary": "Update an insight",
        "operationId": "updateInsight",
        "security": [
          {
            "token": []
          }
        ],
        "description": "Update an insight. Note that only elements included in the request will be updated. All omitted elements will remain untouched."
      }
    },
    "/insights/{projectOwner}/{projectId}": {
      "get": {
        "tags": [
          "insights"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedInsightResults"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          }
        ],
        "operationId": "getInsightsForProject",
        "security": [
          {
            "token": []
          }
        ],
        "summary": "Get insights for project.",
        "description": "Get insights for a project."
      },
      "post": {
        "tags": [
          "insights"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CreateInsightResponse"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/InsightCreateRequest"
            }
          },
          {
            "$ref": "#/parameters/insightProjectOwner"
          },
          {
            "$ref": "#/parameters/insightProjectId"
          }
        ],
        "operationId": "createInsight",
        "security": [
          {
            "token": []
          }
        ],
        "summary": "Create an insight",
        "description": "Create a new insight."
      }
    },
    "/user/projects/own": {
      "get": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "description": "Fetch projects that the currently authenticated user has access to because he or she is the owner of the project.",
        "summary": "List projects owned",
        "operationId": "fetchProjects",
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/user/projects/liked": {
      "get": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "summary": "List liked projects",
        "description": "Fetch projects that the currently authenticated user likes.",
        "operationId": "fetchLikedProjects",
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/user/projects/contributing": {
      "get": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "produces": [
          "application/json"
        ],
        "summary": "List projects as contributor",
        "description": "Fetch projects that the currently authenticated user has access to because he or she is a contributor.",
        "operationId": "fetchContributingProjects",
        "security": [
          {
            "token": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "All data.world API calls require an API token. After logging into data.world, find your token by navigating to your profile settings, under the Advanced tab or go to [https://data.world/settings/advanced](*https://data.world/settings/advanced*)\n\nAuthentication must be provided in API requests via the `Authorization` header. For example, for a user whose API token is `my_api_token`, the request header should be `Authorization: Bearer my_api_token`."
    }
  },
  "definitions": {
    "DatasetCreateRequest": {
      "type": "object",
      "title": "Dataset Create Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60,
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        }
      },
      "required": [
        "title",
        "visibility"
      ]
    },
    "DatasetPatchRequest": {
      "type": "object",
      "title": "Dataset Update Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 0,
          "maxLength": 60,
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Updated set of files. At dataset update time, file uploads are not supported. However, this property can be used to add files from URL or update metadata related to existing files.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        }
      }
    },
    "DatasetPutRequest": {
      "type": "object",
      "title": "Dataset Replace Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60,
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        }
      },
      "required": [
        "title",
        "visibility"
      ]
    },
    "DatasetSummaryResponse": {
      "type": "object",
      "title": "Dataset Summary Response",
      "properties": {
        "owner": {
          "type": "string",
          "description": "User name and unique identifier of the creator of the dataset."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of dataset."
        },
        "title": {
          "type": "string",
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help)."
        },
        "visibility": {
          "type": "string",
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileSummaryResponse"
          }
        },
        "status": {
          "type": "string",
          "description": "Processing status of dataset.  This status can be checked periodically after changes are made to the dataset to determine the status of asynchronous processing.\n\n* `NEW`: Just created. Not yet processed.\n* `INPROGRESS`: Currently being processed.\n* `LOADED`: Successfully processed.\n* `SYSTEMERROR`: Error state due to processing failure."
        },
        "created": {
          "type": "string",
          "description": "Date and time when the dataset was created."
        },
        "updated": {
          "type": "string",
          "description": "Date and time when the dataset was last updated."
        },
        "isProject": {
          "type": "boolean",
          "description": "Every data project on data.world comes with a default dataset linked to it. This flag indicates if the dataset is a project's default dataset. "
        },
        "accessLevel": {
          "type": "string",
          "description": "The level of access the authenticated user is allowed with respect to dataset: \n\n* `NONE` Not allowed any access.  \n* `READ` Allowed to know that the dataset exists, view and download data and metadata. \n* `WRITE` Allowed to update data and metadata, in addition to what READ allows. \n* `ADMIN` Allowed to delete dataset, in addition to what WRITE allows."
        }
      },
      "required": [
        "owner",
        "id",
        "title",
        "visibility",
        "status",
        "created",
        "updated",
        "isProject",
        "accessLevel"
      ]
    },
    "ErrorMessage": {
      "type": "object",
      "title": "Error Message Response",
      "properties": {
        "code": {
          "type": "integer",
          "description": "HTTP Error Code",
          "format": "int32"
        },
        "message": {
          "type": "string",
          "description": "Human-readable error message."
        },
        "details": {
          "type": "string",
          "description": "Underlying error cause."
        }
      }
    },
    "FileBatchUpdateRequest": {
      "type": "object",
      "title": "File Create or Update Batch",
      "properties": {
        "files": {
          "type": "array",
          "description": "Updated set of files. When updating a set of files, file uploads are not supported. However, this property can be used to add files via URL or update metadata related to existing files.",
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        }
      }
    },
    "FileCreateOrUpdateRequest": {
      "type": "object",
      "title": "File Create Or Update Request",
      "description": "This model is utilized where sets of files can be specified to be added or updated (e.g. `PATCH:/dataset/{owner}` and `POST:/dataset/{owner}/{id}/files`).",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "^[^/]+$",
          "description": "File name. Should include type extension always when possible. Must not include slashes."
        },
        "source": {
          "$ref": "#/definitions/FileSourceCreateOrUpdateRequest"
        },
        "description": {
          "type": "string",
          "description": "File description.",
          "minLength": 1,
          "maxLength": 240
        },
        "labels": {
          "type": "array",
          "description": "File labels.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "raw data",
              "documentation",
              "visualization",
              "clean data",
              "script",
              "report"
            ]
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "FileCreateRequest": {
      "type": "object",
      "title": "File Create Request",
      "description": "This model is utilized where sets of files can be specified only to be added (e.g. `POST:/dataset/{owner}`).",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "^[^/]+$",
          "description": "File name. Should include type extension always when possible. Must not include slashes."
        },
        "source": {
          "$ref": "#/definitions/FileSourceCreateRequest"
        },
        "description": {
          "type": "string",
          "description": "File description.",
          "minLength": 1,
          "maxLength": 240
        },
        "labels": {
          "type": "array",
          "description": "File labels.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "raw data",
              "documentation",
              "visualization",
              "clean data",
              "script",
              "report"
            ]
          }
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "FileSourceCreateOrUpdateRequest": {
      "type": "object",
      "title": "File Source Create Or Update Request",
      "description": "This model is utilized where source URLs can be specified for files to be added or updated.",
      "properties": {
        "url": {
          "type": "string",
          "description": "Source URL of file. Must be an http, https, or stream URL.",
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^(https?|stream):.*",
          "format": "uri"
        },
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST"
          ],
          "default": "GET"
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of custom HTTP header name/value pairs to pass with the request.\n\nIf a `requestEntity` string is specified, this must contain a `Content-Type` header.\n\nAn `Authorization` header value will be converted to a `WebAuthorization` object and the credentials will be encrypted.\n\nThe total size of the url and custom headers must not exceed 4096 bytes in the HTTP request, including whitespace, colons and CRLF characters."
        },
        "requestEntity": {
          "type": "string",
          "maxLength": 10000
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "expandArchive": {
          "type": "boolean",
          "default": false,
          "description": "Indicates whether compressed files should be expanded upon upload."
        }
      },
      "required": [
        "url",
        "method"
      ]
    },
    "FileSourceCreateRequest": {
      "type": "object",
      "description": "This model is utilized where source URLs can be specified for files only to be added.",
      "title": "File Create Request",
      "properties": {
        "url": {
          "type": "string",
          "description": "Source URL of file. Must be an http, https.",
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^https?:.*",
          "format": "uri"
        },
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST"
          ],
          "default": "GET"
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of custom HTTP header name/value pairs to pass with the request.\n\nIf a `requestEntity` string is specified, this must contain a `Content-Type` header.\n\nAn `Authorization` header value will be converted to a `WebAuthorization` object and the credentials will be encrypted.\n\nThe total size of the url and custom headers must not exceed 4096 bytes in the HTTP request, including whitespace, colons and CRLF characters."
        },
        "requestEntity": {
          "type": "string",
          "maxLength": 10000
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "expandArchive": {
          "type": "boolean",
          "default": false,
          "description": "Indicates whether compressed files should be expanded upon upload."
        }
      },
      "required": [
        "url",
        "method"
      ]
    },
    "FileSourceSummaryResponse": {
      "type": "object",
      "title": "File Source Response",
      "properties": {
        "url": {
          "type": "string",
          "description": "Source URL of file. Must be an http, https, or stream URL.",
          "format": "uri"
        },
        "method": {
          "type": "string"
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of custom HTTP header name/value pairs to pass with the request.\n\nIf a `requestEntity` string is specified, this must contain a `Content-Type` header."
        },
        "requestEntity": {
          "type": "string"
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "syncStatus": {
          "type": "string",
          "description": "Synchronization status of the file.  This status can be checked periodically after changes are made to the dataset to determine the status of asynchronous syncronization.\n\n* `NEW`: Just created. Not yet synchronized.\n* `INPROGRESS`: Currently being synchronized.\n* `LOADED`: Successfully synchronized.\n* `SYSTEMERROR`: Error state due to synchronization failure."
        },
        "syncSummary": {
          "type": "string",
          "description": "Human-readable message detailing status of last failed sync."
        },
        "lastSyncStart": {
          "type": "string",
          "description": "Date and time when synchronization last started."
        },
        "lastSyncSuccess": {
          "type": "string",
          "description": "Date and time when synchronization last finished successfully."
        },
        "lastSyncFailure": {
          "type": "string",
          "description": "Date and time when synchronization last failed."
        }
      },
      "required": [
        "url",
        "method",
        "syncStatus"
      ]
    },
    "FileSummaryResponse": {
      "type": "object",
      "title": "File Summary Response",
      "properties": {
        "name": {
          "type": "string",
          "description": "File name. Should include type extension always when possible. Must not include slashes."
        },
        "source": {
          "$ref": "#/definitions/FileSourceSummaryResponse"
        },
        "description": {
          "type": "string",
          "description": "File description."
        },
        "labels": {
          "type": "array",
          "description": "File labels.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "string",
          "description": "Date and time when file was created."
        },
        "updated": {
          "type": "string",
          "description": "Date and time when file was last updated."
        }
      },
      "required": [
        "name",
        "created",
        "updated"
      ]
    },
    "SuccessMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "title": "Success Message Response"
    },
    "UserDataResponse": {
      "type": "object",
      "title": "User Data Response",
      "properties": {
        "avatarUrl": {
          "type": "string",
          "description": "URL of profile image."
        },
        "displayName": {
          "type": "string",
          "description": "User's name."
        },
        "id": {
          "type": "string",
          "description": "User name and unique identifier."
        },
        "created": {
          "type": "string",
          "description": "Date and time when account was created."
        },
        "updated": {
          "type": "string",
          "description": "Date and time when account was last updated."
        }
      },
      "required": [
        "id",
        "created",
        "updated"
      ]
    },
    "CreateDatasetResponse": {
      "type": "object",
      "title": "Dataset Create Response",
      "properties": {
        "message": {
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "URI of newly created dataset."
        }
      },
      "required": [
        "uri"
      ]
    },
    "PaginatedDatasetResults": {
      "type": "object",
      "title": "Paginated Dataset Results",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetSummaryResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "required": [
        "count",
        "records"
      ]
    },
    "ProjectCreateRequest": {
      "type": "object",
      "title": "Project Create Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 0,
          "maxLength": 60,
          "description": "Project title."
        },
        "objective": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short project objective."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form project summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Project tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Project license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Project visibility. `OPEN` if the project can be seen by any member of data.world. `PRIVATE` if the project can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Initial set of files. At project creation time, file uploads are not supported. However, this property can be used to add files from URL.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        },
        "linkedDatasets": {
          "type": "array",
          "description": "Initial set of linked datasets.",
          "items": {
            "$ref": "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        }
      },
      "required": [
        "title",
        "visibility"
      ]
    },
    "LinkedDatasetSummaryResponse": {
      "type": "object",
      "title": "Linked Dataset Summary Response",
      "properties": {
        "owner": {
          "type": "string",
          "description": "User name and unique identifier of the creator of the dataset."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of dataset."
        },
        "title": {
          "type": "string",
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help)."
        },
        "visibility": {
          "type": "string",
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "created": {
          "type": "string",
          "description": "Date and time when the dataset was created."
        },
        "updated": {
          "type": "string",
          "description": "Date and time when the dataset was last updated."
        },
        "accessLevel": {
          "type": "string",
          "description": "The level of access the authenticated user is allowed with respect to dataset: \n\n* `NONE` Not allowed any access.  \n* `READ` Allowed to know that the dataset exists, view and download data and metadata. \n* `WRITE` Allowed to update data and metadata, in addition to what READ allows. \n* `ADMIN` Allowed to delete dataset, in addition to what WRITE allows."
        }
      },
      "required": [
        "owner",
        "id",
        "title",
        "visibility",
        "created",
        "updated",
        "accessLevel"
      ]
    },
    "PaginatedProjectResults": {
      "type": "object",
      "title": "Paginated Project Results",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectSummaryResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "required": [
        "count",
        "records"
      ]
    },
    "LinkedDatasetCreateOrUpdateRequest": {
      "type": "object",
      "title": "Linked Dataset Create or Update Request",
      "properties": {
        "owner": {
          "type": "string",
          "description": "User name and unique identifier of the creator of the dataset.",
          "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of dataset.",
          "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]"
        }
      },
      "required": [
        "owner",
        "id"
      ]
    },
    "ProjectPatchRequest": {
      "type": "object",
      "title": "Project Update Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 0,
          "maxLength": 60,
          "description": "Project title."
        },
        "objective": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short project objective."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form project summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Project tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Project license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Project visibility. `OPEN` if the project can be seen by any member of data.world. `PRIVATE` if the project can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Updated set of files. At project update time, file uploads are not supported. However, this property can be used to add files from URL or update metadata related to existing files. Files included in this request will be added. Previously added files will be preserved without modification.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        },
        "linkedDatasets": {
          "type": "array",
          "description": "Updated set of linked datasets. Datasets linked in this request will be added. Previously linked datasets will be preserved without modification.",
          "items": {
            "$ref": "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        }
      }
    },
    "ProjectSummaryResponse": {
      "type": "object",
      "title": "Project Summary Response",
      "properties": {
        "title": {
          "type": "string"
        },
        "objective": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "license": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileSummaryResponse"
          }
        },
        "linkedDatasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedDatasetSummaryResponse"
          }
        },
        "visibility": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "Processing status of project. This status can be checked periodically after changes are made to the project to determine the status of asynchronous processing.\n\n* `NEW`: Just created. Not yet processed.\n* `INPROGRESS`: Currently being processed.\n* `LOADED`: Successfully processed.\n* `SYSTEMERROR`: Error state due to processing failure."
        },
        "owner": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        },
        "accessLevel": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "visibility",
        "status",
        "owner",
        "id",
        "created",
        "updated",
        "accessLevel"
      ]
    },
    "CreateProjectResponse": {
      "type": "object",
      "title": "Project Create Response",
      "properties": {
        "message": {
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "URI of newly created project."
        }
      },
      "required": [
        "uri"
      ]
    },
    "InsightCreateRequest": {
      "type": "object",
      "title": "Insight Create Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "description": "Insight title."
        },
        "description": {
          "type": "string",
          "maxLength": 150,
          "description": "Insight description."
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "sourceLink": {
          "type": "string",
          "format": "uri",
          "description": "Permalink to source code or platform this insight was generated with. Allows others to replicate the steps originally used to produce the insight."
        },
        "dataSourceLinks": {
          "type": "array",
          "format": "uri",
          "description": "One or more permalinks to the data sources used to generate this insight. Allows others to access the data originally used to produce the insight.",
          "items": {
            "format": "uri",
            "type": "string"
          }
        }
      },
      "required": [
        "body",
        "title"
      ]
    },
    "InsightPutRequest": {
      "type": "object",
      "title": "Insight Replace Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "description": "Insight title."
        },
        "description": {
          "type": "string",
          "maxLength": 150,
          "description": "Insight description."
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "sourceLink": {
          "type": "string",
          "format": "uri",
          "description": "Permalink to source code or platform this insight was generated with. Allows others to replicate the steps originally used to produce the insight."
        },
        "dataSourceLinks": {
          "type": "array",
          "format": "uri",
          "description": "One or more permalinks to the data sources used to generate this insight. Allows others to access the data originally used to produce the insight.",
          "items": {
            "format": "uri",
            "type": "string"
          }
        }
      },
      "required": [
        "body",
        "title"
      ]
    },
    "InsightSummaryResponse": {
      "type": "object",
      "title": "Insight Summary Response",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique Insight id."
        },
        "title": {
          "type": "string",
          "description": "Insight title."
        },
        "description": {
          "type": "string",
          "description": "Insight description."
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "sourceLink": {
          "type": "string",
          "format": "uri",
          "description": "Permalink to source code or platform this insight was generated with. Allows others to replicate the steps originally used to produce the insight."
        },
        "dataSourceLinks": {
          "type": "array",
          "format": "uri",
          "description": "One or more permalinks to the data sources used to generate this insight. Allows others to access the data originally used to produce the insight.",
          "items": {
            "format": "uri",
            "type": "string"
          }
        },
        "author": {
          "type": "string",
          "description": "User name of the author of the insight."
        },
        "created": {
          "type": "string",
          "description": "Date and time when insight was created."
        },
        "updated": {
          "type": "string",
          "description": "Date and time when insight was last updated."
        }
      },
      "required": [
        "id",
        "title",
        "body",
        "author",
        "created",
        "updated"
      ]
    },
    "InsightPatchRequest": {
      "type": "object",
      "title": "Insight Update Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "description": "Insight title."
        },
        "description": {
          "type": "string",
          "maxLength": 150,
          "description": "Insight description."
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "sourceLink": {
          "type": "string",
          "format": "uri",
          "description": "Permalink to source code or platform this insight was generated with. Allows others to replicate the steps originally used to produce the insight."
        },
        "dataSourceLinks": {
          "type": "array",
          "format": "uri",
          "description": "One or more permalinks to the data sources used to generate this insight. Allows others to access the data originally used to produce the insight.",
          "items": {
            "format": "uri",
            "type": "string"
          }
        }
      }
    },
    "CreateInsightResponse": {
      "type": "object",
      "title": "Insight Create Response",
      "properties": {
        "message": {
          "type": "string"
        },
        "uri": {
          "type": "string",
          "description": "URI of newly created insight."
        }
      },
      "required": [
        "uri"
      ]
    },
    "PaginatedInsightResults": {
      "type": "object",
      "title": "Paginated Insight Results",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsightSummaryResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "required": [
        "count",
        "records"
      ]
    },
    "InsightBody": {
      "title": "Insight Body",
      "type": "object",
      "description": "Defines the body of an insight. Must contain one, and only one of: `imageUrl`, `embedUrl` or `markdownBody` (deprecated).",
      "properties": {
        "imageUrl": {
          "type": "string",
          "description": "Image URL",
          "format": "uri"
        },
        "embedUrl": {
          "type": "string",
          "description": "oEmbed URL.",
          "format": "uri"
        },
        "markdownBody": {
          "type": "string",
          "description": "Markdown (deprecated)"
        }
      }
    },
    "WebCredentials": {
      "type": "object",
      "title": "Web Credentials",
      "description": "A username and password suitable for use with HTTP Basic authentication.\n\nWhen used with a File Source this causes the HTTP request to include the following header:\n```\nAuthorization: Basic <base64-encoding-of(user:password)>\n```\n\nThe `password` field is write-only.  It is omitted by read operations.",
      "properties": {
        "user": {
          "type": "string",
          "description": "The name of the account to login to.",
          "maxLength": 1024
        },
        "password": {
          "type": "string",
          "description": "The secret password.\n\nThis field is write-only. It is omitted by read operations.\n\nIf authorization is required, the `password` value must be provided whenever a File Source is created or modified. An update to a dataset that does not change the File Source may omit the `password` field--the update will preserve the previous value.",
          "maxLength": 1024
        }
      },
      "required": [
        "user"
      ]
    },
    "WebAuthorization": {
      "type": "object",
      "title": "Web Authorization",
      "description": "An authorization type and credentials suitable for use in an HTTP `Authorization` header.\n\nWhen used with a File Source this causes the HTTP request to include the following header:\n```\nAuthorization: <type> <credentials>\n```\nThe `credentials` field is write-only.  It is omitted by read operations.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The authorization scheme.\n\nUsually this is \"Bearer\" but it could be other values like \"Token\" or \"Basic\" etc.",
          "maxLength": 50,
          "pattern": "[\\x21-\\x7E \\t]*"
        },
        "credentials": {
          "type": "string",
          "description": "The confidential portion of the `Authorization` header that follows the `type` field.\n\nThis field is write-only. It is omitted by read operations.\n\nIf authorization is required, the `credentials` value must be provided whenever a File Source is created or modified. An update to a dataset that does not change the File Source may omit the `credentials` field--the update will preserve the previous value.",
          "minLength": 1,
          "maxLength": 1024,
          "pattern": "[\\x21-\\x7E \\t]*"
        }
      },
      "required": [
        "type"
      ]
    },
    "OauthTokenReference": {
      "type": "object",
      "title": "OAuth Token Reference",
      "description": "A reference to a 3rd-party OAuth 2.0 token stored by data.world.\n\nWhen creating or updating an OAuth token reference, the token must belong to the user making the update.",
      "properties": {
        "owner": {
          "type": "string",
          "minLength": 3,
          "maxLength": 31,
          "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]",
          "description": "User name of the owner of the OAuth token within data.world."
        },
        "site": {
          "type": "string",
          "minLength": 3,
          "maxLength": 255,
          "pattern": "(?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?\\.)+[a-z]{2,}(?:@[a-z0-9](?:[-.](?=[a-z0-9])|[a-z0-9]){0,29})?"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "owner",
        "site",
        "id"
      ]
    }
  },
  "security": [
    {
      "token": []
    }
  ],
  "parameters": {
    "owner": {
      "name": "owner",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "User name and unique identifier of the creator of a dataset or project.\nFor example, in the URL: [https://data.world/jonloyens/an-intro-to-dataworld-dataset](https://data.world/jonloyens/an-intro-to-dataworld-dataset), jonloyens is the unique identifier of the owner.",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]"
    },
    "datasetId": {
      "name": "id",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "Dataset unique identifier.\nFor example, in the URL:[https://data.world/jonloyens/an-intro-to-dataworld-dataset](https://data.world/jonloyens/an-intro-to-dataworld-dataset), an-intro-to-dataworld-dataset is the unique identifier of the dataset.",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]"
    },
    "file": {
      "name": "file",
      "in": "path",
      "required": true,
      "type": "string"
    },
    "formQuery": {
      "name": "query",
      "in": "formData",
      "required": true,
      "type": "string"
    },
    "includeTableSchema": {
      "name": "includeTableSchema",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "description": "Flags indicating to include table schema in the response."
    },
    "query": {
      "name": "query",
      "in": "query",
      "required": true,
      "type": "string"
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "type": "string",
      "description": "Maximum number of items to include in a page of results."
    },
    "next": {
      "name": "next",
      "in": "query",
      "type": "string",
      "description": "Token from previous result page to be used when requesting a subsequent page."
    },
    "streamId": {
      "name": "streamId",
      "in": "path",
      "type": "string",
      "description": "Stream unique identifier as defined by the user the first time the stream was used. Only lower case letters, numbers and dashes are allowed. Maximum length of 95 characters.",
      "required": true,
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9]){1,93}[a-z0-9]"
    },
    "projectOwner": {
      "name": "owner",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "User name and unique identifier of the creator of a project.\nFor example, in the URL: [https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs](https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs), government is the unique identifier of the owner.",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]"
    },
    "projectId": {
      "name": "id",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "Project unique identifier.\nFor example, in the URL:[https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs](https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs), how-to-add-depth-to-your-data-with-the-us-census-acs is the unique identifier of the project.",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]"
    },
    "insightProjectOwner": {
      "name": "projectOwner",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "User name and unique identifier of the creator of a project.\nFor example, in the URL: [https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs](https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs), `government` is the unique identifier of the owner.",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]"
    },
    "insightProjectId": {
      "name": "projectId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "User name and unique identifier of the project.\nFor example, in the URL: [https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs](https://data.world/government/how-to-add-depth-to-your-data-with-the-us-census-acs), `how-to-add-depth-to-your-data-with-the-us-census-acs` is the unique identifier of the owner.",
      "pattern": "[a-z0-9](?:-(?!-)|[a-z0-9])+[a-z0-9]"
    },
    "insightId": {
      "name": "id",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "Insight unique identifier."
    }
  }
}
