# coding: utf-8
"""
    data.world API

    data.world is designed for data and the people who work with data.
    From professional projects to open data, data.world helps you host 
    and share your data, collaborate with your team, and capture context
    and conclusions as you work. Using this API users are able to easily 
    access data and manage their data projects regardless of language or
    tool of preference. Check out our
    [documentation] (https://dwapi.apidocs.io)
    for tips on how to get started, tutorials and to interact with the API
    right within your browser.

    OpenAPI spec version: 0.14.1
    Contact: help@data.world
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import
from time import sleep
import backoff
import requests 
from requests.adapters import HTTPAdapter, BaseAdapter
from .projects_api import ProjectsApi

MAX_TRIES = 10


class ApiClient(object):
    def __init__(self, api_token, **kwargs):
        """Simple client for data.world API
        :param api_token: API Authorization Token
        :type api_token: str
        """

        # The following properties can be overwritten for testing/tuning
        self._api_url = kwargs.get('api_url', 'https://api.data.world/v0/')

        default_headers = {
            'Accept': 'application/json',
            'Authorization': 'Bearer {}'.format(api_token),
            'Content-Type': 'application/json',
            'User-Agent': 'data.world-py/2.0'
        }
        self._session = requests.Session()
        self._session.headers.update(default_headers)

        self._session.mount(self._api_url, BackoffAdapter(HTTPAdapter()))

        self.projects = ProjectsApi(self._api_url, self._session)


class BackoffAdapter(BaseAdapter):
    def __init__(self, delegate):
        """Requests adapter for retrying throttled requests (HTTP 429)
        :param delegate: Adapter to delegate final request processing to
        :type delegate: requests.adapters.BaseAdapter
        """
        self._delegate = delegate
        super(BackoffAdapter, self).__init__()

    @backoff.on_predicate(backoff.expo,
                          predicate=lambda r: r.status_code == 429,
                          max_tries=lambda: MAX_TRIES)
    def send(self, request, **kwargs):
        resp = self._delegate.send(request, **kwargs)
        if (resp.status_code == 429 and
                resp.headers.get('Retry-After')):
            sleep(int(resp.headers.get('Retry-After')))

        return resp

    def close(self):
        self._delegate.close()
