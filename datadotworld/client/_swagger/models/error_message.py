# coding: utf-8

"""
    data.world API

    data.world's mission is to build the most meaningful, collaborative, and abundant data resource in the world, so that people who work with data can solve problems faster.&nbsp;&nbsp; In the context of that mission, this API ensures that our users are able to easily access data and manage their data projects regardless of system or tool preference.

    OpenAPI spec version: 0.2.2
    Contact: help@data.world
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ErrorMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'details': 'str',
        'message': 'str'
    }

    attribute_map = {
        'code': 'code',
        'details': 'details',
        'message': 'message'
    }

    def __init__(self, code=None, details=None, message=None):
        """
        ErrorMessage - a model defined in Swagger
        """

        self._code = None
        self._details = None
        self._message = None

        if code is not None:
          self.code = code
        if details is not None:
          self.details = details
        if message is not None:
          self.message = message

    @property
    def code(self):
        """
        Gets the code of this ErrorMessage.
        HTTP Error Code

        :return: The code of this ErrorMessage.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this ErrorMessage.
        HTTP Error Code

        :param code: The code of this ErrorMessage.
        :type: int
        """

        self._code = code

    @property
    def details(self):
        """
        Gets the details of this ErrorMessage.
        Underlying error cause.

        :return: The details of this ErrorMessage.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this ErrorMessage.
        Underlying error cause.

        :param details: The details of this ErrorMessage.
        :type: str
        """

        self._details = details

    @property
    def message(self):
        """
        Gets the message of this ErrorMessage.
        Human-readable error message.

        :return: The message of this ErrorMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ErrorMessage.
        Human-readable error message.

        :param message: The message of this ErrorMessage.
        :type: str
        """

        self._message = message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ErrorMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
