# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DwccSpecDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_database': 'str',
        'source_schemas': 'list[str]',
        'target_catalog': 'str',
        'database_id': 'str'
    }

    attribute_map = {
        'source_database': 'sourceDatabase',
        'source_schemas': 'sourceSchemas',
        'target_catalog': 'targetCatalog',
        'database_id': 'databaseId'
    }

    def __init__(self, source_database=None, source_schemas=None, target_catalog=None, database_id=None):
        """
        DwccSpecDto - a model defined in Swagger
        """

        self._source_database = None
        self._source_schemas = None
        self._target_catalog = None
        self._database_id = None

        if source_database is not None:
          self.source_database = source_database
        if source_schemas is not None:
          self.source_schemas = source_schemas
        if target_catalog is not None:
          self.target_catalog = target_catalog
        if database_id is not None:
          self.database_id = database_id

    @property
    def source_database(self):
        """
        Gets the source_database of this DwccSpecDto.

        :return: The source_database of this DwccSpecDto.
        :rtype: str
        """
        return self._source_database

    @source_database.setter
    def source_database(self, source_database):
        """
        Sets the source_database of this DwccSpecDto.

        :param source_database: The source_database of this DwccSpecDto.
        :type: str
        """

        self._source_database = source_database

    @property
    def source_schemas(self):
        """
        Gets the source_schemas of this DwccSpecDto.

        :return: The source_schemas of this DwccSpecDto.
        :rtype: list[str]
        """
        return self._source_schemas

    @source_schemas.setter
    def source_schemas(self, source_schemas):
        """
        Sets the source_schemas of this DwccSpecDto.

        :param source_schemas: The source_schemas of this DwccSpecDto.
        :type: list[str]
        """

        self._source_schemas = source_schemas

    @property
    def target_catalog(self):
        """
        Gets the target_catalog of this DwccSpecDto.

        :return: The target_catalog of this DwccSpecDto.
        :rtype: str
        """
        return self._target_catalog

    @target_catalog.setter
    def target_catalog(self, target_catalog):
        """
        Sets the target_catalog of this DwccSpecDto.

        :param target_catalog: The target_catalog of this DwccSpecDto.
        :type: str
        """

        self._target_catalog = target_catalog

    @property
    def database_id(self):
        """
        Gets the database_id of this DwccSpecDto.

        :return: The database_id of this DwccSpecDto.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """
        Sets the database_id of this DwccSpecDto.

        :param database_id: The database_id of this DwccSpecDto.
        :type: str
        """

        self._database_id = database_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DwccSpecDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
