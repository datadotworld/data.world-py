# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ContributionDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'activity_type': 'str',
        'activities': 'list[ContributionActivity]'
    }

    attribute_map = {
        'type': 'type',
        'activity_type': 'activityType',
        'activities': 'activities'
    }

    def __init__(self, type=None, activity_type=None, activities=None):
        """
        ContributionDto - a model defined in Swagger
        """

        self._type = None
        self._activity_type = None
        self._activities = None

        self.type = type
        self.activity_type = activity_type
        self.activities = activities

    @property
    def type(self):
        """
        Gets the type of this ContributionDto.

        :return: The type of this ContributionDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ContributionDto.

        :param type: The type of this ContributionDto.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        allowed_values = ["METADATA", "DATASET"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def activity_type(self):
        """
        Gets the activity_type of this ContributionDto.

        :return: The activity_type of this ContributionDto.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """
        Sets the activity_type of this ContributionDto.

        :param activity_type: The activity_type of this ContributionDto.
        :type: str
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")
        allowed_values = ["METADATA_EDIT", "RELATIONSHIP"]
        if activity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def activities(self):
        """
        Gets the activities of this ContributionDto.

        :return: The activities of this ContributionDto.
        :rtype: list[ContributionActivity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """
        Sets the activities of this ContributionDto.

        :param activities: The activities of this ContributionDto.
        :type: list[ContributionActivity]
        """
        if activities is None:
            raise ValueError("Invalid value for `activities`, must not be `None`")

        self._activities = activities

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContributionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
