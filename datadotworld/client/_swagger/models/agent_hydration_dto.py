# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AgentHydrationDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agentid': 'str',
        'avatar_url': 'str',
        'display_name': 'str',
        'org_mode': 'bool'
    }

    attribute_map = {
        'agentid': 'agentid',
        'avatar_url': 'avatarUrl',
        'display_name': 'displayName',
        'org_mode': 'orgMode'
    }

    def __init__(self, agentid=None, avatar_url=None, display_name=None, org_mode=False):
        """
        AgentHydrationDto - a model defined in Swagger
        """

        self._agentid = None
        self._avatar_url = None
        self._display_name = None
        self._org_mode = None

        if agentid is not None:
          self.agentid = agentid
        if avatar_url is not None:
          self.avatar_url = avatar_url
        if display_name is not None:
          self.display_name = display_name
        if org_mode is not None:
          self.org_mode = org_mode

    @property
    def agentid(self):
        """
        Gets the agentid of this AgentHydrationDto.

        :return: The agentid of this AgentHydrationDto.
        :rtype: str
        """
        return self._agentid

    @agentid.setter
    def agentid(self, agentid):
        """
        Sets the agentid of this AgentHydrationDto.

        :param agentid: The agentid of this AgentHydrationDto.
        :type: str
        """

        self._agentid = agentid

    @property
    def avatar_url(self):
        """
        Gets the avatar_url of this AgentHydrationDto.

        :return: The avatar_url of this AgentHydrationDto.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """
        Sets the avatar_url of this AgentHydrationDto.

        :param avatar_url: The avatar_url of this AgentHydrationDto.
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def display_name(self):
        """
        Gets the display_name of this AgentHydrationDto.

        :return: The display_name of this AgentHydrationDto.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this AgentHydrationDto.

        :param display_name: The display_name of this AgentHydrationDto.
        :type: str
        """

        self._display_name = display_name

    @property
    def org_mode(self):
        """
        Gets the org_mode of this AgentHydrationDto.

        :return: The org_mode of this AgentHydrationDto.
        :rtype: bool
        """
        return self._org_mode

    @org_mode.setter
    def org_mode(self, org_mode):
        """
        Sets the org_mode of this AgentHydrationDto.

        :param org_mode: The org_mode of this AgentHydrationDto.
        :type: bool
        """

        self._org_mode = org_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AgentHydrationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
