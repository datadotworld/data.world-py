# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServiceAccountCreateRequestDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'desired_username': 'str',
        'expiry_date': 'datetime'
    }

    attribute_map = {
        'desired_username': 'desiredUsername',
        'expiry_date': 'expiryDate'
    }

    def __init__(self, desired_username=None, expiry_date=None):
        """
        ServiceAccountCreateRequestDto - a model defined in Swagger
        """

        self._desired_username = None
        self._expiry_date = None

        if desired_username is not None:
          self.desired_username = desired_username
        if expiry_date is not None:
          self.expiry_date = expiry_date

    @property
    def desired_username(self):
        """
        Gets the desired_username of this ServiceAccountCreateRequestDto.

        :return: The desired_username of this ServiceAccountCreateRequestDto.
        :rtype: str
        """
        return self._desired_username

    @desired_username.setter
    def desired_username(self, desired_username):
        """
        Sets the desired_username of this ServiceAccountCreateRequestDto.

        :param desired_username: The desired_username of this ServiceAccountCreateRequestDto.
        :type: str
        """

        self._desired_username = desired_username

    @property
    def expiry_date(self):
        """
        Gets the expiry_date of this ServiceAccountCreateRequestDto.

        :return: The expiry_date of this ServiceAccountCreateRequestDto.
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """
        Sets the expiry_date of this ServiceAccountCreateRequestDto.

        :param expiry_date: The expiry_date of this ServiceAccountCreateRequestDto.
        :type: datetime
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServiceAccountCreateRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
