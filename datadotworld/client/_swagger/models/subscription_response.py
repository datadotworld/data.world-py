# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SubscriptionResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'DatasetIdentifierResponse',
        'project': 'DatasetIdentifierResponse',
        'user': 'UserIdentifierResponse',
        'events': 'list[str]',
        'links': 'SubscriptionLinks'
    }

    attribute_map = {
        'dataset': 'dataset',
        'project': 'project',
        'user': 'user',
        'events': 'events',
        'links': 'links'
    }

    def __init__(self, dataset=None, project=None, user=None, events=None, links=None):
        """
        SubscriptionResponse - a model defined in Swagger
        """

        self._dataset = None
        self._project = None
        self._user = None
        self._events = None
        self._links = None

        if dataset is not None:
          self.dataset = dataset
        if project is not None:
          self.project = project
        if user is not None:
          self.user = user
        self.events = events
        if links is not None:
          self.links = links

    @property
    def dataset(self):
        """
        Gets the dataset of this SubscriptionResponse.

        :return: The dataset of this SubscriptionResponse.
        :rtype: DatasetIdentifierResponse
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """
        Sets the dataset of this SubscriptionResponse.

        :param dataset: The dataset of this SubscriptionResponse.
        :type: DatasetIdentifierResponse
        """

        self._dataset = dataset

    @property
    def project(self):
        """
        Gets the project of this SubscriptionResponse.

        :return: The project of this SubscriptionResponse.
        :rtype: DatasetIdentifierResponse
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this SubscriptionResponse.

        :param project: The project of this SubscriptionResponse.
        :type: DatasetIdentifierResponse
        """

        self._project = project

    @property
    def user(self):
        """
        Gets the user of this SubscriptionResponse.

        :return: The user of this SubscriptionResponse.
        :rtype: UserIdentifierResponse
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this SubscriptionResponse.

        :param user: The user of this SubscriptionResponse.
        :type: UserIdentifierResponse
        """

        self._user = user

    @property
    def events(self):
        """
        Gets the events of this SubscriptionResponse.

        :return: The events of this SubscriptionResponse.
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this SubscriptionResponse.

        :param events: The events of this SubscriptionResponse.
        :type: list[str]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")
        allowed_values = ["ALL"]
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(events)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def links(self):
        """
        Gets the links of this SubscriptionResponse.

        :return: The links of this SubscriptionResponse.
        :rtype: SubscriptionLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this SubscriptionResponse.

        :param links: The links of this SubscriptionResponse.
        :type: SubscriptionLinks
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SubscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
