# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateQueryRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language': 'str',
        'name': 'str',
        'content': 'str',
        'description': 'str',
        'published': 'bool'
    }

    attribute_map = {
        'language': 'language',
        'name': 'name',
        'content': 'content',
        'description': 'description',
        'published': 'published'
    }

    def __init__(self, language=None, name=None, content=None, description=None, published=False):
        """
        CreateQueryRequest - a model defined in Swagger
        """

        self._language = None
        self._name = None
        self._content = None
        self._description = None
        self._published = None

        self.language = language
        self.name = name
        self.content = content
        if description is not None:
          self.description = description
        if published is not None:
          self.published = published

    @property
    def language(self):
        """
        Gets the language of this CreateQueryRequest.

        :return: The language of this CreateQueryRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this CreateQueryRequest.

        :param language: The language of this CreateQueryRequest.
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")
        allowed_values = ["SPARQL", "SQL"]
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def name(self):
        """
        Gets the name of this CreateQueryRequest.

        :return: The name of this CreateQueryRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateQueryRequest.

        :param name: The name of this CreateQueryRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def content(self):
        """
        Gets the content of this CreateQueryRequest.

        :return: The content of this CreateQueryRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this CreateQueryRequest.

        :param content: The content of this CreateQueryRequest.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def description(self):
        """
        Gets the description of this CreateQueryRequest.

        :return: The description of this CreateQueryRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CreateQueryRequest.

        :param description: The description of this CreateQueryRequest.
        :type: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def published(self):
        """
        Gets the published of this CreateQueryRequest.

        :return: The published of this CreateQueryRequest.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """
        Sets the published of this CreateQueryRequest.

        :param published: The published of this CreateQueryRequest.
        :type: bool
        """

        self._published = published

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
