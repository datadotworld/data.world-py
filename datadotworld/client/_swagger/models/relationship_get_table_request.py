# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RelationshipGetTableRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'by_resource_types': 'list[str]',
        'by_relation_types': 'list[str]'
    }

    attribute_map = {
        'by_resource_types': 'byResourceTypes',
        'by_relation_types': 'byRelationTypes'
    }

    def __init__(self, by_resource_types=None, by_relation_types=None):
        """
        RelationshipGetTableRequest - a model defined in Swagger
        """

        self._by_resource_types = None
        self._by_relation_types = None

        if by_resource_types is not None:
          self.by_resource_types = by_resource_types
        if by_relation_types is not None:
          self.by_relation_types = by_relation_types

    @property
    def by_resource_types(self):
        """
        Gets the by_resource_types of this RelationshipGetTableRequest.
        Filter by these resource types.

        :return: The by_resource_types of this RelationshipGetTableRequest.
        :rtype: list[str]
        """
        return self._by_resource_types

    @by_resource_types.setter
    def by_resource_types(self, by_resource_types):
        """
        Sets the by_resource_types of this RelationshipGetTableRequest.
        Filter by these resource types.

        :param by_resource_types: The by_resource_types of this RelationshipGetTableRequest.
        :type: list[str]
        """
        allowed_values = ["CATALOG", "ANALYSIS", "BUSINESS_TERM", "COLUMN", "DATA_TYPE", "DATASET", "PROJECT", "TABLE"]
        if not set(by_resource_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `by_resource_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(by_resource_types)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._by_resource_types = by_resource_types

    @property
    def by_relation_types(self):
        """
        Gets the by_relation_types of this RelationshipGetTableRequest.
        Filter by these relation types. Relation types should be IRIs.

        :return: The by_relation_types of this RelationshipGetTableRequest.
        :rtype: list[str]
        """
        return self._by_relation_types

    @by_relation_types.setter
    def by_relation_types(self, by_relation_types):
        """
        Sets the by_relation_types of this RelationshipGetTableRequest.
        Filter by these relation types. Relation types should be IRIs.

        :param by_relation_types: The by_relation_types of this RelationshipGetTableRequest.
        :type: list[str]
        """

        self._by_relation_types = by_relation_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RelationshipGetTableRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
