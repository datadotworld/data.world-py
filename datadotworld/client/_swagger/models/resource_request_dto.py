# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResourceRequestDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requestid': 'str',
        'resource': 'str',
        'approver_party': 'str',
        'requester_party': 'str',
        'grantee_party': 'str',
        'resource_request_type': 'str',
        'contribution': 'ContributionDto',
        'transfer_asset': 'TransferAssetDto',
        'message': 'str',
        'created': 'str',
        'updated': 'str'
    }

    attribute_map = {
        'requestid': 'requestid',
        'resource': 'resource',
        'approver_party': 'approverParty',
        'requester_party': 'requesterParty',
        'grantee_party': 'granteeParty',
        'resource_request_type': 'resourceRequestType',
        'contribution': 'contribution',
        'transfer_asset': 'transferAsset',
        'message': 'message',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, requestid=None, resource=None, approver_party=None, requester_party=None, grantee_party=None, resource_request_type=None, contribution=None, transfer_asset=None, message=None, created=None, updated=None):
        """
        ResourceRequestDto - a model defined in Swagger
        """

        self._requestid = None
        self._resource = None
        self._approver_party = None
        self._requester_party = None
        self._grantee_party = None
        self._resource_request_type = None
        self._contribution = None
        self._transfer_asset = None
        self._message = None
        self._created = None
        self._updated = None

        if requestid is not None:
          self.requestid = requestid
        if resource is not None:
          self.resource = resource
        if approver_party is not None:
          self.approver_party = approver_party
        if requester_party is not None:
          self.requester_party = requester_party
        if grantee_party is not None:
          self.grantee_party = grantee_party
        if resource_request_type is not None:
          self.resource_request_type = resource_request_type
        if contribution is not None:
          self.contribution = contribution
        if transfer_asset is not None:
          self.transfer_asset = transfer_asset
        if message is not None:
          self.message = message
        if created is not None:
          self.created = created
        if updated is not None:
          self.updated = updated

    @property
    def requestid(self):
        """
        Gets the requestid of this ResourceRequestDto.

        :return: The requestid of this ResourceRequestDto.
        :rtype: str
        """
        return self._requestid

    @requestid.setter
    def requestid(self, requestid):
        """
        Sets the requestid of this ResourceRequestDto.

        :param requestid: The requestid of this ResourceRequestDto.
        :type: str
        """

        self._requestid = requestid

    @property
    def resource(self):
        """
        Gets the resource of this ResourceRequestDto.

        :return: The resource of this ResourceRequestDto.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """
        Sets the resource of this ResourceRequestDto.

        :param resource: The resource of this ResourceRequestDto.
        :type: str
        """

        self._resource = resource

    @property
    def approver_party(self):
        """
        Gets the approver_party of this ResourceRequestDto.

        :return: The approver_party of this ResourceRequestDto.
        :rtype: str
        """
        return self._approver_party

    @approver_party.setter
    def approver_party(self, approver_party):
        """
        Sets the approver_party of this ResourceRequestDto.

        :param approver_party: The approver_party of this ResourceRequestDto.
        :type: str
        """

        self._approver_party = approver_party

    @property
    def requester_party(self):
        """
        Gets the requester_party of this ResourceRequestDto.

        :return: The requester_party of this ResourceRequestDto.
        :rtype: str
        """
        return self._requester_party

    @requester_party.setter
    def requester_party(self, requester_party):
        """
        Sets the requester_party of this ResourceRequestDto.

        :param requester_party: The requester_party of this ResourceRequestDto.
        :type: str
        """

        self._requester_party = requester_party

    @property
    def grantee_party(self):
        """
        Gets the grantee_party of this ResourceRequestDto.

        :return: The grantee_party of this ResourceRequestDto.
        :rtype: str
        """
        return self._grantee_party

    @grantee_party.setter
    def grantee_party(self, grantee_party):
        """
        Sets the grantee_party of this ResourceRequestDto.

        :param grantee_party: The grantee_party of this ResourceRequestDto.
        :type: str
        """

        self._grantee_party = grantee_party

    @property
    def resource_request_type(self):
        """
        Gets the resource_request_type of this ResourceRequestDto.

        :return: The resource_request_type of this ResourceRequestDto.
        :rtype: str
        """
        return self._resource_request_type

    @resource_request_type.setter
    def resource_request_type(self, resource_request_type):
        """
        Sets the resource_request_type of this ResourceRequestDto.

        :param resource_request_type: The resource_request_type of this ResourceRequestDto.
        :type: str
        """

        self._resource_request_type = resource_request_type

    @property
    def contribution(self):
        """
        Gets the contribution of this ResourceRequestDto.

        :return: The contribution of this ResourceRequestDto.
        :rtype: ContributionDto
        """
        return self._contribution

    @contribution.setter
    def contribution(self, contribution):
        """
        Sets the contribution of this ResourceRequestDto.

        :param contribution: The contribution of this ResourceRequestDto.
        :type: ContributionDto
        """

        self._contribution = contribution

    @property
    def transfer_asset(self):
        """
        Gets the transfer_asset of this ResourceRequestDto.

        :return: The transfer_asset of this ResourceRequestDto.
        :rtype: TransferAssetDto
        """
        return self._transfer_asset

    @transfer_asset.setter
    def transfer_asset(self, transfer_asset):
        """
        Sets the transfer_asset of this ResourceRequestDto.

        :param transfer_asset: The transfer_asset of this ResourceRequestDto.
        :type: TransferAssetDto
        """

        self._transfer_asset = transfer_asset

    @property
    def message(self):
        """
        Gets the message of this ResourceRequestDto.

        :return: The message of this ResourceRequestDto.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ResourceRequestDto.

        :param message: The message of this ResourceRequestDto.
        :type: str
        """

        self._message = message

    @property
    def created(self):
        """
        Gets the created of this ResourceRequestDto.

        :return: The created of this ResourceRequestDto.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ResourceRequestDto.

        :param created: The created of this ResourceRequestDto.
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this ResourceRequestDto.

        :return: The updated of this ResourceRequestDto.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this ResourceRequestDto.

        :param updated: The updated of this ResourceRequestDto.
        :type: str
        """

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResourceRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
