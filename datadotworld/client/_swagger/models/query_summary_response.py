# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QuerySummaryResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'owner': 'str',
        'language': 'str',
        'name': 'str',
        'body': 'str',
        'description': 'str',
        'version': 'str',
        'created': 'str',
        'updated': 'str',
        'parameters': 'dict(str, QueryParameter)'
    }

    attribute_map = {
        'id': 'id',
        'owner': 'owner',
        'language': 'language',
        'name': 'name',
        'body': 'body',
        'description': 'description',
        'version': 'version',
        'created': 'created',
        'updated': 'updated',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, owner=None, language=None, name=None, body=None, description=None, version=None, created=None, updated=None, parameters=None):
        """
        QuerySummaryResponse - a model defined in Swagger
        """

        self._id = None
        self._owner = None
        self._language = None
        self._name = None
        self._body = None
        self._description = None
        self._version = None
        self._created = None
        self._updated = None
        self._parameters = None

        if id is not None:
          self.id = id
        if owner is not None:
          self.owner = owner
        if language is not None:
          self.language = language
        if name is not None:
          self.name = name
        if body is not None:
          self.body = body
        if description is not None:
          self.description = description
        if version is not None:
          self.version = version
        if created is not None:
          self.created = created
        if updated is not None:
          self.updated = updated
        if parameters is not None:
          self.parameters = parameters

    @property
    def id(self):
        """
        Gets the id of this QuerySummaryResponse.

        :return: The id of this QuerySummaryResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QuerySummaryResponse.

        :param id: The id of this QuerySummaryResponse.
        :type: str
        """

        self._id = id

    @property
    def owner(self):
        """
        Gets the owner of this QuerySummaryResponse.

        :return: The owner of this QuerySummaryResponse.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this QuerySummaryResponse.

        :param owner: The owner of this QuerySummaryResponse.
        :type: str
        """

        self._owner = owner

    @property
    def language(self):
        """
        Gets the language of this QuerySummaryResponse.

        :return: The language of this QuerySummaryResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this QuerySummaryResponse.

        :param language: The language of this QuerySummaryResponse.
        :type: str
        """
        allowed_values = ["SPARQL", "SQL"]
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def name(self):
        """
        Gets the name of this QuerySummaryResponse.

        :return: The name of this QuerySummaryResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this QuerySummaryResponse.

        :param name: The name of this QuerySummaryResponse.
        :type: str
        """

        self._name = name

    @property
    def body(self):
        """
        Gets the body of this QuerySummaryResponse.

        :return: The body of this QuerySummaryResponse.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this QuerySummaryResponse.

        :param body: The body of this QuerySummaryResponse.
        :type: str
        """

        self._body = body

    @property
    def description(self):
        """
        Gets the description of this QuerySummaryResponse.

        :return: The description of this QuerySummaryResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this QuerySummaryResponse.

        :param description: The description of this QuerySummaryResponse.
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """
        Gets the version of this QuerySummaryResponse.

        :return: The version of this QuerySummaryResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this QuerySummaryResponse.

        :param version: The version of this QuerySummaryResponse.
        :type: str
        """

        self._version = version

    @property
    def created(self):
        """
        Gets the created of this QuerySummaryResponse.

        :return: The created of this QuerySummaryResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this QuerySummaryResponse.

        :param created: The created of this QuerySummaryResponse.
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this QuerySummaryResponse.

        :return: The updated of this QuerySummaryResponse.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this QuerySummaryResponse.

        :param updated: The updated of this QuerySummaryResponse.
        :type: str
        """

        self._updated = updated

    @property
    def parameters(self):
        """
        Gets the parameters of this QuerySummaryResponse.

        :return: The parameters of this QuerySummaryResponse.
        :rtype: dict(str, QueryParameter)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this QuerySummaryResponse.

        :param parameters: The parameters of this QuerySummaryResponse.
        :type: dict(str, QueryParameter)
        """

        self._parameters = parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QuerySummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
