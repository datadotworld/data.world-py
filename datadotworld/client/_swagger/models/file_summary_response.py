# coding: utf-8

"""
    data.world Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FileSummaryResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, size_in_bytes=None, source=None, created=None, updated=None):
        """
        FileSummaryResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'size_in_bytes': 'int',
            'source': 'FileSourceSummaryResponse',
            'created': 'str',
            'updated': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'size_in_bytes': 'sizeInBytes',
            'source': 'source',
            'created': 'created',
            'updated': 'updated'
        }

        self._name = name
        self._size_in_bytes = size_in_bytes
        self._source = source
        self._created = created
        self._updated = updated

    @property
    def name(self):
        """
        Gets the name of this FileSummaryResponse.

        :return: The name of this FileSummaryResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FileSummaryResponse.

        :param name: The name of this FileSummaryResponse.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def size_in_bytes(self):
        """
        Gets the size_in_bytes of this FileSummaryResponse.

        :return: The size_in_bytes of this FileSummaryResponse.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """
        Sets the size_in_bytes of this FileSummaryResponse.

        :param size_in_bytes: The size_in_bytes of this FileSummaryResponse.
        :type: int
        """

        self._size_in_bytes = size_in_bytes

    @property
    def source(self):
        """
        Gets the source of this FileSummaryResponse.

        :return: The source of this FileSummaryResponse.
        :rtype: FileSourceSummaryResponse
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this FileSummaryResponse.

        :param source: The source of this FileSummaryResponse.
        :type: FileSourceSummaryResponse
        """

        self._source = source

    @property
    def created(self):
        """
        Gets the created of this FileSummaryResponse.

        :return: The created of this FileSummaryResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this FileSummaryResponse.

        :param created: The created of this FileSummaryResponse.
        :type: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this FileSummaryResponse.

        :return: The updated of this FileSummaryResponse.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this FileSummaryResponse.

        :param updated: The updated of this FileSummaryResponse.
        :type: str
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FileSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
