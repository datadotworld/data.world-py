# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateExternalResourceContribution(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contribution_hydratables': 'list[ContributionHydratable]',
        'entity_type': 'str',
        'entity_iri': 'str',
        'external_url': 'str',
        'name': 'str'
    }

    attribute_map = {
        'contribution_hydratables': 'contributionHydratables',
        'entity_type': 'entityType',
        'entity_iri': 'entityIri',
        'external_url': 'externalUrl',
        'name': 'name'
    }

    def __init__(self, contribution_hydratables=None, entity_type=None, entity_iri=None, external_url=None, name=None):
        """
        CreateExternalResourceContribution - a model defined in Swagger
        """

        self._contribution_hydratables = None
        self._entity_type = None
        self._entity_iri = None
        self._external_url = None
        self._name = None

        if contribution_hydratables is not None:
          self.contribution_hydratables = contribution_hydratables
        self.entity_type = entity_type
        if entity_iri is not None:
          self.entity_iri = entity_iri
        self.external_url = external_url
        if name is not None:
          self.name = name

    @property
    def contribution_hydratables(self):
        """
        Gets the contribution_hydratables of this CreateExternalResourceContribution.

        :return: The contribution_hydratables of this CreateExternalResourceContribution.
        :rtype: list[ContributionHydratable]
        """
        return self._contribution_hydratables

    @contribution_hydratables.setter
    def contribution_hydratables(self, contribution_hydratables):
        """
        Sets the contribution_hydratables of this CreateExternalResourceContribution.

        :param contribution_hydratables: The contribution_hydratables of this CreateExternalResourceContribution.
        :type: list[ContributionHydratable]
        """

        self._contribution_hydratables = contribution_hydratables

    @property
    def entity_type(self):
        """
        Gets the entity_type of this CreateExternalResourceContribution.

        :return: The entity_type of this CreateExternalResourceContribution.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this CreateExternalResourceContribution.

        :param entity_type: The entity_type of this CreateExternalResourceContribution.
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def entity_iri(self):
        """
        Gets the entity_iri of this CreateExternalResourceContribution.

        :return: The entity_iri of this CreateExternalResourceContribution.
        :rtype: str
        """
        return self._entity_iri

    @entity_iri.setter
    def entity_iri(self, entity_iri):
        """
        Sets the entity_iri of this CreateExternalResourceContribution.

        :param entity_iri: The entity_iri of this CreateExternalResourceContribution.
        :type: str
        """

        self._entity_iri = entity_iri

    @property
    def external_url(self):
        """
        Gets the external_url of this CreateExternalResourceContribution.

        :return: The external_url of this CreateExternalResourceContribution.
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """
        Sets the external_url of this CreateExternalResourceContribution.

        :param external_url: The external_url of this CreateExternalResourceContribution.
        :type: str
        """
        if external_url is None:
            raise ValueError("Invalid value for `external_url`, must not be `None`")

        self._external_url = external_url

    @property
    def name(self):
        """
        Gets the name of this CreateExternalResourceContribution.

        :return: The name of this CreateExternalResourceContribution.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateExternalResourceContribution.

        :param name: The name of this CreateExternalResourceContribution.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateExternalResourceContribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
