# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'category': 'list[str]',
        'type': 'list[str]',
        'owner': 'list[str]',
        'min_access_level': 'str',
        'tag': 'list[str]',
        'visibility': 'str',
        'created_range': 'Range',
        'updated_range': 'Range',
        'asset_status': 'list[str]'
    }

    attribute_map = {
        'query': 'query',
        'category': 'category',
        'type': 'type',
        'owner': 'owner',
        'min_access_level': 'minAccessLevel',
        'tag': 'tag',
        'visibility': 'visibility',
        'created_range': 'createdRange',
        'updated_range': 'updatedRange',
        'asset_status': 'assetStatus'
    }

    def __init__(self, query=None, category=None, type=None, owner=None, min_access_level=None, tag=None, visibility=None, created_range=None, updated_range=None, asset_status=None):
        """
        SearchRequest - a model defined in Swagger
        """

        self._query = None
        self._category = None
        self._type = None
        self._owner = None
        self._min_access_level = None
        self._tag = None
        self._visibility = None
        self._created_range = None
        self._updated_range = None
        self._asset_status = None

        self.query = query
        if category is not None:
          self.category = category
        if type is not None:
          self.type = type
        if owner is not None:
          self.owner = owner
        if min_access_level is not None:
          self.min_access_level = min_access_level
        if tag is not None:
          self.tag = tag
        if visibility is not None:
          self.visibility = visibility
        if created_range is not None:
          self.created_range = created_range
        if updated_range is not None:
          self.updated_range = updated_range
        if asset_status is not None:
          self.asset_status = asset_status

    @property
    def query(self):
        """
        Gets the query of this SearchRequest.

        :return: The query of this SearchRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this SearchRequest.

        :param query: The query of this SearchRequest.
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def category(self):
        """
        Gets the category of this SearchRequest.
        Filter by categories.

        :return: The category of this SearchRequest.
        :rtype: list[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this SearchRequest.
        Filter by categories.

        :param category: The category of this SearchRequest.
        :type: list[str]
        """
        allowed_values = ["catalogAnalysis", "catalogBusinessTerm", "catalogDataType", "catalogTable", "collection", "comment", "dataset", "datatable", "file", "insight", "integration", "project", "query", "unknownCatalogEntry"]
        if not set(category).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `category` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(category)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._category = category

    @property
    def type(self):
        """
        Gets the type of this SearchRequest.
        Filter by type of metadata resource. Both IRI and label are accepted.

        :return: The type of this SearchRequest.
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SearchRequest.
        Filter by type of metadata resource. Both IRI and label are accepted.

        :param type: The type of this SearchRequest.
        :type: list[str]
        """

        self._type = type

    @property
    def owner(self):
        """
        Gets the owner of this SearchRequest.
        Filter by owners. Owners are identified by their IDs.

        :return: The owner of this SearchRequest.
        :rtype: list[str]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this SearchRequest.
        Filter by owners. Owners are identified by their IDs.

        :param owner: The owner of this SearchRequest.
        :type: list[str]
        """

        self._owner = owner

    @property
    def min_access_level(self):
        """
        Gets the min_access_level of this SearchRequest.
        Minimum access level to filter by.

        :return: The min_access_level of this SearchRequest.
        :rtype: str
        """
        return self._min_access_level

    @min_access_level.setter
    def min_access_level(self, min_access_level):
        """
        Sets the min_access_level of this SearchRequest.
        Minimum access level to filter by.

        :param min_access_level: The min_access_level of this SearchRequest.
        :type: str
        """
        allowed_values = ["NONE", "SAML_GATED", "DISCOVER", "MEMBER", "READ", "WRITE", "ADMIN"]
        if min_access_level not in allowed_values:
            raise ValueError(
                "Invalid value for `min_access_level` ({0}), must be one of {1}"
                .format(min_access_level, allowed_values)
            )

        self._min_access_level = min_access_level

    @property
    def tag(self):
        """
        Gets the tag of this SearchRequest.
        Filter by tags.

        :return: The tag of this SearchRequest.
        :rtype: list[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this SearchRequest.
        Filter by tags.

        :param tag: The tag of this SearchRequest.
        :type: list[str]
        """

        self._tag = tag

    @property
    def visibility(self):
        """
        Gets the visibility of this SearchRequest.
        Filter by visibility.

        :return: The visibility of this SearchRequest.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this SearchRequest.
        Filter by visibility.

        :param visibility: The visibility of this SearchRequest.
        :type: str
        """
        allowed_values = ["DISCOVERABLE", "OPEN", "PRIVATE"]
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def created_range(self):
        """
        Gets the created_range of this SearchRequest.
        Filter by range of date that the resource was created.

        :return: The created_range of this SearchRequest.
        :rtype: Range
        """
        return self._created_range

    @created_range.setter
    def created_range(self, created_range):
        """
        Sets the created_range of this SearchRequest.
        Filter by range of date that the resource was created.

        :param created_range: The created_range of this SearchRequest.
        :type: Range
        """

        self._created_range = created_range

    @property
    def updated_range(self):
        """
        Gets the updated_range of this SearchRequest.
        Filter by range of date that the resource was updated.

        :return: The updated_range of this SearchRequest.
        :rtype: Range
        """
        return self._updated_range

    @updated_range.setter
    def updated_range(self, updated_range):
        """
        Sets the updated_range of this SearchRequest.
        Filter by range of date that the resource was updated.

        :param updated_range: The updated_range of this SearchRequest.
        :type: Range
        """

        self._updated_range = updated_range

    @property
    def asset_status(self):
        """
        Gets the asset_status of this SearchRequest.
        Filter by asset status label.

        :return: The asset_status of this SearchRequest.
        :rtype: list[str]
        """
        return self._asset_status

    @asset_status.setter
    def asset_status(self, asset_status):
        """
        Sets the asset_status of this SearchRequest.
        Filter by asset status label.

        :param asset_status: The asset_status of this SearchRequest.
        :type: list[str]
        """

        self._asset_status = asset_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
