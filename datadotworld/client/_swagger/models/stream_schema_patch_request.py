# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StreamSchemaPatchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'update_method': 'str',
        'primary_key_fields': 'list[str]',
        'sequence_field': 'str'
    }

    attribute_map = {
        'update_method': 'updateMethod',
        'primary_key_fields': 'primaryKeyFields',
        'sequence_field': 'sequenceField'
    }

    def __init__(self, update_method=None, primary_key_fields=None, sequence_field=None):
        """
        StreamSchemaPatchRequest - a model defined in Swagger
        """

        self._update_method = None
        self._primary_key_fields = None
        self._sequence_field = None

        self.update_method = update_method
        if primary_key_fields is not None:
          self.primary_key_fields = primary_key_fields
        if sequence_field is not None:
          self.sequence_field = sequence_field

    @property
    def update_method(self):
        """
        Gets the update_method of this StreamSchemaPatchRequest.

        :return: The update_method of this StreamSchemaPatchRequest.
        :rtype: str
        """
        return self._update_method

    @update_method.setter
    def update_method(self, update_method):
        """
        Sets the update_method of this StreamSchemaPatchRequest.

        :param update_method: The update_method of this StreamSchemaPatchRequest.
        :type: str
        """
        if update_method is None:
            raise ValueError("Invalid value for `update_method`, must not be `None`")
        allowed_values = ["TRUNCATE"]
        if update_method not in allowed_values:
            raise ValueError(
                "Invalid value for `update_method` ({0}), must be one of {1}"
                .format(update_method, allowed_values)
            )

        self._update_method = update_method

    @property
    def primary_key_fields(self):
        """
        Gets the primary_key_fields of this StreamSchemaPatchRequest.

        :return: The primary_key_fields of this StreamSchemaPatchRequest.
        :rtype: list[str]
        """
        return self._primary_key_fields

    @primary_key_fields.setter
    def primary_key_fields(self, primary_key_fields):
        """
        Sets the primary_key_fields of this StreamSchemaPatchRequest.

        :param primary_key_fields: The primary_key_fields of this StreamSchemaPatchRequest.
        :type: list[str]
        """

        self._primary_key_fields = primary_key_fields

    @property
    def sequence_field(self):
        """
        Gets the sequence_field of this StreamSchemaPatchRequest.

        :return: The sequence_field of this StreamSchemaPatchRequest.
        :rtype: str
        """
        return self._sequence_field

    @sequence_field.setter
    def sequence_field(self, sequence_field):
        """
        Sets the sequence_field of this StreamSchemaPatchRequest.

        :param sequence_field: The sequence_field of this StreamSchemaPatchRequest.
        :type: str
        """

        self._sequence_field = sequence_field

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StreamSchemaPatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
