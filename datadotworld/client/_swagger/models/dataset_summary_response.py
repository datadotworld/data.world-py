# coding: utf-8

"""
    data.world Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DatasetSummaryResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, owner=None, id=None, title=None, description=None, summary=None, tags=None, license=None, visibility=None, files=None, status=None, created=None, updated=None):
        """
        DatasetSummaryResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'owner': 'str',
            'id': 'str',
            'title': 'str',
            'description': 'str',
            'summary': 'str',
            'tags': 'list[str]',
            'license': 'str',
            'visibility': 'str',
            'files': 'list[FileSummaryResponse]',
            'status': 'str',
            'created': 'str',
            'updated': 'str'
        }

        self.attribute_map = {
            'owner': 'owner',
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'summary': 'summary',
            'tags': 'tags',
            'license': 'license',
            'visibility': 'visibility',
            'files': 'files',
            'status': 'status',
            'created': 'created',
            'updated': 'updated'
        }

        self._owner = owner
        self._id = id
        self._title = title
        self._description = description
        self._summary = summary
        self._tags = tags
        self._license = license
        self._visibility = visibility
        self._files = files
        self._status = status
        self._created = created
        self._updated = updated

    @property
    def owner(self):
        """
        Gets the owner of this DatasetSummaryResponse.

        :return: The owner of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this DatasetSummaryResponse.

        :param owner: The owner of this DatasetSummaryResponse.
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def id(self):
        """
        Gets the id of this DatasetSummaryResponse.

        :return: The id of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DatasetSummaryResponse.

        :param id: The id of this DatasetSummaryResponse.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this DatasetSummaryResponse.

        :return: The title of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this DatasetSummaryResponse.

        :param title: The title of this DatasetSummaryResponse.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 60:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `60`")
        if title is not None and len(title) < 0:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `0`")

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this DatasetSummaryResponse.

        :return: The description of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DatasetSummaryResponse.

        :param description: The description of this DatasetSummaryResponse.
        :type: str
        """
        if description is not None and len(description) > 120:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `120`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def summary(self):
        """
        Gets the summary of this DatasetSummaryResponse.

        :return: The summary of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this DatasetSummaryResponse.

        :param summary: The summary of this DatasetSummaryResponse.
        :type: str
        """
        if summary is not None and len(summary) > 25000:
            raise ValueError("Invalid value for `summary`, length must be less than or equal to `25000`")
        if summary is not None and len(summary) < 0:
            raise ValueError("Invalid value for `summary`, length must be greater than or equal to `0`")

        self._summary = summary

    @property
    def tags(self):
        """
        Gets the tags of this DatasetSummaryResponse.

        :return: The tags of this DatasetSummaryResponse.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DatasetSummaryResponse.

        :param tags: The tags of this DatasetSummaryResponse.
        :type: list[str]
        """

        self._tags = tags

    @property
    def license(self):
        """
        Gets the license of this DatasetSummaryResponse.

        :return: The license of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """
        Sets the license of this DatasetSummaryResponse.

        :param license: The license of this DatasetSummaryResponse.
        :type: str
        """
        allowed_values = ["Public Domain", "PDDL", "CC-0", "CC-BY", "ODC-BY", "CC-BY-SA", "ODC-ODbL", "CC BY-NC", "CC BY-NC-SA", "Other"]
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def visibility(self):
        """
        Gets the visibility of this DatasetSummaryResponse.

        :return: The visibility of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this DatasetSummaryResponse.

        :param visibility: The visibility of this DatasetSummaryResponse.
        :type: str
        """
        allowed_values = ["OPEN", "PRIVATE"]
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def files(self):
        """
        Gets the files of this DatasetSummaryResponse.

        :return: The files of this DatasetSummaryResponse.
        :rtype: list[FileSummaryResponse]
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this DatasetSummaryResponse.

        :param files: The files of this DatasetSummaryResponse.
        :type: list[FileSummaryResponse]
        """

        self._files = files

    @property
    def status(self):
        """
        Gets the status of this DatasetSummaryResponse.

        :return: The status of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DatasetSummaryResponse.

        :param status: The status of this DatasetSummaryResponse.
        :type: str
        """
        allowed_values = ["NEW", "INPROGRESS", "LOADED", "SYSTEMERROR"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created(self):
        """
        Gets the created of this DatasetSummaryResponse.

        :return: The created of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this DatasetSummaryResponse.

        :param created: The created of this DatasetSummaryResponse.
        :type: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this DatasetSummaryResponse.

        :return: The updated of this DatasetSummaryResponse.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this DatasetSummaryResponse.

        :param updated: The updated of this DatasetSummaryResponse.
        :type: str
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DatasetSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
