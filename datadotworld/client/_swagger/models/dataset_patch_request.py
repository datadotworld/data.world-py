# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DatasetPatchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'visibility': 'str',
        'auto_sync_interval': 'str',
        'description': 'str',
        'summary': 'str',
        'tags': 'list[str]',
        'license': 'str',
        'asset_status_iri': 'str',
        'properties': 'dict(str, JsonNode)'
    }

    attribute_map = {
        'title': 'title',
        'visibility': 'visibility',
        'auto_sync_interval': 'autoSyncInterval',
        'description': 'description',
        'summary': 'summary',
        'tags': 'tags',
        'license': 'license',
        'asset_status_iri': 'assetStatusIri',
        'properties': 'properties'
    }

    def __init__(self, title=None, visibility=None, auto_sync_interval=None, description=None, summary=None, tags=None, license=None, asset_status_iri=None, properties=None):
        """
        DatasetPatchRequest - a model defined in Swagger
        """

        self._title = None
        self._visibility = None
        self._auto_sync_interval = None
        self._description = None
        self._summary = None
        self._tags = None
        self._license = None
        self._asset_status_iri = None
        self._properties = None

        if title is not None:
          self.title = title
        if visibility is not None:
          self.visibility = visibility
        if auto_sync_interval is not None:
          self.auto_sync_interval = auto_sync_interval
        if description is not None:
          self.description = description
        if summary is not None:
          self.summary = summary
        if tags is not None:
          self.tags = tags
        if license is not None:
          self.license = license
        if asset_status_iri is not None:
          self.asset_status_iri = asset_status_iri
        if properties is not None:
          self.properties = properties

    @property
    def title(self):
        """
        Gets the title of this DatasetPatchRequest.

        :return: The title of this DatasetPatchRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this DatasetPatchRequest.

        :param title: The title of this DatasetPatchRequest.
        :type: str
        """
        if title is not None and len(title) > 60:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `60`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def visibility(self):
        """
        Gets the visibility of this DatasetPatchRequest.

        :return: The visibility of this DatasetPatchRequest.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this DatasetPatchRequest.

        :param visibility: The visibility of this DatasetPatchRequest.
        :type: str
        """
        allowed_values = ["OPEN", "PRIVATE"]
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def auto_sync_interval(self):
        """
        Gets the auto_sync_interval of this DatasetPatchRequest.
        Interval in which files should be synced

        :return: The auto_sync_interval of this DatasetPatchRequest.
        :rtype: str
        """
        return self._auto_sync_interval

    @auto_sync_interval.setter
    def auto_sync_interval(self, auto_sync_interval):
        """
        Sets the auto_sync_interval of this DatasetPatchRequest.
        Interval in which files should be synced

        :param auto_sync_interval: The auto_sync_interval of this DatasetPatchRequest.
        :type: str
        """
        allowed_values = ["NEVER", "HOURLY", "DAILY", "WEEKLY"]
        if auto_sync_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_sync_interval` ({0}), must be one of {1}"
                .format(auto_sync_interval, allowed_values)
            )

        self._auto_sync_interval = auto_sync_interval

    @property
    def description(self):
        """
        Gets the description of this DatasetPatchRequest.

        :return: The description of this DatasetPatchRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DatasetPatchRequest.

        :param description: The description of this DatasetPatchRequest.
        :type: str
        """

        self._description = description

    @property
    def summary(self):
        """
        Gets the summary of this DatasetPatchRequest.

        :return: The summary of this DatasetPatchRequest.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this DatasetPatchRequest.

        :param summary: The summary of this DatasetPatchRequest.
        :type: str
        """

        self._summary = summary

    @property
    def tags(self):
        """
        Gets the tags of this DatasetPatchRequest.

        :return: The tags of this DatasetPatchRequest.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DatasetPatchRequest.

        :param tags: The tags of this DatasetPatchRequest.
        :type: list[str]
        """

        self._tags = tags

    @property
    def license(self):
        """
        Gets the license of this DatasetPatchRequest.

        :return: The license of this DatasetPatchRequest.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """
        Sets the license of this DatasetPatchRequest.

        :param license: The license of this DatasetPatchRequest.
        :type: str
        """
        allowed_values = ["Public Domain", "PDDL", "CC-0", "CC-BY", "CDLA-Permissive-1.0", "CC-BY-IGO", "CC-BY 3.0", "CC-BY 3.0 AU", "CC-BY 3.0 IGO", "CC-BY-SA", "CC-BY-SA 3.0", "CDLA-Sharing-1.0", "CC BY-NC", "CC BY-ND", "CC BY-ND 3.0", "CC-BY 3.0 NZ", "CC-BY-NC 3.0", "CC-BY-SA 3.0", "CC BY-NC-ND", "CC-BY-NC-SA 3.0", "CC-BY-SA 3.0 NZ", "CC-BY-NC-SA 3.0 NZ", "CC-BY-NC 3.0 NZ", "CC-BY-NC-ND-NZ-3.0", "CC BY-NC-SA", "CC-BY-NC-SA 3.0", "Italian-ODL", "MIT License", "OGL", "OGL-Canada", "OGL-Nova Scotia", "OGL-UK", "OSODL", "ODC-BY", "ODC-ODbL", "Other"]
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def asset_status_iri(self):
        """
        Gets the asset_status_iri of this DatasetPatchRequest.

        :return: The asset_status_iri of this DatasetPatchRequest.
        :rtype: str
        """
        return self._asset_status_iri

    @asset_status_iri.setter
    def asset_status_iri(self, asset_status_iri):
        """
        Sets the asset_status_iri of this DatasetPatchRequest.

        :param asset_status_iri: The asset_status_iri of this DatasetPatchRequest.
        :type: str
        """

        self._asset_status_iri = asset_status_iri

    @property
    def properties(self):
        """
        Gets the properties of this DatasetPatchRequest.

        :return: The properties of this DatasetPatchRequest.
        :rtype: dict(str, JsonNode)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this DatasetPatchRequest.

        :param properties: The properties of this DatasetPatchRequest.
        :type: dict(str, JsonNode)
        """

        self._properties = properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DatasetPatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
