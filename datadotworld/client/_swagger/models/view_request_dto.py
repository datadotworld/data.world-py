# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ViewRequestDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_name': 'str',
        'run_as_agent_id': 'str',
        'base_agent_id': 'str',
        'base_dataset_id': 'str',
        'query_id': 'str',
        'query_text': 'str',
        'query_type': 'str',
        'target_agent_id': 'str',
        'target_dataset_id': 'str'
    }

    attribute_map = {
        'query_name': 'queryName',
        'run_as_agent_id': 'runAsAgentId',
        'base_agent_id': 'baseAgentId',
        'base_dataset_id': 'baseDatasetId',
        'query_id': 'queryId',
        'query_text': 'queryText',
        'query_type': 'queryType',
        'target_agent_id': 'targetAgentId',
        'target_dataset_id': 'targetDatasetId'
    }

    def __init__(self, query_name=None, run_as_agent_id=None, base_agent_id=None, base_dataset_id=None, query_id=None, query_text=None, query_type=None, target_agent_id=None, target_dataset_id=None):
        """
        ViewRequestDto - a model defined in Swagger
        """

        self._query_name = None
        self._run_as_agent_id = None
        self._base_agent_id = None
        self._base_dataset_id = None
        self._query_id = None
        self._query_text = None
        self._query_type = None
        self._target_agent_id = None
        self._target_dataset_id = None

        self.query_name = query_name
        self.run_as_agent_id = run_as_agent_id
        self.base_agent_id = base_agent_id
        self.base_dataset_id = base_dataset_id
        if query_id is not None:
          self.query_id = query_id
        if query_text is not None:
          self.query_text = query_text
        self.query_type = query_type
        self.target_agent_id = target_agent_id
        self.target_dataset_id = target_dataset_id

    @property
    def query_name(self):
        """
        Gets the query_name of this ViewRequestDto.

        :return: The query_name of this ViewRequestDto.
        :rtype: str
        """
        return self._query_name

    @query_name.setter
    def query_name(self, query_name):
        """
        Sets the query_name of this ViewRequestDto.

        :param query_name: The query_name of this ViewRequestDto.
        :type: str
        """
        if query_name is None:
            raise ValueError("Invalid value for `query_name`, must not be `None`")

        self._query_name = query_name

    @property
    def run_as_agent_id(self):
        """
        Gets the run_as_agent_id of this ViewRequestDto.

        :return: The run_as_agent_id of this ViewRequestDto.
        :rtype: str
        """
        return self._run_as_agent_id

    @run_as_agent_id.setter
    def run_as_agent_id(self, run_as_agent_id):
        """
        Sets the run_as_agent_id of this ViewRequestDto.

        :param run_as_agent_id: The run_as_agent_id of this ViewRequestDto.
        :type: str
        """
        if run_as_agent_id is None:
            raise ValueError("Invalid value for `run_as_agent_id`, must not be `None`")

        self._run_as_agent_id = run_as_agent_id

    @property
    def base_agent_id(self):
        """
        Gets the base_agent_id of this ViewRequestDto.

        :return: The base_agent_id of this ViewRequestDto.
        :rtype: str
        """
        return self._base_agent_id

    @base_agent_id.setter
    def base_agent_id(self, base_agent_id):
        """
        Sets the base_agent_id of this ViewRequestDto.

        :param base_agent_id: The base_agent_id of this ViewRequestDto.
        :type: str
        """
        if base_agent_id is None:
            raise ValueError("Invalid value for `base_agent_id`, must not be `None`")

        self._base_agent_id = base_agent_id

    @property
    def base_dataset_id(self):
        """
        Gets the base_dataset_id of this ViewRequestDto.

        :return: The base_dataset_id of this ViewRequestDto.
        :rtype: str
        """
        return self._base_dataset_id

    @base_dataset_id.setter
    def base_dataset_id(self, base_dataset_id):
        """
        Sets the base_dataset_id of this ViewRequestDto.

        :param base_dataset_id: The base_dataset_id of this ViewRequestDto.
        :type: str
        """
        if base_dataset_id is None:
            raise ValueError("Invalid value for `base_dataset_id`, must not be `None`")

        self._base_dataset_id = base_dataset_id

    @property
    def query_id(self):
        """
        Gets the query_id of this ViewRequestDto.

        :return: The query_id of this ViewRequestDto.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """
        Sets the query_id of this ViewRequestDto.

        :param query_id: The query_id of this ViewRequestDto.
        :type: str
        """

        self._query_id = query_id

    @property
    def query_text(self):
        """
        Gets the query_text of this ViewRequestDto.

        :return: The query_text of this ViewRequestDto.
        :rtype: str
        """
        return self._query_text

    @query_text.setter
    def query_text(self, query_text):
        """
        Sets the query_text of this ViewRequestDto.

        :param query_text: The query_text of this ViewRequestDto.
        :type: str
        """
        if query_text is not None and len(query_text) > 10000:
            raise ValueError("Invalid value for `query_text`, length must be less than or equal to `10000`")
        if query_text is not None and len(query_text) < 1:
            raise ValueError("Invalid value for `query_text`, length must be greater than or equal to `1`")

        self._query_text = query_text

    @property
    def query_type(self):
        """
        Gets the query_type of this ViewRequestDto.

        :return: The query_type of this ViewRequestDto.
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """
        Sets the query_type of this ViewRequestDto.

        :param query_type: The query_type of this ViewRequestDto.
        :type: str
        """
        if query_type is None:
            raise ValueError("Invalid value for `query_type`, must not be `None`")
        allowed_values = ["SPARQL", "SQL"]
        if query_type not in allowed_values:
            raise ValueError(
                "Invalid value for `query_type` ({0}), must be one of {1}"
                .format(query_type, allowed_values)
            )

        self._query_type = query_type

    @property
    def target_agent_id(self):
        """
        Gets the target_agent_id of this ViewRequestDto.

        :return: The target_agent_id of this ViewRequestDto.
        :rtype: str
        """
        return self._target_agent_id

    @target_agent_id.setter
    def target_agent_id(self, target_agent_id):
        """
        Sets the target_agent_id of this ViewRequestDto.

        :param target_agent_id: The target_agent_id of this ViewRequestDto.
        :type: str
        """
        if target_agent_id is None:
            raise ValueError("Invalid value for `target_agent_id`, must not be `None`")

        self._target_agent_id = target_agent_id

    @property
    def target_dataset_id(self):
        """
        Gets the target_dataset_id of this ViewRequestDto.

        :return: The target_dataset_id of this ViewRequestDto.
        :rtype: str
        """
        return self._target_dataset_id

    @target_dataset_id.setter
    def target_dataset_id(self, target_dataset_id):
        """
        Sets the target_dataset_id of this ViewRequestDto.

        :param target_dataset_id: The target_dataset_id of this ViewRequestDto.
        :type: str
        """
        if target_dataset_id is None:
            raise ValueError("Invalid value for `target_dataset_id`, must not be `None`")

        self._target_dataset_id = target_dataset_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ViewRequestDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
