# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DatabaseDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'environment': 'str',
        'type': 'str',
        'server': 'str',
        'port': 'int',
        'catalog': 'str',
        'schema': 'str',
        'created': 'Instant',
        'updated': 'Instant'
    }

    attribute_map = {
        'id': 'id',
        'environment': 'environment',
        'type': 'type',
        'server': 'server',
        'port': 'port',
        'catalog': 'catalog',
        'schema': 'schema',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, id=None, environment=None, type=None, server=None, port=None, catalog=None, schema=None, created=None, updated=None):
        """
        DatabaseDto - a model defined in Swagger
        """

        self._id = None
        self._environment = None
        self._type = None
        self._server = None
        self._port = None
        self._catalog = None
        self._schema = None
        self._created = None
        self._updated = None

        if id is not None:
          self.id = id
        if environment is not None:
          self.environment = environment
        if type is not None:
          self.type = type
        if server is not None:
          self.server = server
        if port is not None:
          self.port = port
        if catalog is not None:
          self.catalog = catalog
        if schema is not None:
          self.schema = schema
        if created is not None:
          self.created = created
        if updated is not None:
          self.updated = updated

    @property
    def id(self):
        """
        Gets the id of this DatabaseDto.

        :return: The id of this DatabaseDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DatabaseDto.

        :param id: The id of this DatabaseDto.
        :type: str
        """

        self._id = id

    @property
    def environment(self):
        """
        Gets the environment of this DatabaseDto.

        :return: The environment of this DatabaseDto.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this DatabaseDto.

        :param environment: The environment of this DatabaseDto.
        :type: str
        """

        self._environment = environment

    @property
    def type(self):
        """
        Gets the type of this DatabaseDto.

        :return: The type of this DatabaseDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DatabaseDto.

        :param type: The type of this DatabaseDto.
        :type: str
        """

        self._type = type

    @property
    def server(self):
        """
        Gets the server of this DatabaseDto.

        :return: The server of this DatabaseDto.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """
        Sets the server of this DatabaseDto.

        :param server: The server of this DatabaseDto.
        :type: str
        """

        self._server = server

    @property
    def port(self):
        """
        Gets the port of this DatabaseDto.

        :return: The port of this DatabaseDto.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this DatabaseDto.

        :param port: The port of this DatabaseDto.
        :type: int
        """

        self._port = port

    @property
    def catalog(self):
        """
        Gets the catalog of this DatabaseDto.

        :return: The catalog of this DatabaseDto.
        :rtype: str
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """
        Sets the catalog of this DatabaseDto.

        :param catalog: The catalog of this DatabaseDto.
        :type: str
        """

        self._catalog = catalog

    @property
    def schema(self):
        """
        Gets the schema of this DatabaseDto.

        :return: The schema of this DatabaseDto.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this DatabaseDto.

        :param schema: The schema of this DatabaseDto.
        :type: str
        """

        self._schema = schema

    @property
    def created(self):
        """
        Gets the created of this DatabaseDto.

        :return: The created of this DatabaseDto.
        :rtype: Instant
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this DatabaseDto.

        :param created: The created of this DatabaseDto.
        :type: Instant
        """

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this DatabaseDto.

        :return: The updated of this DatabaseDto.
        :rtype: Instant
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this DatabaseDto.

        :param updated: The updated of this DatabaseDto.
        :type: Instant
        """

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DatabaseDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
