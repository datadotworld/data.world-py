# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PaginatedGenericResults(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'records': 'list[object]',
        'next': 'str',
        'hydrations': 'SearchHydrations'
    }

    attribute_map = {
        'count': 'count',
        'records': 'records',
        'next': 'next',
        'hydrations': 'hydrations'
    }

    def __init__(self, count=None, records=None, next=None, hydrations=None):
        """
        PaginatedGenericResults - a model defined in Swagger
        """

        self._count = None
        self._records = None
        self._next = None
        self._hydrations = None

        if count is not None:
          self.count = count
        if records is not None:
          self.records = records
        if next is not None:
          self.next = next
        if hydrations is not None:
          self.hydrations = hydrations

    @property
    def count(self):
        """
        Gets the count of this PaginatedGenericResults.

        :return: The count of this PaginatedGenericResults.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this PaginatedGenericResults.

        :param count: The count of this PaginatedGenericResults.
        :type: int
        """
        if count is not None and count < 0:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")

        self._count = count

    @property
    def records(self):
        """
        Gets the records of this PaginatedGenericResults.

        :return: The records of this PaginatedGenericResults.
        :rtype: list[object]
        """
        return self._records

    @records.setter
    def records(self, records):
        """
        Sets the records of this PaginatedGenericResults.

        :param records: The records of this PaginatedGenericResults.
        :type: list[object]
        """

        self._records = records

    @property
    def next(self):
        """
        Gets the next of this PaginatedGenericResults.

        :return: The next of this PaginatedGenericResults.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """
        Sets the next of this PaginatedGenericResults.

        :param next: The next of this PaginatedGenericResults.
        :type: str
        """

        self._next = next

    @property
    def hydrations(self):
        """
        Gets the hydrations of this PaginatedGenericResults.

        :return: The hydrations of this PaginatedGenericResults.
        :rtype: SearchHydrations
        """
        return self._hydrations

    @hydrations.setter
    def hydrations(self, hydrations):
        """
        Sets the hydrations of this PaginatedGenericResults.

        :param hydrations: The hydrations of this PaginatedGenericResults.
        :type: SearchHydrations
        """

        self._hydrations = hydrations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PaginatedGenericResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
