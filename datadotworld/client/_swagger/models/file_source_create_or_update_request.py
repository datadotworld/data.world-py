# coding: utf-8

"""
    data.world API

    data.world is designed for data and the people who work with data.  From professional projects to open data, data.world helps you host and share your data, collaborate with your team, and capture context and conclusions as you work.   Using this API users are able to easily access data and manage their data projects regardless of language or tool of preference.  Check out our [documentation](https://dwapi.apidocs.io) for tips on how to get started, tutorials and to interact with the API right within your browser.

    OpenAPI spec version: 0.9.0
    Contact: help@data.world
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FileSourceCreateOrUpdateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'expand_archive': 'bool'
    }

    attribute_map = {
        'url': 'url',
        'expand_archive': 'expandArchive'
    }

    def __init__(self, url=None, expand_archive=False):
        """
        FileSourceCreateOrUpdateRequest - a model defined in Swagger
        """

        self._url = None
        self._expand_archive = None

        self.url = url
        if expand_archive is not None:
          self.expand_archive = expand_archive

    @property
    def url(self):
        """
        Gets the url of this FileSourceCreateOrUpdateRequest.
        Source URL of file. Must be an http or https URL.

        :return: The url of this FileSourceCreateOrUpdateRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this FileSourceCreateOrUpdateRequest.
        Source URL of file. Must be an http or https URL.

        :param url: The url of this FileSourceCreateOrUpdateRequest.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and len(url) > 4096:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `4096`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")
        if url is not None and not re.search('^(https?|stream).*', url):
            raise ValueError("Invalid value for `url`, must be a follow pattern or equal to `/^https?.*/`")

        self._url = url

    @property
    def expand_archive(self):
        """
        Gets the expand_archive of this FileSourceCreateOrUpdateRequest.
        Indicates whether compressed files should be expanded upon upload.

        :return: The expand_archive of this FileSourceCreateOrUpdateRequest.
        :rtype: bool
        """
        return self._expand_archive

    @expand_archive.setter
    def expand_archive(self, expand_archive):
        """
        Sets the expand_archive of this FileSourceCreateOrUpdateRequest.
        Indicates whether compressed files should be expanded upon upload.

        :param expand_archive: The expand_archive of this FileSourceCreateOrUpdateRequest.
        :type: bool
        """

        self._expand_archive = expand_archive

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FileSourceCreateOrUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
