# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FileCreateOrUpdateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'source': 'FileSourceCreateOrUpdateRequest',
        'description': 'str',
        'labels': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'source': 'source',
        'description': 'description',
        'labels': 'labels'
    }

    def __init__(self, name=None, source=None, description=None, labels=None):
        """
        FileCreateOrUpdateRequest - a model defined in Swagger
        """

        self._name = None
        self._source = None
        self._description = None
        self._labels = None

        self.name = name
        if source is not None:
          self.source = source
        if description is not None:
          self.description = description
        if labels is not None:
          self.labels = labels

    @property
    def name(self):
        """
        Gets the name of this FileCreateOrUpdateRequest.

        :return: The name of this FileCreateOrUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FileCreateOrUpdateRequest.

        :param name: The name of this FileCreateOrUpdateRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search('^[^\/]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[^\/]+$/`")

        self._name = name

    @property
    def source(self):
        """
        Gets the source of this FileCreateOrUpdateRequest.

        :return: The source of this FileCreateOrUpdateRequest.
        :rtype: FileSourceCreateOrUpdateRequest
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this FileCreateOrUpdateRequest.

        :param source: The source of this FileCreateOrUpdateRequest.
        :type: FileSourceCreateOrUpdateRequest
        """

        self._source = source

    @property
    def description(self):
        """
        Gets the description of this FileCreateOrUpdateRequest.

        :return: The description of this FileCreateOrUpdateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this FileCreateOrUpdateRequest.

        :param description: The description of this FileCreateOrUpdateRequest.
        :type: str
        """
        if description is not None and len(description) > 120:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `120`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def labels(self):
        """
        Gets the labels of this FileCreateOrUpdateRequest.

        :return: The labels of this FileCreateOrUpdateRequest.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this FileCreateOrUpdateRequest.

        :param labels: The labels of this FileCreateOrUpdateRequest.
        :type: list[str]
        """

        self._labels = labels

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FileCreateOrUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
