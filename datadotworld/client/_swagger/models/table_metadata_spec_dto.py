# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TableMetadataSpecDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database': 'str',
        'schema': 'str',
        'tables': 'list[str]',
        'table_prefixes': 'list[str]',
        'table_types': 'list[str]'
    }

    attribute_map = {
        'database': 'database',
        'schema': 'schema',
        'tables': 'tables',
        'table_prefixes': 'tablePrefixes',
        'table_types': 'tableTypes'
    }

    def __init__(self, database=None, schema=None, tables=None, table_prefixes=None, table_types=None):
        """
        TableMetadataSpecDto - a model defined in Swagger
        """

        self._database = None
        self._schema = None
        self._tables = None
        self._table_prefixes = None
        self._table_types = None

        if database is not None:
          self.database = database
        if schema is not None:
          self.schema = schema
        if tables is not None:
          self.tables = tables
        if table_prefixes is not None:
          self.table_prefixes = table_prefixes
        if table_types is not None:
          self.table_types = table_types

    @property
    def database(self):
        """
        Gets the database of this TableMetadataSpecDto.

        :return: The database of this TableMetadataSpecDto.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """
        Sets the database of this TableMetadataSpecDto.

        :param database: The database of this TableMetadataSpecDto.
        :type: str
        """

        self._database = database

    @property
    def schema(self):
        """
        Gets the schema of this TableMetadataSpecDto.

        :return: The schema of this TableMetadataSpecDto.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this TableMetadataSpecDto.

        :param schema: The schema of this TableMetadataSpecDto.
        :type: str
        """

        self._schema = schema

    @property
    def tables(self):
        """
        Gets the tables of this TableMetadataSpecDto.

        :return: The tables of this TableMetadataSpecDto.
        :rtype: list[str]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """
        Sets the tables of this TableMetadataSpecDto.

        :param tables: The tables of this TableMetadataSpecDto.
        :type: list[str]
        """

        self._tables = tables

    @property
    def table_prefixes(self):
        """
        Gets the table_prefixes of this TableMetadataSpecDto.

        :return: The table_prefixes of this TableMetadataSpecDto.
        :rtype: list[str]
        """
        return self._table_prefixes

    @table_prefixes.setter
    def table_prefixes(self, table_prefixes):
        """
        Sets the table_prefixes of this TableMetadataSpecDto.

        :param table_prefixes: The table_prefixes of this TableMetadataSpecDto.
        :type: list[str]
        """

        self._table_prefixes = table_prefixes

    @property
    def table_types(self):
        """
        Gets the table_types of this TableMetadataSpecDto.

        :return: The table_types of this TableMetadataSpecDto.
        :rtype: list[str]
        """
        return self._table_types

    @table_types.setter
    def table_types(self, table_types):
        """
        Sets the table_types of this TableMetadataSpecDto.

        :param table_types: The table_types of this TableMetadataSpecDto.
        :type: list[str]
        """
        allowed_values = ["TABLE", "EXTERNAL_TABLE", "VIEW"]
        if not set(table_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `table_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(table_types)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._table_types = table_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TableMetadataSpecDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
