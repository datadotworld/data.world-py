# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SparqlApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def query_via_get(self, owner, id, **kwargs):
        """
        SPARQL query (via GET)
        This endpoint executes SPARQL queries against a dataset. New to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_via_get(owner, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner: (required)
        :param str id: (required)
        :param str query:
        :param str queryruntoken: Query token to use with cancel
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_via_get_with_http_info(owner, id, **kwargs)
        else:
            (data) = self.query_via_get_with_http_info(owner, id, **kwargs)
            return data

    def query_via_get_with_http_info(self, owner, id, **kwargs):
        """
        SPARQL query (via GET)
        This endpoint executes SPARQL queries against a dataset. New to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_via_get_with_http_info(owner, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner: (required)
        :param str id: (required)
        :param str query:
        :param str queryruntoken: Query token to use with cancel
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'id', 'query', 'queryruntoken']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_via_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `query_via_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `query_via_get`")

        if 'owner' in params and len(params['owner']) > 32:
            raise ValueError("Invalid value for parameter `owner` when calling `query_via_get`, number of items must be less than or equal to `32`")
        if 'owner' in params and len(params['owner']) < 0:
            raise ValueError("Invalid value for parameter `owner` when calling `query_via_get`, number of items must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))
        if 'queryruntoken' in params:
            query_params.append(('queryruntoken', params['queryruntoken']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/tab-separated-values', 'application/rdf+json', 'application/rdf+xml', 'text/csv', 'application/sparql-results+xml', 'text/turtle', 'application/sparql-results+json'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/sparql/{owner}/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_via_url_encoded_post(self, owner, id, **kwargs):
        """
        SPARQL query
        This endpoint executes SPARQL queries against a dataset. New to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_via_url_encoded_post(owner, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner: (required)
        :param str id: (required)
        :param str query:
        :param str queryruntoken: Query token to use with cancel
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_via_url_encoded_post_with_http_info(owner, id, **kwargs)
        else:
            (data) = self.query_via_url_encoded_post_with_http_info(owner, id, **kwargs)
            return data

    def query_via_url_encoded_post_with_http_info(self, owner, id, **kwargs):
        """
        SPARQL query
        This endpoint executes SPARQL queries against a dataset. New to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_via_url_encoded_post_with_http_info(owner, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner: (required)
        :param str id: (required)
        :param str query:
        :param str queryruntoken: Query token to use with cancel
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'id', 'query', 'queryruntoken']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_via_url_encoded_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `query_via_url_encoded_post`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `query_via_url_encoded_post`")

        if 'owner' in params and len(params['owner']) > 32:
            raise ValueError("Invalid value for parameter `owner` when calling `query_via_url_encoded_post`, number of items must be less than or equal to `32`")
        if 'owner' in params and len(params['owner']) < 0:
            raise ValueError("Invalid value for parameter `owner` when calling `query_via_url_encoded_post`, number of items must be greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'queryruntoken' in params:
            query_params.append(('queryruntoken', params['queryruntoken']))

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'query' in params:
            form_params.append(('query', params['query']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/tab-separated-values', 'application/rdf+json', 'application/rdf+xml', 'text/csv', 'application/sparql-results+xml', 'text/turtle', 'application/sparql-results+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/sparql/{owner}/{id}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
