# coding: utf-8

"""
    data.world Public API (internal version)

    This is the internal version of the Swagger API generated from the Java                                             resource objects and is not visible to external users. It must be a superset                                             of the more user-friendly Swagger API maintained manually at                                             https://github.com/datadotworld/dwapi-spec.

    OpenAPI spec version: 0.21.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class InsightsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_insight(self, project_owner, project_id, body, **kwargs):
        """
        Create new insight for a project.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_insight(project_owner, project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param InsightCreateRequest body: (required)
        :return: CreateInsightResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_insight_with_http_info(project_owner, project_id, body, **kwargs)
        else:
            (data) = self.create_insight_with_http_info(project_owner, project_id, body, **kwargs)
            return data

    def create_insight_with_http_info(self, project_owner, project_id, body, **kwargs):
        """
        Create new insight for a project.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_insight_with_http_info(project_owner, project_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param InsightCreateRequest body: (required)
        :return: CreateInsightResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner', 'project_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner' is set
        if ('project_owner' not in params) or (params['project_owner'] is None):
            raise ValueError("Missing the required parameter `project_owner` when calling `create_insight`")
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_insight`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_insight`")


        collection_formats = {}

        path_params = {}
        if 'project_owner' in params:
            path_params['projectOwner'] = params['project_owner']
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/insights/{projectOwner}/{projectId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateInsightResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_insight(self, project_owner, project_id, id, **kwargs):
        """
        Delete an insight.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_insight(project_owner, project_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_insight_with_http_info(project_owner, project_id, id, **kwargs)
        else:
            (data) = self.delete_insight_with_http_info(project_owner, project_id, id, **kwargs)
            return data

    def delete_insight_with_http_info(self, project_owner, project_id, id, **kwargs):
        """
        Delete an insight.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_insight_with_http_info(project_owner, project_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner', 'project_id', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner' is set
        if ('project_owner' not in params) or (params['project_owner'] is None):
            raise ValueError("Missing the required parameter `project_owner` when calling `delete_insight`")
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_insight`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_insight`")


        collection_formats = {}

        path_params = {}
        if 'project_owner' in params:
            path_params['projectOwner'] = params['project_owner']
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/insights/{projectOwner}/{projectId}/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SuccessMessage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_insight(self, project_owner, project_id, id, **kwargs):
        """
        Retrieve a project insight.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_insight(project_owner, project_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: InsightSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_insight_with_http_info(project_owner, project_id, id, **kwargs)
        else:
            (data) = self.get_insight_with_http_info(project_owner, project_id, id, **kwargs)
            return data

    def get_insight_with_http_info(self, project_owner, project_id, id, **kwargs):
        """
        Retrieve a project insight.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_insight_with_http_info(project_owner, project_id, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :return: InsightSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner', 'project_id', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner' is set
        if ('project_owner' not in params) or (params['project_owner'] is None):
            raise ValueError("Missing the required parameter `project_owner` when calling `get_insight`")
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_insight`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_insight`")


        collection_formats = {}

        path_params = {}
        if 'project_owner' in params:
            path_params['projectOwner'] = params['project_owner']
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/insights/{projectOwner}/{projectId}/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InsightSummaryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_insight_by_version(self, project_owner, project_id, id, version_id, **kwargs):
        """
        Retrieve a project insight by version.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_insight_by_version(project_owner, project_id, id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :param str version_id: (required)
        :return: InsightSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_insight_by_version_with_http_info(project_owner, project_id, id, version_id, **kwargs)
        else:
            (data) = self.get_insight_by_version_with_http_info(project_owner, project_id, id, version_id, **kwargs)
            return data

    def get_insight_by_version_with_http_info(self, project_owner, project_id, id, version_id, **kwargs):
        """
        Retrieve a project insight by version.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_insight_by_version_with_http_info(project_owner, project_id, id, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :param str version_id: (required)
        :return: InsightSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner', 'project_id', 'id', 'version_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight_by_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner' is set
        if ('project_owner' not in params) or (params['project_owner'] is None):
            raise ValueError("Missing the required parameter `project_owner` when calling `get_insight_by_version`")
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_insight_by_version`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_insight_by_version`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_insight_by_version`")


        collection_formats = {}

        path_params = {}
        if 'project_owner' in params:
            path_params['projectOwner'] = params['project_owner']
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id' in params:
            path_params['id'] = params['id']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/insights/{projectOwner}/{projectId}/{id}/v/{versionId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InsightSummaryResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_insights_for_project(self, project_owner, project_id, **kwargs):
        """
        Get insights for project.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_insights_for_project(project_owner, project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str limit:
        :param str next:
        :return: PaginatedInsightResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_insights_for_project_with_http_info(project_owner, project_id, **kwargs)
        else:
            (data) = self.get_insights_for_project_with_http_info(project_owner, project_id, **kwargs)
            return data

    def get_insights_for_project_with_http_info(self, project_owner, project_id, **kwargs):
        """
        Get insights for project.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_insights_for_project_with_http_info(project_owner, project_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str limit:
        :param str next:
        :return: PaginatedInsightResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner', 'project_id', 'limit', 'next']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insights_for_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner' is set
        if ('project_owner' not in params) or (params['project_owner'] is None):
            raise ValueError("Missing the required parameter `project_owner` when calling `get_insights_for_project`")
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_insights_for_project`")


        collection_formats = {}

        path_params = {}
        if 'project_owner' in params:
            path_params['projectOwner'] = params['project_owner']
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'next' in params:
            query_params.append(('next', params['next']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/insights/{projectOwner}/{projectId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedInsightResults',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def replace_insight(self, project_owner, project_id, id, body, **kwargs):
        """
        Replace an existing insight or create a new insight.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_insight(project_owner, project_id, id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :param InsightPutRequest body: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_insight_with_http_info(project_owner, project_id, id, body, **kwargs)
        else:
            (data) = self.replace_insight_with_http_info(project_owner, project_id, id, body, **kwargs)
            return data

    def replace_insight_with_http_info(self, project_owner, project_id, id, body, **kwargs):
        """
        Replace an existing insight or create a new insight.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_insight_with_http_info(project_owner, project_id, id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :param InsightPutRequest body: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner', 'project_id', 'id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner' is set
        if ('project_owner' not in params) or (params['project_owner'] is None):
            raise ValueError("Missing the required parameter `project_owner` when calling `replace_insight`")
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `replace_insight`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `replace_insight`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_insight`")


        collection_formats = {}

        path_params = {}
        if 'project_owner' in params:
            path_params['projectOwner'] = params['project_owner']
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/insights/{projectOwner}/{projectId}/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SuccessMessage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_insight(self, project_owner, project_id, id, body, **kwargs):
        """
        Update an existing insight.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_insight(project_owner, project_id, id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :param InsightPatchRequest body: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_insight_with_http_info(project_owner, project_id, id, body, **kwargs)
        else:
            (data) = self.update_insight_with_http_info(project_owner, project_id, id, body, **kwargs)
            return data

    def update_insight_with_http_info(self, project_owner, project_id, id, body, **kwargs):
        """
        Update an existing insight.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_insight_with_http_info(project_owner, project_id, id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_owner: (required)
        :param str project_id: (required)
        :param str id: (required)
        :param InsightPatchRequest body: (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_owner', 'project_id', 'id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_owner' is set
        if ('project_owner' not in params) or (params['project_owner'] is None):
            raise ValueError("Missing the required parameter `project_owner` when calling `update_insight`")
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params) or (params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_insight`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_insight`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_insight`")


        collection_formats = {}

        path_params = {}
        if 'project_owner' in params:
            path_params['projectOwner'] = params['project_owner']
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth']

        return self.api_client.call_api('/insights/{projectOwner}/{projectId}/{id}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SuccessMessage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
